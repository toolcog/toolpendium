{
  "name": "apigee_organizations_apiproducts_rateplans_create",
  "description": "Create a rate plan that is associated with an API product in an organization. Using rate plans, API product owners can monetize their API products by configuring one or more of the following: - Billing frequency - Initial setup fees for using an API product - Payment funding model (postpaid only) - Fixed recurring or consumption-based charges for using an API product - Revenue sharing with developer partners An API product can have multiple rate plans associated with it but *only one* rate plan can be active at any point of time. **Note: From the developer's perspective, they purchase API products not rate plans.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Name of the API product that is associated with the rate plan. Use the following structure in your request: `organizations/{org}/apiproducts/{apiproduct}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudApigeeV1RatePlan"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudApigeeV1RatePlan": {
        "description": "Rate plan details.",
        "properties": {
          "apiproduct": {
            "description": "Name of the API product that the rate plan is associated with.",
            "type": "string"
          },
          "billingPeriod": {
            "description": "Frequency at which the customer will be billed.",
            "enum": [
              "BILLING_PERIOD_UNSPECIFIED",
              "WEEKLY",
              "MONTHLY"
            ],
            "type": "string"
          },
          "consumptionPricingRates": {
            "description": "API call volume ranges and the fees charged when the total number of API calls is within a given range. The method used to calculate the final fee depends on the selected pricing model. For example, if the pricing model is `STAIRSTEP` and the ranges are defined as follows: ``` { \"start\": 1, \"end\": 100, \"fee\": 75 }, { \"start\": 101, \"end\": 200, \"fee\": 100 }, } ``` Then the following fees would be charged based on the total number of API calls (assuming the currency selected is `USD`): * 1 call costs $75 * 50 calls cost $75 * 150 calls cost $100 The number of API calls cannot exceed 200.",
            "items": {
              "$ref": "#/$defs/GoogleCloudApigeeV1RateRange"
            },
            "type": "array"
          },
          "consumptionPricingType": {
            "description": "Pricing model used for consumption-based charges.",
            "enum": [
              "CONSUMPTION_PRICING_TYPE_UNSPECIFIED",
              "FIXED_PER_UNIT",
              "BANDED",
              "TIERED",
              "STAIRSTEP"
            ],
            "type": "string"
          },
          "createdAt": {
            "description": "Output only. Time that the rate plan was created in milliseconds since epoch.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "currencyCode": {
            "description": "Currency to be used for billing. Consists of a three-letter code as defined by the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) standard.",
            "type": "string"
          },
          "description": {
            "description": "Description of the rate plan.",
            "type": "string"
          },
          "displayName": {
            "description": "Display name of the rate plan.",
            "type": "string"
          },
          "endTime": {
            "description": "Time when the rate plan will expire in milliseconds since epoch. Set to 0 or `null` to indicate that the rate plan should never expire.",
            "format": "int64",
            "type": "string"
          },
          "fixedFeeFrequency": {
            "description": "Frequency at which the fixed fee is charged.",
            "format": "int32",
            "type": "integer"
          },
          "fixedRecurringFee": {
            "$ref": "#/$defs/GoogleTypeMoney"
          },
          "lastModifiedAt": {
            "description": "Output only. Time the rate plan was last modified in milliseconds since epoch.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Output only. Name of the rate plan.",
            "readOnly": true,
            "type": "string"
          },
          "paymentFundingModel": {
            "deprecated": true,
            "description": "DEPRECATED: This field is no longer supported and will eventually be removed when Apigee Hybrid 1.5/1.6 is no longer supported. Instead, use the `billingType` field inside `DeveloperMonetizationConfig` resource. Flag that specifies the billing account type, prepaid or postpaid.",
            "enum": [
              "PAYMENT_FUNDING_MODEL_UNSPECIFIED",
              "PREPAID",
              "POSTPAID"
            ],
            "type": "string"
          },
          "revenueShareRates": {
            "description": "Details of the revenue sharing model.",
            "items": {
              "$ref": "#/$defs/GoogleCloudApigeeV1RevenueShareRange"
            },
            "type": "array"
          },
          "revenueShareType": {
            "description": "Method used to calculate the revenue that is shared with developers.",
            "enum": [
              "REVENUE_SHARE_TYPE_UNSPECIFIED",
              "FIXED",
              "VOLUME_BANDED"
            ],
            "type": "string"
          },
          "setupFee": {
            "$ref": "#/$defs/GoogleTypeMoney"
          },
          "startTime": {
            "description": "Time when the rate plan becomes active in milliseconds since epoch.",
            "format": "int64",
            "type": "string"
          },
          "state": {
            "description": "Current state of the rate plan (draft or published).",
            "enum": [
              "STATE_UNSPECIFIED",
              "DRAFT",
              "PUBLISHED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudApigeeV1RateRange": {
        "description": "API call volume range and the fees charged when the total number of API calls is within the range.",
        "properties": {
          "end": {
            "description": "Ending value of the range. Set to 0 or `null` for the last range of values.",
            "format": "int64",
            "type": "string"
          },
          "fee": {
            "$ref": "#/$defs/GoogleTypeMoney"
          },
          "start": {
            "description": "Starting value of the range. Set to 0 or `null` for the initial range of values.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleTypeMoney": {
        "description": "Represents an amount of money with its currency type.",
        "properties": {
          "currencyCode": {
            "description": "The three-letter currency code defined in ISO 4217.",
            "type": "string"
          },
          "nanos": {
            "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
            "format": "int32",
            "type": "integer"
          },
          "units": {
            "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudApigeeV1RevenueShareRange": {
        "description": "API call volume range and the percentage of revenue to share with the developer when the total number of API calls is within the range.",
        "properties": {
          "end": {
            "description": "Ending value of the range. Set to 0 or `null` for the last range of values.",
            "format": "int64",
            "type": "string"
          },
          "sharePercentage": {
            "description": "Percentage of the revenue to be shared with the developer. For example, to share 21 percent of the total revenue with the developer, set this value to 21. Specify a decimal number with a maximum of two digits following the decimal point.",
            "format": "double",
            "type": "number"
          },
          "start": {
            "description": "Starting value of the range. Set to 0 or `null` for the initial range of values.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://apigee.googleapis.com//v1/{parent}/rateplans{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Rate plan details.",
        "**Key properties:**",
        {
          "$ul": [
            "**apiproduct**: Name of the API product that the rate plan is associated with.",
            "**billingPeriod**: Frequency at which the customer will be billed.",
            "**consumptionPricingRates**: API call volume ranges and the fees charged when the total number of API calls is within a given range. The method used to calculate the final fee depends on the selected pricing model. For example, if the pricing model is `STAIRSTEP` and the ranges are defined as follows: ``` { \"start\": 1, \"end\": 100, \"fee\": 75 }, { \"start\": 101, \"end\": 200, \"fee\": 100 }, } ``` Then the following fees would be charged based on the total number of API calls (assuming the currency selected is `USD`): * 1 call costs $75 * 50 calls cost $75 * 150 calls cost $100 The number of API calls cannot exceed 200.",
            "**consumptionPricingType**: Pricing model used for consumption-based charges.",
            "**createdAt**: Output only. Time that the rate plan was created in milliseconds since epoch.",
            "**currencyCode**: Currency to be used for billing. Consists of a three-letter code as defined by the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) standard.",
            "**description**: Description of the rate plan.",
            "**displayName**: Display name of the rate plan.",
            "**endTime**: Time when the rate plan will expire in milliseconds since epoch. Set to 0 or `null` to indicate that the rate plan should never expire.",
            "**fixedFeeFrequency**: Frequency at which the fixed fee is charged.",
            [
              "**fixedRecurringFee**: Represents an amount of money with its currency type.",
              {
                "$ul": [
                  "**currencyCode**: The three-letter currency code defined in ISO 4217.",
                  "**nanos**: Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
                  "**units**: The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                ]
              }
            ],
            "**lastModifiedAt**: Output only. Time the rate plan was last modified in milliseconds since epoch.",
            "**name**: Output only. Name of the rate plan.",
            "**paymentFundingModel**: DEPRECATED: This field is no longer supported and will eventually be removed when Apigee Hybrid 1.5/1.6 is no longer supported. Instead, use the `billingType` field inside `DeveloperMonetizationConfig` resource. Flag that specifies the billing account type, prepaid or postpaid.",
            "**revenueShareRates**: Details of the revenue sharing model.",
            "**revenueShareType**: Method used to calculate the revenue that is shared with developers.",
            [
              "**setupFee**: Represents an amount of money with its currency type.",
              {
                "$ul": [
                  "**currencyCode**: The three-letter currency code defined in ISO 4217.",
                  "**nanos**: Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
                  "**units**: The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                ]
              }
            ],
            "**startTime**: Time when the rate plan becomes active in milliseconds since epoch.",
            "**state**: Current state of the rate plan (draft or published)."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
