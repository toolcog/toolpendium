{
  "name": "apigee_organizations_environments_securityActions_enable",
  "description": "Enable a SecurityAction. The `state` of the SecurityAction after enabling is `ENABLED`. `EnableSecurityAction` can be called on SecurityActions in the state `DISABLED`; SecurityActions in a different state (including `ENABLED) return an error.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The name of the SecurityAction to enable. Format: organizations/{org}/environments/{env}/securityActions/{security_action}"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudApigeeV1EnableSecurityActionRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "GoogleCloudApigeeV1EnableSecurityActionRequest": {
        "description": "Message to enable a disabled SecurityAction.",
        "properties": {},
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://apigee.googleapis.com//v1/{name}:enable{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A SecurityAction is rule that can be enforced at an environment level. The result is one of: - A denied API call - An explicitly allowed API call - A flagged API call (HTTP headers added before the target receives it) At least one condition is required to create a SecurityAction.",
        "**Key properties:**",
        {
          "$ul": [
            "**allow**: Message that should be set in case of an Allow Action. This does not have any fields.",
            [
              "**conditionConfig**: The following are a list of conditions. A valid SecurityAction must contain at least one condition. Within a condition, each element is ORed. Across conditions elements are ANDed. For example if a SecurityAction has the following: ip_address_ranges: [\"ip1\", \"ip2\"] and bot_reasons: [\"Flooder\", \"Robot Abuser\"] then this is interpreted as: enforce the action if the incoming request has ((ip_address_ranges = \"ip1\" OR ip_address_ranges = \"ip2\") AND (bot_reasons=\"Flooder\" OR bot_reasons=\"Robot Abuser\")). Conditions other than ip_address_ranges and bot_reasons cannot be ANDed.",
              {
                "$ul": [
                  "**accessTokens**: Optional. A list of access_tokens. Limit 1000 per action.",
                  "**apiKeys**: Optional. A list of API keys. Limit 1000 per action.",
                  "**apiProducts**: Optional. A list of API Products. Limit 1000 per action.",
                  "**botReasons**: Optional. A list of Bot Reasons. Current options: Flooder, Brute Guessor, Static Content Scraper, OAuth Abuser, Robot Abuser, TorListRule, Advanced Anomaly Detection, Advanced API Scraper, Search Engine Crawlers, Public Clouds, Public Cloud AWS, Public Cloud Azure, and Public Cloud Google.",
                  "**developerApps**: Optional. A list of developer apps. Limit 1000 per action.",
                  "**developers**: Optional. A list of developers. Limit 1000 per action.",
                  "**ipAddressRanges**: Optional. A list of IP addresses. This could be either IPv4 or IPv6. Limited to 100 per action.",
                  "**userAgents**: Optional. A list of user agents to deny. We look for exact matches. Limit 50 per action."
                ]
              }
            ],
            "**createTime**: Output only. The create time for this SecurityAction.",
            [
              "**deny**: Message that should be set in case of a Deny Action.",
              {
                "$ul": [
                  "**responseCode**: Optional. The HTTP response code if the Action = DENY."
                ]
              }
            ],
            "**description**: Optional. An optional user provided description of the SecurityAction.",
            "**expireTime**: The expiration for this SecurityAction.",
            [
              "**flag**: The message that should be set in the case of a Flag action.",
              {
                "$ul": [
                  "**headers**: Optional. A list of HTTP headers to be sent to the target in case of a FLAG SecurityAction. Limit 5 headers per SecurityAction. At least one is mandatory."
                ]
              }
            ],
            "**name**: Immutable. This field is ignored during creation as per AIP-133. Please set the `security_action_id` field in the CreateSecurityActionRequest when creating a new SecurityAction. Format: organizations/{org}/environments/{env}/securityActions/{security_action}",
            "**state**: Required. Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.",
            "**ttl**: Input only. The TTL for this SecurityAction.",
            "**updateTime**: Output only. The update time for this SecurityAction. This reflects when this SecurityAction changed states."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
