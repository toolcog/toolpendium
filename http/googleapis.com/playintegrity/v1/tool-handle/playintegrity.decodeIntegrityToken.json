{
  "name": "playintegrity_decodeIntegrityToken",
  "description": "Decodes the integrity token and returns the token payload.",
  "parameters": {
    "type": "object",
    "properties": {
      "packageName": {
        "type": "string",
        "description": " Package name of the app the attached integrity token belongs to."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/DecodeIntegrityTokenRequest"
      }
    },
    "required": [
      "packageName"
    ],
    "$defs": {
      "DecodeIntegrityTokenRequest": {
        "description": "Request to decode the integrity token.",
        "properties": {
          "integrityToken": {
            "description": "Encoded integrity token.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://playintegrity.googleapis.com//v1/{packageName}:decodeIntegrityToken{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response containing the decoded integrity payload.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**tokenPayloadExternal**: Contains basic app information and integrity signals like device attestation and licensing details.",
              {
                "$ul": [
                  [
                    "**accountDetails**: Contains the account information such as the licensing status for the user in the scope.",
                    {
                      "$ul": [
                        [
                          "**accountActivity**: (Restricted Access) Contains a signal helping apps differentiating between likely genuine and likely non-genuine user traffic.",
                          {
                            "$ul": [
                              "**activityLevel**: Required. Indicates the activity level of the account."
                            ]
                          }
                        ],
                        "**appLicensingVerdict**: Required. Details about the licensing status of the user for the app in the scope."
                      ]
                    }
                  ],
                  [
                    "**appIntegrity**: Contains the application integrity information.",
                    {
                      "$ul": [
                        "**appRecognitionVerdict**: Required. Details about the app recognition verdict",
                        "**certificateSha256Digest**: The SHA256 hash of the requesting app's signing certificates (base64 web-safe encoded). Set iff app_recognition_verdict != UNEVALUATED.",
                        "**packageName**: Package name of the application under attestation. Set iff app_recognition_verdict != UNEVALUATED.",
                        "**versionCode**: Version code of the application. Set iff app_recognition_verdict != UNEVALUATED."
                      ]
                    }
                  ],
                  [
                    "**deviceIntegrity**: Contains the device attestation information.",
                    {
                      "$ul": [
                        "**deviceRecognitionVerdict**: Details about the integrity of the device the app is running on.",
                        [
                          "**recentDeviceActivity**: Recent device activity can help developers identify devices that have exhibited hyperactive attestation activity, which could be a sign of an attack or token farming.",
                          {
                            "$ul": [
                              "**deviceActivityLevel**: Required. Indicates the activity level of the device."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**environmentDetails**: Contains information about the environment Play Integrity API runs in, e.g. Play Protect verdict.",
                    {
                      "$ul": [
                        [
                          "**appAccessRiskVerdict**: Contains signals about others apps on the device which could be used to access or control the requesting app.",
                          {
                            "$ul": [
                              "**otherApps**: Required. App access risk verdict related to apps that are not installed by Google Play, and are not preloaded on the system image by the device manufacturer.",
                              "**playOrSystemApps**: Required. App access risk verdict related to apps that are not installed by the Google Play Store, and are not preloaded on the system image by the device manufacturer."
                            ]
                          }
                        ],
                        "**playProtectVerdict**: The evaluation of Play Protect verdict."
                      ]
                    }
                  ],
                  [
                    "**requestDetails**: Contains the integrity request information.",
                    {
                      "$ul": [
                        "**nonce**: Nonce that was provided in the request (which is base64 web-safe no-wrap).",
                        "**requestHash**: Request hash that was provided in the request.",
                        "**requestPackageName**: Required. Application package name this attestation was requested for. Note: This field makes no guarantees or promises on the caller integrity. For details on application integrity, check application_integrity.",
                        "**timestampMillis**: Required. Timestamp, in milliseconds, of the integrity application request."
                      ]
                    }
                  ],
                  [
                    "**testingDetails**: Contains additional information generated for testing responses.",
                    {
                      "$ul": [
                        "**isTestingResponse**: Required. Indicates that the information contained in this payload is a testing response that is statically overridden for a tester."
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
