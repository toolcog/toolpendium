{
  "name": "pubsub_topics_publishBatch",
  "description": "Adds one or more messages to the topic. Returns NOT_FOUND if the topic does not exist.",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/PublishBatchRequest"
      }
    },
    "$defs": {
      "PublishBatchRequest": {
        "description": "Request for the PublishBatch method.",
        "properties": {
          "messages": {
            "description": "The messages to publish.",
            "items": {
              "$ref": "#/$defs/PubsubMessage"
            },
            "type": "array"
          },
          "topic": {
            "description": "The messages in the request will be published on this topic.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PubsubMessage": {
        "description": "A message data and its labels.",
        "properties": {
          "data": {
            "description": "The message payload.",
            "format": "byte",
            "type": "string"
          },
          "label": {
            "description": "Optional list of labels for this message. Keys in this collection must be unique.",
            "items": {
              "$ref": "#/$defs/Label"
            },
            "type": "array"
          },
          "messageId": {
            "description": "ID of this message assigned by the server at publication time. Guaranteed to be unique within the topic. This value may be read by a subscriber that receives a PubsubMessage via a Pull call or a push delivery. It must not be populated by a publisher in a Publish call.",
            "type": "string"
          },
          "publishTime": {
            "description": "The time at which the message was published. The time is milliseconds since the UNIX epoch.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Label": {
        "description": "A key-value pair applied to a given object.",
        "properties": {
          "key": {
            "description": "The key of a label is a syntactically valid URL (as per RFC 1738) with the \"scheme\" and initial slashes omitted and with the additional restrictions noted below. Each key should be globally unique. The \"host\" portion is called the \"namespace\" and is not necessarily resolvable to a network endpoint. Instead, the namespace indicates what system or entity defines the semantics of the label. Namespaces do not restrict the set of objects to which a label may be associated. Keys are defined by the following grammar: key = hostname \"/\" kpath kpath = ksegment *[ \"/\" ksegment ] ksegment = alphadigit | *[ alphadigit | \"-\" | \"_\" | \".\" ] where \"hostname\" and \"alphadigit\" are defined as in RFC 1738. Example key: spanner.google.com/universe",
            "type": "string"
          },
          "numValue": {
            "description": "An integer value.",
            "format": "int64",
            "type": "string"
          },
          "strValue": {
            "description": "A string value.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://pubsub.googleapis.com//v1beta1a/topics/publishBatch{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response for the PublishBatch method.",
        "**Key properties:**",
        {
          "$ul": [
            "**messageIds**: The server-assigned ID of each published message, in the same order as the messages in the request. IDs are guaranteed to be unique within the topic."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
