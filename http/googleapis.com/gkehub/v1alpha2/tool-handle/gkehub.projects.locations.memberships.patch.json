{
  "name": "gkehub_projects_locations_memberships_patch",
  "description": "Updates an existing Membership.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The Membership resource name in the format `projects/*/locations/*/memberships/*`."
      },
      "updateMask": {
        "type": "string",
        "description": "Required. Mask of fields to update."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Membership"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "Membership": {
        "description": "Membership contains information about a member cluster.",
        "properties": {
          "authority": {
            "$ref": "#/$defs/Authority"
          },
          "createTime": {
            "description": "Output only. When the Membership was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "deleteTime": {
            "description": "Output only. When the Membership was deleted.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Output only. Description of this membership, limited to 63 characters. Must match the regex: `a-zA-Z0-9*` This field is present for legacy purposes.",
            "readOnly": true,
            "type": "string"
          },
          "endpoint": {
            "$ref": "#/$defs/MembershipEndpoint"
          },
          "externalId": {
            "description": "Optional. An externally-generated and managed ID for this Membership. This ID may be modified after creation, but this is not recommended. For GKE clusters, external_id is managed by the Hub API and updates will be ignored. The ID must match the regex: `a-zA-Z0-9*` If this Membership represents a Kubernetes cluster, this value should be set to the UID of the `kube-system` namespace object.",
            "type": "string"
          },
          "infrastructureType": {
            "description": "Optional. The infrastructure type this Membership is running on.",
            "enum": [
              "INFRASTRUCTURE_TYPE_UNSPECIFIED",
              "ON_PREM",
              "MULTI_CLOUD"
            ],
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Labels for this membership.",
            "type": "object"
          },
          "lastConnectionTime": {
            "description": "Output only. For clusters using Connect, the timestamp of the most recent connection established with Google Cloud. This time is updated every several minutes, not continuously. For clusters that do not use GKE Connect, or that have never connected successfully, this field will be unset.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "monitoringConfig": {
            "$ref": "#/$defs/MonitoringConfig"
          },
          "name": {
            "description": "Output only. The full, unique name of this Membership resource in the format `projects/*/locations/*/memberships/{membership_id}`, set during creation. `membership_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "$ref": "#/$defs/MembershipState"
          },
          "uniqueId": {
            "description": "Output only. Google-generated UUID for this resource. This is unique across all Membership resources. If a Membership resource is deleted and another resource with the same name is created, it gets a different unique_id.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. When the Membership was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Authority": {
        "description": "Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity",
        "properties": {
          "identityProvider": {
            "description": "Output only. An identity provider that reflects the `issuer` in the workload identity pool.",
            "readOnly": true,
            "type": "string"
          },
          "issuer": {
            "description": "Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer, unless `oidc_jwks` is set. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).",
            "type": "string"
          },
          "oidcJwks": {
            "description": "Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.",
            "format": "byte",
            "type": "string"
          },
          "workloadIdentityPool": {
            "description": "Output only. The name of the workload identity pool in which `issuer` will be recognized. There is a single Workload Identity Pool per Hub that is shared between all Memberships that belong to that Hub. For a Hub hosted in {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`, although this is subject to change in newer versions of this API.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MembershipEndpoint": {
        "description": "MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.",
        "properties": {
          "applianceCluster": {
            "$ref": "#/$defs/ApplianceCluster"
          },
          "edgeCluster": {
            "$ref": "#/$defs/EdgeCluster"
          },
          "gkeCluster": {
            "$ref": "#/$defs/GkeCluster"
          },
          "kubernetesMetadata": {
            "$ref": "#/$defs/KubernetesMetadata"
          },
          "kubernetesResource": {
            "$ref": "#/$defs/KubernetesResource"
          },
          "multiCloudCluster": {
            "$ref": "#/$defs/MultiCloudCluster"
          },
          "onPremCluster": {
            "$ref": "#/$defs/OnPremCluster"
          }
        },
        "type": "object"
      },
      "ApplianceCluster": {
        "description": "ApplianceCluster contains information specific to GDC Edge Appliance Clusters.",
        "properties": {
          "resourceLink": {
            "description": "Immutable. Self-link of the Google Cloud resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EdgeCluster": {
        "description": "EdgeCluster contains information specific to Google Edge Clusters.",
        "properties": {
          "resourceLink": {
            "description": "Immutable. Self-link of the Google Cloud resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GkeCluster": {
        "description": "GkeCluster contains information specific to GKE clusters.",
        "properties": {
          "clusterMissing": {
            "description": "Output only. If cluster_missing is set then it denotes that the GKE cluster no longer exists in the GKE Control Plane.",
            "readOnly": true,
            "type": "boolean"
          },
          "resourceLink": {
            "description": "Immutable. Self-link of the Google Cloud resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KubernetesMetadata": {
        "description": "KubernetesMetadata provides informational metadata for Memberships that are created from Kubernetes Endpoints (currently, these are equivalent to Kubernetes clusters).",
        "properties": {
          "kubernetesApiServerVersion": {
            "description": "Output only. Kubernetes API server version string as reported by '/version'.",
            "readOnly": true,
            "type": "string"
          },
          "memoryMb": {
            "description": "Output only. The total memory capacity as reported by the sum of all Kubernetes nodes resources, defined in MB.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "nodeCount": {
            "description": "Output only. Node count as reported by Kubernetes nodes resources.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "nodeProviderId": {
            "description": "Output only. Node providerID as reported by the first node in the list of nodes on the Kubernetes endpoint. On Kubernetes platforms that support zero-node clusters (like GKE-on-GCP), the node_count will be zero and the node_provider_id will be empty.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time at which these details were last updated. This update_time is different from the Membership-level update_time since EndpointDetails are updated internally for API consumers.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "vcpuCount": {
            "description": "Output only. vCPU count as reported by Kubernetes nodes resources.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "KubernetesResource": {
        "description": "KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.",
        "properties": {
          "connectResources": {
            "description": "Output only. The Kubernetes resources for installing the GKE Connect agent. This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.",
            "items": {
              "$ref": "#/$defs/ResourceManifest"
            },
            "readOnly": true,
            "type": "array"
          },
          "membershipCrManifest": {
            "description": "Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during Create or Update, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.",
            "type": "string"
          },
          "membershipResources": {
            "description": "Output only. Additional Kubernetes resources that need to be applied to the cluster after Membership creation, and after every update. This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.",
            "items": {
              "$ref": "#/$defs/ResourceManifest"
            },
            "readOnly": true,
            "type": "array"
          },
          "resourceOptions": {
            "$ref": "#/$defs/ResourceOptions"
          }
        },
        "type": "object"
      },
      "ResourceManifest": {
        "description": "ResourceManifest represents a single Kubernetes resource to be applied to the cluster.",
        "properties": {
          "clusterScoped": {
            "description": "Whether the resource provided in the manifest is `cluster_scoped`. If unset, the manifest is assumed to be namespace scoped. This field is used for REST mapping when applying the resource in a cluster.",
            "type": "boolean"
          },
          "manifest": {
            "description": "YAML manifest of the resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceOptions": {
        "description": "ResourceOptions represent options for Kubernetes resource generation.",
        "properties": {
          "connectVersion": {
            "description": "Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.",
            "type": "string"
          },
          "k8sVersion": {
            "description": "Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.",
            "type": "string"
          },
          "v1beta1Crd": {
            "description": "Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MultiCloudCluster": {
        "description": "MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.",
        "properties": {
          "clusterMissing": {
            "description": "Output only. If cluster_missing is set then it denotes that API(gkemulticloud.googleapis.com) resource for this GKE Multi-Cloud cluster no longer exists.",
            "readOnly": true,
            "type": "boolean"
          },
          "resourceLink": {
            "description": "Immutable. Self-link of the Google Cloud resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OnPremCluster": {
        "description": "OnPremCluster contains information specific to GKE On-Prem clusters.",
        "properties": {
          "adminCluster": {
            "description": "Immutable. Whether the cluster is an admin cluster.",
            "type": "boolean"
          },
          "clusterMissing": {
            "description": "Output only. If cluster_missing is set then it denotes that API(gkeonprem.googleapis.com) resource for this GKE On-Prem cluster no longer exists.",
            "readOnly": true,
            "type": "boolean"
          },
          "clusterType": {
            "description": "Immutable. The on prem cluster's type.",
            "enum": [
              "CLUSTERTYPE_UNSPECIFIED",
              "BOOTSTRAP",
              "HYBRID",
              "STANDALONE",
              "USER"
            ],
            "type": "string"
          },
          "resourceLink": {
            "description": "Immutable. Self-link of the Google Cloud resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MonitoringConfig": {
        "description": "MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can't be mutated directly to prevent accidentally breaking the constinousty of metrics.",
        "properties": {
          "cluster": {
            "description": "Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., \"awsClusters/cluster_1\".",
            "type": "string"
          },
          "clusterHash": {
            "description": "Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.",
            "type": "string"
          },
          "kubernetesMetricsPrefix": {
            "description": "Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.",
            "type": "string"
          },
          "location": {
            "description": "Optional. Location used to report Metrics",
            "type": "string"
          },
          "projectId": {
            "description": "Optional. Project used to report Metrics",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MembershipState": {
        "description": "MembershipState describes the state of a Membership resource.",
        "properties": {
          "code": {
            "description": "Output only. The current state of the Membership resource.",
            "enum": [
              "CODE_UNSPECIFIED",
              "CREATING",
              "READY",
              "DELETING",
              "UPDATING",
              "SERVICE_UPDATING"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://gkehub.googleapis.com//v1alpha2/{name}{?updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
