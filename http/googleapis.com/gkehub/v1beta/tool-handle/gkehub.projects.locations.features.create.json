{
  "name": "gkehub_projects_locations_features_create",
  "description": "Adds a new Feature.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent (project and location) where the Feature will be created. Specified in the format `projects/*/locations/*`."
      },
      "featureId": {
        "type": "string",
        "description": "The ID of the feature to create."
      },
      "requestId": {
        "type": "string",
        "description": "A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Feature"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Feature": {
        "description": "Feature represents the settings and status of any Hub Feature.",
        "properties": {
          "createTime": {
            "description": "Output only. When the Feature resource was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "deleteTime": {
            "description": "Output only. When the Feature resource was deleted.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "fleetDefaultMemberConfig": {
            "$ref": "#/$defs/CommonFleetDefaultMemberConfigSpec"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels for this Feature.",
            "type": "object"
          },
          "membershipSpecs": {
            "additionalProperties": {
              "$ref": "#/$defs/MembershipFeatureSpec"
            },
            "description": "Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.",
            "type": "object"
          },
          "membershipStates": {
            "additionalProperties": {
              "$ref": "#/$defs/MembershipFeatureState"
            },
            "description": "Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.",
            "readOnly": true,
            "type": "object"
          },
          "name": {
            "description": "Output only. The full, unique name of this Feature resource in the format `projects/*/locations/*/features/*`.",
            "readOnly": true,
            "type": "string"
          },
          "resourceState": {
            "$ref": "#/$defs/FeatureResourceState"
          },
          "scopeSpecs": {
            "additionalProperties": {
              "$ref": "#/$defs/ScopeFeatureSpec"
            },
            "description": "Optional. Scope-specific configuration for this Feature. If this Feature does not support any per-Scope configuration, this field may be unused. The keys indicate which Scope the configuration is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Scope is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.",
            "type": "object"
          },
          "scopeStates": {
            "additionalProperties": {
              "$ref": "#/$defs/ScopeFeatureState"
            },
            "description": "Output only. Scope-specific Feature status. If this Feature does report any per-Scope status, this field may be unused. The keys indicate which Scope the state is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project.",
            "readOnly": true,
            "type": "object"
          },
          "spec": {
            "$ref": "#/$defs/CommonFeatureSpec"
          },
          "state": {
            "$ref": "#/$defs/CommonFeatureState"
          },
          "updateTime": {
            "description": "Output only. When the Feature resource was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommonFleetDefaultMemberConfigSpec": {
        "description": "CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet",
        "properties": {
          "configmanagement": {
            "$ref": "#/$defs/ConfigManagementMembershipSpec"
          },
          "identityservice": {
            "$ref": "#/$defs/IdentityServiceMembershipSpec"
          },
          "mesh": {
            "$ref": "#/$defs/ServiceMeshMembershipSpec"
          },
          "policycontroller": {
            "$ref": "#/$defs/PolicyControllerMembershipSpec"
          }
        },
        "type": "object"
      },
      "ConfigManagementMembershipSpec": {
        "description": "**Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.",
        "properties": {
          "binauthz": {
            "$ref": "#/$defs/ConfigManagementBinauthzConfig"
          },
          "cluster": {
            "description": "The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.",
            "type": "string"
          },
          "configSync": {
            "$ref": "#/$defs/ConfigManagementConfigSync"
          },
          "hierarchyController": {
            "$ref": "#/$defs/ConfigManagementHierarchyControllerConfig"
          },
          "management": {
            "description": "Enables automatic Feature management.",
            "enum": [
              "MANAGEMENT_UNSPECIFIED",
              "MANAGEMENT_AUTOMATIC",
              "MANAGEMENT_MANUAL"
            ],
            "type": "string"
          },
          "policyController": {
            "$ref": "#/$defs/ConfigManagementPolicyController"
          },
          "version": {
            "description": "Version of ACM installed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementBinauthzConfig": {
        "description": "Configuration for Binauthz",
        "properties": {
          "enabled": {
            "description": "Whether binauthz is enabled in this cluster.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigManagementConfigSync": {
        "description": "Configuration for Config Sync",
        "properties": {
          "allowVerticalScale": {
            "deprecated": true,
            "description": "Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.",
            "type": "boolean"
          },
          "enabled": {
            "description": "Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.",
            "type": "boolean"
          },
          "git": {
            "$ref": "#/$defs/ConfigManagementGitConfig"
          },
          "metricsGcpServiceAccountEmail": {
            "description": "The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA.",
            "type": "string"
          },
          "oci": {
            "$ref": "#/$defs/ConfigManagementOciConfig"
          },
          "preventDrift": {
            "description": "Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.",
            "type": "boolean"
          },
          "sourceFormat": {
            "description": "Specifies whether the Config Sync Repo is in \"hierarchical\" or \"unstructured\" mode.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementGitConfig": {
        "description": "Git repo configuration for a single cluster.",
        "properties": {
          "gcpServiceAccountEmail": {
            "description": "The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.",
            "type": "string"
          },
          "httpsProxy": {
            "description": "URL for the HTTPS proxy to be used when communicating with the Git repo.",
            "type": "string"
          },
          "policyDir": {
            "description": "The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.",
            "type": "string"
          },
          "secretType": {
            "description": "Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.",
            "type": "string"
          },
          "syncBranch": {
            "description": "The branch of the repository to sync from. Default: master.",
            "type": "string"
          },
          "syncRepo": {
            "description": "The URL of the Git repository to use as the source of truth.",
            "type": "string"
          },
          "syncRev": {
            "description": "Git revision (tag or hash) to check out. Default HEAD.",
            "type": "string"
          },
          "syncWaitSecs": {
            "description": "Period in seconds between consecutive syncs. Default: 15.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementOciConfig": {
        "description": "OCI repo configuration for a single cluster",
        "properties": {
          "gcpServiceAccountEmail": {
            "description": "The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.",
            "type": "string"
          },
          "policyDir": {
            "description": "The absolute path of the directory that contains the local resources. Default: the root directory of the image.",
            "type": "string"
          },
          "secretType": {
            "description": "Type of secret configured for access to the Git repo.",
            "type": "string"
          },
          "syncRepo": {
            "description": "The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.",
            "type": "string"
          },
          "syncWaitSecs": {
            "description": "Period in seconds between consecutive syncs. Default: 15.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementHierarchyControllerConfig": {
        "description": "Configuration for Hierarchy Controller",
        "properties": {
          "enableHierarchicalResourceQuota": {
            "description": "Whether hierarchical resource quota is enabled in this cluster.",
            "type": "boolean"
          },
          "enablePodTreeLabels": {
            "description": "Whether pod tree labels are enabled in this cluster.",
            "type": "boolean"
          },
          "enabled": {
            "description": "Whether Hierarchy Controller is enabled in this cluster.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigManagementPolicyController": {
        "description": "Configuration for Policy Controller",
        "properties": {
          "auditIntervalSeconds": {
            "description": "Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.",
            "format": "int64",
            "type": "string"
          },
          "enabled": {
            "description": "Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.",
            "type": "boolean"
          },
          "exemptableNamespaces": {
            "description": "The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "logDeniesEnabled": {
            "description": "Logs all denies and dry run failures.",
            "type": "boolean"
          },
          "monitoring": {
            "$ref": "#/$defs/ConfigManagementPolicyControllerMonitoring"
          },
          "mutationEnabled": {
            "description": "Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.",
            "type": "boolean"
          },
          "referentialRulesEnabled": {
            "description": "Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.",
            "type": "boolean"
          },
          "templateLibraryInstalled": {
            "description": "Installs the default template library along with Policy Controller.",
            "type": "boolean"
          },
          "updateTime": {
            "description": "Output only. Last time this membership spec was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementPolicyControllerMonitoring": {
        "description": "PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: [\"cloudmonitoring\", \"prometheus\"]",
        "properties": {
          "backends": {
            "description": "Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.",
            "items": {
              "enum": [
                "MONITORING_BACKEND_UNSPECIFIED",
                "PROMETHEUS",
                "CLOUD_MONITORING"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IdentityServiceMembershipSpec": {
        "description": "**Anthos Identity Service**: Configuration for a single Membership.",
        "properties": {
          "authMethods": {
            "description": "A member may support multiple auth methods.",
            "items": {
              "$ref": "#/$defs/IdentityServiceAuthMethod"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IdentityServiceAuthMethod": {
        "description": "Configuration of an auth method for a member/cluster. Only one authentication method (e.g., OIDC and LDAP) can be set per AuthMethod.",
        "properties": {
          "azureadConfig": {
            "$ref": "#/$defs/IdentityServiceAzureADConfig"
          },
          "googleConfig": {
            "$ref": "#/$defs/IdentityServiceGoogleConfig"
          },
          "name": {
            "description": "Identifier for auth config.",
            "type": "string"
          },
          "oidcConfig": {
            "$ref": "#/$defs/IdentityServiceOidcConfig"
          },
          "proxy": {
            "description": "Proxy server address to use for auth method.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IdentityServiceAzureADConfig": {
        "description": "Configuration for the AzureAD Auth flow.",
        "properties": {
          "clientId": {
            "description": "ID for the registered client application that makes authentication requests to the Azure AD identity provider.",
            "type": "string"
          },
          "clientSecret": {
            "description": "Input only. Unencrypted AzureAD client secret will be passed to the GKE Hub CLH.",
            "type": "string"
          },
          "encryptedClientSecret": {
            "description": "Output only. Encrypted AzureAD client secret.",
            "format": "byte",
            "readOnly": true,
            "type": "string"
          },
          "kubectlRedirectUri": {
            "description": "The redirect URL that kubectl uses for authorization.",
            "type": "string"
          },
          "tenant": {
            "description": "Kind of Azure AD account to be authenticated. Supported values are or for accounts belonging to a specific tenant.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IdentityServiceGoogleConfig": {
        "description": "Configuration for the Google Plugin Auth flow.",
        "properties": {
          "disable": {
            "description": "Disable automatic configuration of Google Plugin on supported platforms.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "IdentityServiceOidcConfig": {
        "description": "Configuration for OIDC Auth flow.",
        "properties": {
          "certificateAuthorityData": {
            "description": "PEM-encoded CA for OIDC provider.",
            "type": "string"
          },
          "clientId": {
            "description": "ID for OIDC client application.",
            "type": "string"
          },
          "clientSecret": {
            "description": "Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.",
            "type": "string"
          },
          "deployCloudConsoleProxy": {
            "description": "Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.",
            "type": "boolean"
          },
          "enableAccessToken": {
            "description": "Enable access token.",
            "type": "boolean"
          },
          "encryptedClientSecret": {
            "description": "Output only. Encrypted OIDC Client secret",
            "format": "byte",
            "readOnly": true,
            "type": "string"
          },
          "extraParams": {
            "description": "Comma-separated list of key-value pairs.",
            "type": "string"
          },
          "groupPrefix": {
            "description": "Prefix to prepend to group name.",
            "type": "string"
          },
          "groupsClaim": {
            "description": "Claim in OIDC ID token that holds group information.",
            "type": "string"
          },
          "issuerUri": {
            "description": "URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.",
            "type": "string"
          },
          "kubectlRedirectUri": {
            "description": "Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.",
            "type": "string"
          },
          "scopes": {
            "description": "Comma-separated list of identifiers.",
            "type": "string"
          },
          "userClaim": {
            "description": "Claim in OIDC ID token that holds username.",
            "type": "string"
          },
          "userPrefix": {
            "description": "Prefix to prepend to user name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceMeshMembershipSpec": {
        "description": "**Service Mesh**: Spec for a single Membership for the servicemesh feature",
        "properties": {
          "controlPlane": {
            "deprecated": true,
            "description": "Deprecated: use `management` instead Enables automatic control plane management.",
            "enum": [
              "CONTROL_PLANE_MANAGEMENT_UNSPECIFIED",
              "AUTOMATIC",
              "MANUAL"
            ],
            "type": "string"
          },
          "management": {
            "description": "Enables automatic Service Mesh management.",
            "enum": [
              "MANAGEMENT_UNSPECIFIED",
              "MANAGEMENT_AUTOMATIC",
              "MANAGEMENT_MANUAL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PolicyControllerMembershipSpec": {
        "description": "**Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR.",
        "properties": {
          "policyControllerHubConfig": {
            "$ref": "#/$defs/PolicyControllerHubConfig"
          },
          "version": {
            "description": "Version of Policy Controller installed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PolicyControllerHubConfig": {
        "description": "Configuration for Policy Controller",
        "properties": {
          "auditIntervalSeconds": {
            "description": "Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.",
            "format": "int64",
            "type": "string"
          },
          "constraintViolationLimit": {
            "description": "The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.",
            "format": "int64",
            "type": "string"
          },
          "deploymentConfigs": {
            "additionalProperties": {
              "$ref": "#/$defs/PolicyControllerPolicyControllerDeploymentConfig"
            },
            "description": "Map of deployment configs to deployments (\"admission\", \"audit\", \"mutation').",
            "type": "object"
          },
          "exemptableNamespaces": {
            "description": "The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "installSpec": {
            "description": "The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.",
            "enum": [
              "INSTALL_SPEC_UNSPECIFIED",
              "INSTALL_SPEC_NOT_INSTALLED",
              "INSTALL_SPEC_ENABLED",
              "INSTALL_SPEC_SUSPENDED",
              "INSTALL_SPEC_DETACHED"
            ],
            "type": "string"
          },
          "logDeniesEnabled": {
            "description": "Logs all denies and dry run failures.",
            "type": "boolean"
          },
          "monitoring": {
            "$ref": "#/$defs/PolicyControllerMonitoringConfig"
          },
          "mutationEnabled": {
            "description": "Enables the ability to mutate resources using Policy Controller.",
            "type": "boolean"
          },
          "policyContent": {
            "$ref": "#/$defs/PolicyControllerPolicyContentSpec"
          },
          "referentialRulesEnabled": {
            "description": "Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PolicyControllerPolicyControllerDeploymentConfig": {
        "description": "Deployment-specific configuration.",
        "properties": {
          "containerResources": {
            "$ref": "#/$defs/PolicyControllerResourceRequirements"
          },
          "podAffinity": {
            "description": "Pod affinity configuration.",
            "enum": [
              "AFFINITY_UNSPECIFIED",
              "NO_AFFINITY",
              "ANTI_AFFINITY"
            ],
            "type": "string"
          },
          "podAntiAffinity": {
            "deprecated": true,
            "description": "Pod anti-affinity enablement. Deprecated: use `pod_affinity` instead.",
            "type": "boolean"
          },
          "podTolerations": {
            "description": "Pod tolerations of node taints.",
            "items": {
              "$ref": "#/$defs/PolicyControllerToleration"
            },
            "type": "array"
          },
          "replicaCount": {
            "description": "Pod replica count.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PolicyControllerResourceRequirements": {
        "description": "ResourceRequirements describes the compute resource requirements.",
        "properties": {
          "limits": {
            "$ref": "#/$defs/PolicyControllerResourceList"
          },
          "requests": {
            "$ref": "#/$defs/PolicyControllerResourceList"
          }
        },
        "type": "object"
      },
      "PolicyControllerResourceList": {
        "description": "ResourceList contains container resource requirements.",
        "properties": {
          "cpu": {
            "description": "CPU requirement expressed in Kubernetes resource units.",
            "type": "string"
          },
          "memory": {
            "description": "Memory requirement expressed in Kubernetes resource units.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PolicyControllerToleration": {
        "description": "Toleration of a node taint.",
        "properties": {
          "effect": {
            "description": "Matches a taint effect.",
            "type": "string"
          },
          "key": {
            "description": "Matches a taint key (not necessarily unique).",
            "type": "string"
          },
          "operator": {
            "description": "Matches a taint operator.",
            "type": "string"
          },
          "value": {
            "description": "Matches a taint value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PolicyControllerMonitoringConfig": {
        "description": "MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: [\"cloudmonitoring\", \"prometheus\"]",
        "properties": {
          "backends": {
            "description": "Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.",
            "items": {
              "enum": [
                "MONITORING_BACKEND_UNSPECIFIED",
                "PROMETHEUS",
                "CLOUD_MONITORING"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PolicyControllerPolicyContentSpec": {
        "description": "PolicyContentSpec defines the user's desired content configuration on the cluster.",
        "properties": {
          "bundles": {
            "additionalProperties": {
              "$ref": "#/$defs/PolicyControllerBundleInstallSpec"
            },
            "description": "map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.",
            "type": "object"
          },
          "templateLibrary": {
            "$ref": "#/$defs/PolicyControllerTemplateLibraryConfig"
          }
        },
        "type": "object"
      },
      "PolicyControllerBundleInstallSpec": {
        "description": "BundleInstallSpec is the specification configuration for a single managed bundle.",
        "properties": {
          "exemptedNamespaces": {
            "description": "The set of namespaces to be exempted from the bundle.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PolicyControllerTemplateLibraryConfig": {
        "description": "The config specifying which default library templates to install.",
        "properties": {
          "installation": {
            "description": "Configures the manner in which the template library is installed on the cluster.",
            "enum": [
              "INSTALLATION_UNSPECIFIED",
              "NOT_INSTALLED",
              "ALL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MembershipFeatureSpec": {
        "description": "MembershipFeatureSpec contains configuration information for a single Membership. NOTE: Please use snake case in your feature name.",
        "properties": {
          "anthosobservability": {
            "$ref": "#/$defs/AnthosObservabilityMembershipSpec"
          },
          "cloudbuild": {
            "$ref": "#/$defs/MembershipSpec"
          },
          "configmanagement": {
            "$ref": "#/$defs/ConfigManagementMembershipSpec"
          },
          "fleetobservability": {
            "$ref": "#/$defs/FleetObservabilityMembershipSpec"
          },
          "identityservice": {
            "$ref": "#/$defs/IdentityServiceMembershipSpec"
          },
          "mesh": {
            "$ref": "#/$defs/ServiceMeshMembershipSpec"
          },
          "origin": {
            "$ref": "#/$defs/Origin"
          },
          "policycontroller": {
            "$ref": "#/$defs/PolicyControllerMembershipSpec"
          }
        },
        "type": "object"
      },
      "AnthosObservabilityMembershipSpec": {
        "description": "**Anthosobservability**: Per-Membership Feature spec.",
        "properties": {
          "doNotOptimizeMetrics": {
            "description": "Use full of metrics rather than optimized metrics. See https://cloud.google.com/anthos/clusters/docs/on-prem/1.8/concepts/logging-and-monitoring#optimized_metrics_default_metrics",
            "type": "boolean"
          },
          "enableStackdriverOnApplications": {
            "description": "Enable collecting and reporting metrics and logs from user apps.",
            "type": "boolean"
          },
          "version": {
            "description": "the version of stackdriver operator used by this feature",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MembershipSpec": {
        "description": "**Cloud Build**: Configurations for each Cloud Build enabled cluster.",
        "properties": {
          "securityPolicy": {
            "description": "Whether it is allowed to run the privileged builds on the cluster or not.",
            "enum": [
              "SECURITY_POLICY_UNSPECIFIED",
              "NON_PRIVILEGED",
              "PRIVILEGED"
            ],
            "type": "string"
          },
          "version": {
            "description": "Version of the cloud build software on the cluster.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FleetObservabilityMembershipSpec": {
        "description": "**FleetObservability**: The membership-specific input for FleetObservability feature.",
        "properties": {},
        "type": "object"
      },
      "Origin": {
        "description": "Origin defines where this MembershipFeatureSpec originated from.",
        "properties": {
          "type": {
            "description": "Type specifies which type of origin is set.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "FLEET",
              "FLEET_OUT_OF_SYNC",
              "USER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MembershipFeatureState": {
        "description": "MembershipFeatureState contains Feature status information for a single Membership.",
        "properties": {
          "appdevexperience": {
            "$ref": "#/$defs/AppDevExperienceFeatureState"
          },
          "clusterupgrade": {
            "$ref": "#/$defs/ClusterUpgradeMembershipState"
          },
          "configmanagement": {
            "$ref": "#/$defs/ConfigManagementMembershipState"
          },
          "fleetobservability": {
            "$ref": "#/$defs/FleetObservabilityMembershipState"
          },
          "identityservice": {
            "$ref": "#/$defs/IdentityServiceMembershipState"
          },
          "metering": {
            "$ref": "#/$defs/MeteringMembershipState"
          },
          "policycontroller": {
            "$ref": "#/$defs/PolicyControllerMembershipState"
          },
          "servicemesh": {
            "$ref": "#/$defs/ServiceMeshMembershipState"
          },
          "state": {
            "$ref": "#/$defs/FeatureState"
          }
        },
        "type": "object"
      },
      "AppDevExperienceFeatureState": {
        "description": "State for App Dev Exp Feature.",
        "properties": {
          "networkingInstallSucceeded": {
            "$ref": "#/$defs/Status"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "Status specifies state for the subcomponent.",
        "properties": {
          "code": {
            "description": "Code specifies AppDevExperienceFeature's subcomponent ready state.",
            "enum": [
              "CODE_UNSPECIFIED",
              "OK",
              "FAILED",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "description": {
            "description": "Description is populated if Code is Failed, explaining why it has failed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClusterUpgradeMembershipState": {
        "description": "Per-membership state for this feature.",
        "properties": {
          "ignored": {
            "$ref": "#/$defs/ClusterUpgradeIgnoredMembership"
          },
          "upgrades": {
            "description": "Actual upgrade state against desired.",
            "items": {
              "$ref": "#/$defs/ClusterUpgradeMembershipGKEUpgradeState"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ClusterUpgradeIgnoredMembership": {
        "description": "IgnoredMembership represents a membership ignored by the feature. A membership can be ignored because it was manually upgraded to a newer version than RC default.",
        "properties": {
          "ignoredTime": {
            "description": "Time when the membership was first set to ignored.",
            "format": "google-datetime",
            "type": "string"
          },
          "reason": {
            "description": "Reason why the membership is ignored.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClusterUpgradeMembershipGKEUpgradeState": {
        "description": "ScopeGKEUpgradeState is a GKEUpgrade and its state per-membership.",
        "properties": {
          "status": {
            "$ref": "#/$defs/ClusterUpgradeUpgradeStatus"
          },
          "upgrade": {
            "$ref": "#/$defs/ClusterUpgradeGKEUpgrade"
          }
        },
        "type": "object"
      },
      "ClusterUpgradeUpgradeStatus": {
        "description": "UpgradeStatus provides status information for each upgrade.",
        "properties": {
          "code": {
            "description": "Status code of the upgrade.",
            "enum": [
              "CODE_UNSPECIFIED",
              "INELIGIBLE",
              "PENDING",
              "IN_PROGRESS",
              "SOAKING",
              "FORCED_SOAKING",
              "COMPLETE"
            ],
            "type": "string"
          },
          "reason": {
            "description": "Reason for this status.",
            "type": "string"
          },
          "updateTime": {
            "description": "Last timestamp the status was updated.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClusterUpgradeGKEUpgrade": {
        "description": "GKEUpgrade represents a GKE provided upgrade, e.g., control plane upgrade.",
        "properties": {
          "name": {
            "description": "Name of the upgrade, e.g., \"k8s_control_plane\". It should be a valid upgrade name. It must not exceet 99 characters.",
            "type": "string"
          },
          "version": {
            "description": "Version of the upgrade, e.g., \"1.22.1-gke.100\". It should be a valid version. It must not exceet 99 characters.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementMembershipState": {
        "description": "**Anthos Config Management**: State for a single cluster.",
        "properties": {
          "binauthzState": {
            "$ref": "#/$defs/ConfigManagementBinauthzState"
          },
          "clusterName": {
            "description": "This field is set to the `cluster_name` field of the Membership Spec if it is not empty. Otherwise, it is set to the cluster's fleet membership name.",
            "type": "string"
          },
          "configSyncState": {
            "$ref": "#/$defs/ConfigManagementConfigSyncState"
          },
          "hierarchyControllerState": {
            "$ref": "#/$defs/ConfigManagementHierarchyControllerState"
          },
          "membershipSpec": {
            "$ref": "#/$defs/ConfigManagementMembershipSpec"
          },
          "operatorState": {
            "$ref": "#/$defs/ConfigManagementOperatorState"
          },
          "policyControllerState": {
            "$ref": "#/$defs/ConfigManagementPolicyControllerState"
          }
        },
        "type": "object"
      },
      "ConfigManagementBinauthzState": {
        "description": "State for Binauthz",
        "properties": {
          "version": {
            "$ref": "#/$defs/ConfigManagementBinauthzVersion"
          },
          "webhook": {
            "description": "The state of the binauthz webhook.",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementBinauthzVersion": {
        "description": "The version of binauthz.",
        "properties": {
          "webhookVersion": {
            "description": "The version of the binauthz webhook.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementConfigSyncState": {
        "description": "State information for ConfigSync",
        "properties": {
          "deploymentState": {
            "$ref": "#/$defs/ConfigManagementConfigSyncDeploymentState"
          },
          "errors": {
            "description": "Errors pertaining to the installation of Config Sync.",
            "items": {
              "$ref": "#/$defs/ConfigManagementConfigSyncError"
            },
            "type": "array"
          },
          "reposyncCrd": {
            "description": "The state of the Reposync CRD",
            "enum": [
              "CRD_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "TERMINATING",
              "INSTALLING"
            ],
            "type": "string"
          },
          "rootsyncCrd": {
            "description": "The state of the RootSync CRD",
            "enum": [
              "CRD_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "TERMINATING",
              "INSTALLING"
            ],
            "type": "string"
          },
          "state": {
            "description": "The state of CS This field summarizes the other fields in this message.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CONFIG_SYNC_NOT_INSTALLED",
              "CONFIG_SYNC_INSTALLED",
              "CONFIG_SYNC_ERROR",
              "CONFIG_SYNC_PENDING"
            ],
            "type": "string"
          },
          "syncState": {
            "$ref": "#/$defs/ConfigManagementSyncState"
          },
          "version": {
            "$ref": "#/$defs/ConfigManagementConfigSyncVersion"
          }
        },
        "type": "object"
      },
      "ConfigManagementConfigSyncDeploymentState": {
        "description": "The state of ConfigSync's deployment on a cluster",
        "properties": {
          "admissionWebhook": {
            "description": "Deployment state of admission-webhook",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          },
          "gitSync": {
            "description": "Deployment state of the git-sync pod",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          },
          "importer": {
            "description": "Deployment state of the importer pod",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          },
          "monitor": {
            "description": "Deployment state of the monitor pod",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          },
          "reconcilerManager": {
            "description": "Deployment state of reconciler-manager pod",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          },
          "rootReconciler": {
            "description": "Deployment state of root-reconciler",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          },
          "syncer": {
            "description": "Deployment state of the syncer pod",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementConfigSyncError": {
        "description": "Errors pertaining to the installation of Config Sync",
        "properties": {
          "errorMessage": {
            "description": "A string representing the user facing error message",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementSyncState": {
        "description": "State indicating an ACM's progress syncing configurations to a cluster",
        "properties": {
          "code": {
            "description": "Sync status code",
            "enum": [
              "SYNC_CODE_UNSPECIFIED",
              "SYNCED",
              "PENDING",
              "ERROR",
              "NOT_CONFIGURED",
              "NOT_INSTALLED",
              "UNAUTHORIZED",
              "UNREACHABLE"
            ],
            "type": "string"
          },
          "errors": {
            "description": "A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.",
            "items": {
              "$ref": "#/$defs/ConfigManagementSyncError"
            },
            "type": "array"
          },
          "importToken": {
            "description": "Token indicating the state of the importer.",
            "type": "string"
          },
          "lastSync": {
            "deprecated": true,
            "description": "Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String",
            "type": "string"
          },
          "lastSyncTime": {
            "description": "Timestamp type of when ACM last successfully synced the repo",
            "format": "google-datetime",
            "type": "string"
          },
          "sourceToken": {
            "description": "Token indicating the state of the repo.",
            "type": "string"
          },
          "syncToken": {
            "description": "Token indicating the state of the syncer.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementSyncError": {
        "description": "An ACM created error representing a problem syncing configurations",
        "properties": {
          "code": {
            "description": "An ACM defined error code",
            "type": "string"
          },
          "errorMessage": {
            "description": "A description of the error",
            "type": "string"
          },
          "errorResources": {
            "description": "A list of config(s) associated with the error, if any",
            "items": {
              "$ref": "#/$defs/ConfigManagementErrorResource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ConfigManagementErrorResource": {
        "description": "Model for a config file in the git repo with an associated Sync error",
        "properties": {
          "resourceGvk": {
            "$ref": "#/$defs/ConfigManagementGroupVersionKind"
          },
          "resourceName": {
            "description": "Metadata name of the resource that is causing an error",
            "type": "string"
          },
          "resourceNamespace": {
            "description": "Namespace of the resource that is causing an error",
            "type": "string"
          },
          "sourcePath": {
            "description": "Path in the git repo of the erroneous config",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementGroupVersionKind": {
        "description": "A Kubernetes object's GVK",
        "properties": {
          "group": {
            "description": "Kubernetes Group",
            "type": "string"
          },
          "kind": {
            "description": "Kubernetes Kind",
            "type": "string"
          },
          "version": {
            "description": "Kubernetes Version",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementConfigSyncVersion": {
        "description": "Specific versioning information pertaining to ConfigSync's Pods",
        "properties": {
          "admissionWebhook": {
            "description": "Version of the deployed admission_webhook pod",
            "type": "string"
          },
          "gitSync": {
            "description": "Version of the deployed git-sync pod",
            "type": "string"
          },
          "importer": {
            "description": "Version of the deployed importer pod",
            "type": "string"
          },
          "monitor": {
            "description": "Version of the deployed monitor pod",
            "type": "string"
          },
          "reconcilerManager": {
            "description": "Version of the deployed reconciler-manager pod",
            "type": "string"
          },
          "rootReconciler": {
            "description": "Version of the deployed reconciler container in root-reconciler pod",
            "type": "string"
          },
          "syncer": {
            "description": "Version of the deployed syncer pod",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementHierarchyControllerState": {
        "description": "State for Hierarchy Controller",
        "properties": {
          "state": {
            "$ref": "#/$defs/ConfigManagementHierarchyControllerDeploymentState"
          },
          "version": {
            "$ref": "#/$defs/ConfigManagementHierarchyControllerVersion"
          }
        },
        "type": "object"
      },
      "ConfigManagementHierarchyControllerDeploymentState": {
        "description": "Deployment state for Hierarchy Controller",
        "properties": {
          "extension": {
            "description": "The deployment state for Hierarchy Controller extension (e.g. v0.7.0-hc.1)",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          },
          "hnc": {
            "description": "The deployment state for open source HNC (e.g. v0.7.0-hc.0)",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementHierarchyControllerVersion": {
        "description": "Version for Hierarchy Controller",
        "properties": {
          "extension": {
            "description": "Version for Hierarchy Controller extension",
            "type": "string"
          },
          "hnc": {
            "description": "Version for open source HNC",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementOperatorState": {
        "description": "State information for an ACM's Operator",
        "properties": {
          "deploymentState": {
            "description": "The state of the Operator's deployment",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          },
          "errors": {
            "description": "Install errors.",
            "items": {
              "$ref": "#/$defs/ConfigManagementInstallError"
            },
            "type": "array"
          },
          "version": {
            "description": "The semenatic version number of the operator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementInstallError": {
        "description": "Errors pertaining to the installation of ACM",
        "properties": {
          "errorMessage": {
            "description": "A string representing the user facing error message",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementPolicyControllerState": {
        "description": "State for PolicyControllerState.",
        "properties": {
          "deploymentState": {
            "$ref": "#/$defs/ConfigManagementGatekeeperDeploymentState"
          },
          "migration": {
            "$ref": "#/$defs/ConfigManagementPolicyControllerMigration"
          },
          "version": {
            "$ref": "#/$defs/ConfigManagementPolicyControllerVersion"
          }
        },
        "type": "object"
      },
      "ConfigManagementGatekeeperDeploymentState": {
        "description": "State of Policy Controller installation.",
        "properties": {
          "gatekeeperAudit": {
            "description": "Status of gatekeeper-audit deployment.",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          },
          "gatekeeperControllerManagerState": {
            "description": "Status of gatekeeper-controller-manager pod.",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          },
          "gatekeeperMutation": {
            "description": "Status of the pod serving the mutation webhook.",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLED",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementPolicyControllerMigration": {
        "description": "State for the migration of PolicyController from ACM -> PoCo Hub.",
        "properties": {
          "copyTime": {
            "description": "Last time this membership spec was copied to PoCo feature.",
            "format": "google-datetime",
            "type": "string"
          },
          "stage": {
            "description": "Stage of the migration.",
            "enum": [
              "STAGE_UNSPECIFIED",
              "ACM_MANAGED",
              "POCO_MANAGED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigManagementPolicyControllerVersion": {
        "description": "The build version of Gatekeeper Policy Controller is using.",
        "properties": {
          "version": {
            "description": "The gatekeeper image tag that is composed of ACM version, git tag, build number.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FleetObservabilityMembershipState": {
        "description": "**FleetObservability**: Membership-specific Feature state for fleetobservability.",
        "properties": {},
        "type": "object"
      },
      "IdentityServiceMembershipState": {
        "description": "**Anthos Identity Service**: State for a single Membership.",
        "properties": {
          "failureReason": {
            "description": "The reason of the failure.",
            "type": "string"
          },
          "installedVersion": {
            "description": "Installed AIS version. This is the AIS version installed on this member. The values makes sense iff state is OK.",
            "type": "string"
          },
          "memberConfig": {
            "$ref": "#/$defs/IdentityServiceMembershipSpec"
          },
          "state": {
            "description": "Deployment state on this member",
            "enum": [
              "DEPLOYMENT_STATE_UNSPECIFIED",
              "OK",
              "ERROR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MeteringMembershipState": {
        "description": "**Metering**: Per-Membership Feature State.",
        "properties": {
          "lastMeasurementTime": {
            "description": "The time stamp of the most recent measurement of the number of vCPUs in the cluster.",
            "format": "google-datetime",
            "type": "string"
          },
          "preciseLastMeasuredClusterVcpuCapacity": {
            "description": "The vCPUs capacity in the cluster according to the most recent measurement (1/1000 precision).",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "PolicyControllerMembershipState": {
        "description": "**Policy Controller**: State for a single cluster.",
        "properties": {
          "componentStates": {
            "additionalProperties": {
              "$ref": "#/$defs/PolicyControllerOnClusterState"
            },
            "description": "Currently these include (also serving as map keys): 1. \"admission\" 2. \"audit\" 3. \"mutation\"",
            "type": "object"
          },
          "policyContentState": {
            "$ref": "#/$defs/PolicyControllerPolicyContentState"
          },
          "state": {
            "description": "The overall Policy Controller lifecycle state observed by the Hub Feature controller.",
            "enum": [
              "LIFECYCLE_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLING",
              "ACTIVE",
              "UPDATING",
              "DECOMMISSIONING",
              "CLUSTER_ERROR",
              "HUB_ERROR",
              "SUSPENDED",
              "DETACHED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PolicyControllerOnClusterState": {
        "description": "OnClusterState represents the state of a sub-component of Policy Controller.",
        "properties": {
          "details": {
            "description": "Surface potential errors or information logs.",
            "type": "string"
          },
          "state": {
            "description": "The lifecycle state of this component.",
            "enum": [
              "LIFECYCLE_STATE_UNSPECIFIED",
              "NOT_INSTALLED",
              "INSTALLING",
              "ACTIVE",
              "UPDATING",
              "DECOMMISSIONING",
              "CLUSTER_ERROR",
              "HUB_ERROR",
              "SUSPENDED",
              "DETACHED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PolicyControllerPolicyContentState": {
        "description": "The state of the policy controller policy content",
        "properties": {
          "bundleStates": {
            "additionalProperties": {
              "$ref": "#/$defs/PolicyControllerOnClusterState"
            },
            "description": "The state of the any bundles included in the chosen version of the manifest",
            "type": "object"
          },
          "referentialSyncConfigState": {
            "$ref": "#/$defs/PolicyControllerOnClusterState"
          },
          "templateLibraryState": {
            "$ref": "#/$defs/PolicyControllerOnClusterState"
          }
        },
        "type": "object"
      },
      "ServiceMeshMembershipState": {
        "description": "**Service Mesh**: State for a single Membership, as analyzed by the Service Mesh Hub Controller.",
        "properties": {
          "controlPlaneManagement": {
            "$ref": "#/$defs/ServiceMeshControlPlaneManagement"
          },
          "dataPlaneManagement": {
            "$ref": "#/$defs/ServiceMeshDataPlaneManagement"
          }
        },
        "type": "object"
      },
      "ServiceMeshControlPlaneManagement": {
        "description": "Status of control plane management.",
        "properties": {
          "details": {
            "description": "Explanation of state.",
            "items": {
              "$ref": "#/$defs/ServiceMeshStatusDetails"
            },
            "type": "array"
          },
          "state": {
            "description": "LifecycleState of control plane management.",
            "enum": [
              "LIFECYCLE_STATE_UNSPECIFIED",
              "DISABLED",
              "FAILED_PRECONDITION",
              "PROVISIONING",
              "ACTIVE",
              "STALLED",
              "NEEDS_ATTENTION",
              "DEGRADED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceMeshStatusDetails": {
        "description": "Structured and human-readable details for a status.",
        "properties": {
          "code": {
            "description": "A machine-readable code that further describes a broad status.",
            "type": "string"
          },
          "details": {
            "description": "Human-readable explanation of code.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceMeshDataPlaneManagement": {
        "description": "Status of data plane management. Only reported per-member.",
        "properties": {
          "details": {
            "description": "Explanation of the status.",
            "items": {
              "$ref": "#/$defs/ServiceMeshStatusDetails"
            },
            "type": "array"
          },
          "state": {
            "description": "Lifecycle status of data plane management.",
            "enum": [
              "LIFECYCLE_STATE_UNSPECIFIED",
              "DISABLED",
              "FAILED_PRECONDITION",
              "PROVISIONING",
              "ACTIVE",
              "STALLED",
              "NEEDS_ATTENTION",
              "DEGRADED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeatureState": {
        "description": "FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.",
        "properties": {
          "code": {
            "description": "The high-level, machine-readable status of this Feature.",
            "enum": [
              "CODE_UNSPECIFIED",
              "OK",
              "WARNING",
              "ERROR"
            ],
            "type": "string"
          },
          "description": {
            "description": "A human-readable description of the current status.",
            "type": "string"
          },
          "updateTime": {
            "description": "The time this status and any related Feature-specific details were updated.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeatureResourceState": {
        "description": "FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the \"running state\" of the Feature in the Hub and across Memberships.",
        "properties": {
          "state": {
            "description": "The current state of the Feature resource in the Hub API.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ENABLING",
              "ACTIVE",
              "DISABLING",
              "UPDATING",
              "SERVICE_UPDATING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScopeFeatureSpec": {
        "description": "ScopeFeatureSpec contains feature specs for a fleet scope.",
        "properties": {},
        "type": "object"
      },
      "ScopeFeatureState": {
        "description": "ScopeFeatureState contains Scope-wide Feature status information.",
        "properties": {
          "state": {
            "$ref": "#/$defs/FeatureState"
          }
        },
        "type": "object"
      },
      "CommonFeatureSpec": {
        "description": "CommonFeatureSpec contains Hub-wide configuration information",
        "properties": {
          "anthosobservability": {
            "$ref": "#/$defs/AnthosObservabilityFeatureSpec"
          },
          "appdevexperience": {
            "$ref": "#/$defs/AppDevExperienceFeatureSpec"
          },
          "clusterupgrade": {
            "$ref": "#/$defs/ClusterUpgradeFleetSpec"
          },
          "dataplanev2": {
            "$ref": "#/$defs/DataplaneV2FeatureSpec"
          },
          "fleetobservability": {
            "$ref": "#/$defs/FleetObservabilityFeatureSpec"
          },
          "multiclusteringress": {
            "$ref": "#/$defs/MultiClusterIngressFeatureSpec"
          }
        },
        "type": "object"
      },
      "AnthosObservabilityFeatureSpec": {
        "description": "**Anthos Observability**: Spec",
        "properties": {
          "defaultMembershipSpec": {
            "$ref": "#/$defs/AnthosObservabilityMembershipSpec"
          }
        },
        "type": "object"
      },
      "AppDevExperienceFeatureSpec": {
        "description": "Spec for App Dev Experience Feature.",
        "properties": {},
        "type": "object"
      },
      "ClusterUpgradeFleetSpec": {
        "description": "**ClusterUpgrade**: The configuration for the fleet-level ClusterUpgrade feature.",
        "properties": {
          "gkeUpgradeOverrides": {
            "description": "Allow users to override some properties of each GKE upgrade.",
            "items": {
              "$ref": "#/$defs/ClusterUpgradeGKEUpgradeOverride"
            },
            "type": "array"
          },
          "postConditions": {
            "$ref": "#/$defs/ClusterUpgradePostConditions"
          },
          "upstreamFleets": {
            "description": "This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ClusterUpgradeGKEUpgradeOverride": {
        "description": "Properties of a GKE upgrade that can be overridden by the user. For example, a user can skip soaking by overriding the soaking to 0.",
        "properties": {
          "postConditions": {
            "$ref": "#/$defs/ClusterUpgradePostConditions"
          },
          "upgrade": {
            "$ref": "#/$defs/ClusterUpgradeGKEUpgrade"
          }
        },
        "type": "object"
      },
      "ClusterUpgradePostConditions": {
        "description": "Post conditional checks after an upgrade has been applied on all eligible clusters.",
        "properties": {
          "soaking": {
            "description": "Required. Amount of time to \"soak\" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days. Required.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataplaneV2FeatureSpec": {
        "description": "**Dataplane V2**: Spec",
        "properties": {
          "enableEncryption": {
            "description": "Enable dataplane-v2 based encryption for multiple clusters.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "FleetObservabilityFeatureSpec": {
        "description": "**Fleet Observability**: The Hub-wide input for the FleetObservability feature.",
        "properties": {
          "loggingConfig": {
            "$ref": "#/$defs/FleetObservabilityLoggingConfig"
          }
        },
        "type": "object"
      },
      "FleetObservabilityLoggingConfig": {
        "description": "LoggingConfig defines the configuration for different types of logs.",
        "properties": {
          "defaultConfig": {
            "$ref": "#/$defs/FleetObservabilityRoutingConfig"
          },
          "fleetScopeLogsConfig": {
            "$ref": "#/$defs/FleetObservabilityRoutingConfig"
          }
        },
        "type": "object"
      },
      "FleetObservabilityRoutingConfig": {
        "description": "RoutingConfig configures the behaviour of fleet logging feature.",
        "properties": {
          "mode": {
            "description": "mode configures the logs routing mode.",
            "enum": [
              "MODE_UNSPECIFIED",
              "COPY",
              "MOVE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultiClusterIngressFeatureSpec": {
        "description": "**Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.",
        "properties": {
          "billing": {
            "deprecated": true,
            "description": "Deprecated: This field will be ignored and should not be set. Customer's billing structure.",
            "enum": [
              "BILLING_UNSPECIFIED",
              "PAY_AS_YOU_GO",
              "ANTHOS_LICENSE"
            ],
            "type": "string"
          },
          "configMembership": {
            "description": "Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommonFeatureState": {
        "description": "CommonFeatureState contains Hub-wide Feature status information.",
        "properties": {
          "appdevexperience": {
            "$ref": "#/$defs/AppDevExperienceFeatureState"
          },
          "clusterupgrade": {
            "$ref": "#/$defs/ClusterUpgradeFleetState"
          },
          "fleetobservability": {
            "$ref": "#/$defs/FleetObservabilityFeatureState"
          },
          "state": {
            "$ref": "#/$defs/FeatureState"
          }
        },
        "type": "object"
      },
      "ClusterUpgradeFleetState": {
        "description": "**ClusterUpgrade**: The state for the fleet-level ClusterUpgrade feature.",
        "properties": {
          "downstreamFleets": {
            "description": "This fleets whose upstream_fleets contain the current fleet. The fleet name should be either fleet project number or id.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "gkeState": {
            "$ref": "#/$defs/ClusterUpgradeGKEUpgradeFeatureState"
          },
          "ignored": {
            "additionalProperties": {
              "$ref": "#/$defs/ClusterUpgradeIgnoredMembership"
            },
            "description": "A list of memberships ignored by the feature. For example, manually upgraded clusters can be ignored if they are newer than the default versions of its release channel. The membership resource is in the format: `projects/{p}/locations/{l}/membership/{m}`.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "ClusterUpgradeGKEUpgradeFeatureState": {
        "description": "GKEUpgradeFeatureState contains feature states for GKE clusters in the scope.",
        "properties": {
          "conditions": {
            "description": "Current conditions of the feature.",
            "items": {
              "$ref": "#/$defs/ClusterUpgradeGKEUpgradeFeatureCondition"
            },
            "type": "array"
          },
          "upgradeState": {
            "description": "Upgrade state. It will eventually replace `state`.",
            "items": {
              "$ref": "#/$defs/ClusterUpgradeGKEUpgradeState"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ClusterUpgradeGKEUpgradeFeatureCondition": {
        "description": "GKEUpgradeFeatureCondition describes the condition of the feature for GKE clusters at a certain point of time.",
        "properties": {
          "reason": {
            "description": "Reason why the feature is in this status.",
            "type": "string"
          },
          "status": {
            "description": "Status of the condition, one of True, False, Unknown.",
            "type": "string"
          },
          "type": {
            "description": "Type of the condition, for example, \"ready\".",
            "type": "string"
          },
          "updateTime": {
            "description": "Last timestamp the condition was updated.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClusterUpgradeGKEUpgradeState": {
        "description": "GKEUpgradeState is a GKEUpgrade and its state at the scope and fleet level.",
        "properties": {
          "stats": {
            "additionalProperties": {
              "format": "int64",
              "type": "string"
            },
            "description": "Number of GKE clusters in each status code.",
            "type": "object"
          },
          "status": {
            "$ref": "#/$defs/ClusterUpgradeUpgradeStatus"
          },
          "upgrade": {
            "$ref": "#/$defs/ClusterUpgradeGKEUpgrade"
          }
        },
        "type": "object"
      },
      "FleetObservabilityFeatureState": {
        "description": "**FleetObservability**: Hub-wide Feature for FleetObservability feature. state.",
        "properties": {
          "logging": {
            "$ref": "#/$defs/FleetObservabilityFleetObservabilityLoggingState"
          },
          "monitoring": {
            "$ref": "#/$defs/FleetObservabilityFleetObservabilityMonitoringState"
          }
        },
        "type": "object"
      },
      "FleetObservabilityFleetObservabilityLoggingState": {
        "description": "Feature state for logging feature.",
        "properties": {
          "defaultLog": {
            "$ref": "#/$defs/FleetObservabilityFleetObservabilityBaseFeatureState"
          },
          "scopeLog": {
            "$ref": "#/$defs/FleetObservabilityFleetObservabilityBaseFeatureState"
          }
        },
        "type": "object"
      },
      "FleetObservabilityFleetObservabilityBaseFeatureState": {
        "description": "Base state for fleet observability feature.",
        "properties": {
          "code": {
            "description": "The high-level, machine-readable status of this Feature.",
            "enum": [
              "CODE_UNSPECIFIED",
              "OK",
              "ERROR"
            ],
            "type": "string"
          },
          "errors": {
            "description": "Errors after reconciling the monitoring and logging feature if the code is not OK.",
            "items": {
              "$ref": "#/$defs/FleetObservabilityFeatureError"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FleetObservabilityFeatureError": {
        "description": "All error details of the fleet observability feature.",
        "properties": {
          "code": {
            "description": "The code of the error.",
            "type": "string"
          },
          "description": {
            "description": "A human-readable description of the current status.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FleetObservabilityFleetObservabilityMonitoringState": {
        "description": "Feature state for monitoring feature.",
        "properties": {
          "state": {
            "$ref": "#/$defs/FleetObservabilityFleetObservabilityBaseFeatureState"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://gkehub.googleapis.com//v1beta/{parent}/features{?featureId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
