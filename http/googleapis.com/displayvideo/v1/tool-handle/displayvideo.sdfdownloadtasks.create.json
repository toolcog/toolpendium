{
  "name": "displayvideo_sdfdownloadtasks_create",
  "description": "Creates an SDF Download Task. Returns an Operation. An SDF Download Task is a long-running, asynchronous operation. The metadata type of this operation is SdfDownloadTaskMetadata. If the request is successful, the response type of the operation is SdfDownloadTask. The response will not include the download files, which must be retrieved with media.download. The state of operation can be retrieved with sdfdownloadtask.operations.get. Any errors can be found in the error.message. Note that error.details is expected to be empty.",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CreateSdfDownloadTaskRequest"
      }
    },
    "$defs": {
      "CreateSdfDownloadTaskRequest": {
        "description": "Request message for [SdfDownloadTaskService.CreateSdfDownloadTask].",
        "properties": {
          "advertiserId": {
            "description": "The ID of the advertiser to download SDF for.",
            "format": "int64",
            "type": "string"
          },
          "idFilter": {
            "$ref": "#/$defs/IdFilter"
          },
          "inventorySourceFilter": {
            "$ref": "#/$defs/InventorySourceFilter"
          },
          "parentEntityFilter": {
            "$ref": "#/$defs/ParentEntityFilter"
          },
          "partnerId": {
            "description": "The ID of the partner to download SDF for.",
            "format": "int64",
            "type": "string"
          },
          "version": {
            "description": "Required. The SDF version of the downloaded file. If set to `SDF_VERSION_UNSPECIFIED`, this will default to the version specified by the advertiser or partner identified by `root_id`. An advertiser inherits its SDF version from its partner unless configured otherwise.",
            "enum": [
              "SDF_VERSION_UNSPECIFIED",
              "SDF_VERSION_3_1",
              "SDF_VERSION_4",
              "SDF_VERSION_4_1",
              "SDF_VERSION_4_2",
              "SDF_VERSION_5",
              "SDF_VERSION_5_1",
              "SDF_VERSION_5_2",
              "SDF_VERSION_5_3",
              "SDF_VERSION_5_4",
              "SDF_VERSION_5_5",
              "SDF_VERSION_6",
              "SDF_VERSION_7"
            ],
            "type": "string",
            "x-enumDeprecated": [
              false,
              true,
              true,
              true,
              true,
              true,
              true,
              true,
              true,
              false,
              false,
              false,
              false
            ]
          }
        },
        "type": "object"
      },
      "IdFilter": {
        "description": "A filtering option that filters entities by their entity IDs.",
        "properties": {
          "adGroupAdIds": {
            "description": "YouTube Ads to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "adGroupIds": {
            "description": "YouTube Ad Groups to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "campaignIds": {
            "description": "Campaigns to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "insertionOrderIds": {
            "description": "Insertion Orders to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "lineItemIds": {
            "description": "Line Items to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "mediaProductIds": {
            "description": "Media Products to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InventorySourceFilter": {
        "description": "A filtering option for filtering on Inventory Source entities.",
        "properties": {
          "inventorySourceIds": {
            "description": "Inventory Sources to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest. Leave empty to download all Inventory Sources for the selected Advertiser or Partner.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ParentEntityFilter": {
        "description": "A filtering option that filters on selected file types belonging to a chosen set of filter entities.",
        "properties": {
          "fileType": {
            "description": "Required. File types that will be returned.",
            "items": {
              "enum": [
                "FILE_TYPE_UNSPECIFIED",
                "FILE_TYPE_CAMPAIGN",
                "FILE_TYPE_MEDIA_PRODUCT",
                "FILE_TYPE_INSERTION_ORDER",
                "FILE_TYPE_LINE_ITEM",
                "FILE_TYPE_AD_GROUP",
                "FILE_TYPE_AD"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "filterIds": {
            "description": "The IDs of the specified filter type. This is used to filter entities to fetch. If filter type is not `FILTER_TYPE_NONE`, at least one ID must be specified.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "filterType": {
            "description": "Required. Filter type used to filter fetched entities.",
            "enum": [
              "FILTER_TYPE_UNSPECIFIED",
              "FILTER_TYPE_NONE",
              "FILTER_TYPE_ADVERTISER_ID",
              "FILTER_TYPE_CAMPAIGN_ID",
              "FILTER_TYPE_MEDIA_PRODUCT_ID",
              "FILTER_TYPE_INSERTION_ORDER_ID",
              "FILTER_TYPE_LINE_ITEM_ID"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://displayvideo.googleapis.com//v1/sdfdownloadtasks{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
