{
  "name": "vmmigration_projects_locations_imageImports_create",
  "description": "Creates a new ImageImport in a given project.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The ImageImport's parent."
      },
      "imageImportId": {
        "type": "string",
        "description": "Required. The image import identifier. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/ImageImport"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "ImageImport": {
        "description": "ImageImport describes the configuration of the image import to run.",
        "properties": {
          "cloudStorageUri": {
            "description": "Immutable. The path to the Cloud Storage file from which the image should be imported.",
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The time the image import was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "diskImageTargetDefaults": {
            "$ref": "#/$defs/DiskImageTargetDetails"
          },
          "encryption": {
            "$ref": "#/$defs/Encryption"
          },
          "name": {
            "description": "Output only. The resource path of the ImageImport.",
            "readOnly": true,
            "type": "string"
          },
          "recentImageImportJobs": {
            "description": "Output only. The result of the most recent runs for this ImageImport. All jobs for this ImageImport can be listed via ListImageImportJobs.",
            "items": {
              "$ref": "#/$defs/ImageImportJob"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "DiskImageTargetDetails": {
        "description": "The target details of the image resource that will be created by the import job.",
        "properties": {
          "additionalLicenses": {
            "description": "Optional. Additional licenses to assign to the image.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dataDiskImageImport": {
            "$ref": "#/$defs/DataDiskImageImport"
          },
          "description": {
            "description": "Optional. An optional description of the image.",
            "type": "string"
          },
          "encryption": {
            "$ref": "#/$defs/Encryption"
          },
          "familyName": {
            "description": "Optional. The name of the image family to which the new image belongs.",
            "type": "string"
          },
          "imageName": {
            "description": "Required. The name of the image to be created.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. A map of labels to associate with the image.",
            "type": "object"
          },
          "osAdaptationParameters": {
            "$ref": "#/$defs/ImageImportOsAdaptationParameters"
          },
          "singleRegionStorage": {
            "description": "Optional. Set to true to set the image storageLocations to the single region of the import job. When false, the closest multi-region is selected.",
            "type": "boolean"
          },
          "targetProject": {
            "description": "Required. Reference to the TargetProject resource that represents the target project in which the imported image will be created.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataDiskImageImport": {
        "description": "Mentions that the image import is not using OS adaptation process.",
        "properties": {},
        "type": "object"
      },
      "Encryption": {
        "description": "Encryption message describes the details of the applied encryption.",
        "properties": {
          "kmsKey": {
            "description": "Required. The name of the encryption key that is stored in Google Cloud KMS.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImageImportOsAdaptationParameters": {
        "description": "Parameters affecting the OS adaptation process.",
        "properties": {
          "generalize": {
            "description": "Optional. Set to true in order to generalize the imported image. The generalization process enables co-existence of multiple VMs created from the same image. For Windows, generalizing the image removes computer-specific information such as installed drivers and the computer security identifier (SID).",
            "type": "boolean"
          },
          "licenseType": {
            "description": "Optional. Choose which type of license to apply to the imported image.",
            "enum": [
              "COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT",
              "COMPUTE_ENGINE_LICENSE_TYPE_PAYG",
              "COMPUTE_ENGINE_LICENSE_TYPE_BYOL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImageImportJob": {
        "description": "ImageImportJob describes the progress and result of an image import.",
        "properties": {
          "cloudStorageUri": {
            "description": "Output only. The path to the Cloud Storage file from which the image should be imported.",
            "readOnly": true,
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The time the image import was created (as an API call, not when it was actually created in the target).",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "createdResources": {
            "description": "Output only. The resource paths of the resources created by the image import job.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "diskImageTargetDetails": {
            "$ref": "#/$defs/DiskImageTargetDetails"
          },
          "endTime": {
            "description": "Output only. The time the image import was ended.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "errors": {
            "description": "Output only. Provides details on the error that led to the image import state in case of an error.",
            "items": {
              "$ref": "#/$defs/Status"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "description": "Output only. The resource path of the ImageImportJob.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The state of the image import.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PENDING",
              "RUNNING",
              "SUCCEEDED",
              "FAILED",
              "CANCELLING",
              "CANCELLED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "steps": {
            "description": "Output only. The image import steps list representing its progress.",
            "items": {
              "$ref": "#/$defs/ImageImportStep"
            },
            "readOnly": true,
            "type": "array"
          },
          "warnings": {
            "description": "Output only. Warnings that occurred during the image import.",
            "items": {
              "$ref": "#/$defs/MigrationWarning"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImageImportStep": {
        "description": "ImageImportStep holds information about the image import step progress.",
        "properties": {
          "adaptingOs": {
            "$ref": "#/$defs/AdaptingOSStep"
          },
          "creatingImage": {
            "$ref": "#/$defs/CreatingImageStep"
          },
          "endTime": {
            "description": "Output only. The time the step has ended.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "initializing": {
            "$ref": "#/$defs/InitializingImageImportStep"
          },
          "loadingSourceFiles": {
            "$ref": "#/$defs/LoadingImageSourceFilesStep"
          },
          "startTime": {
            "description": "Output only. The time the step has started.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdaptingOSStep": {
        "description": "AdaptingOSStep contains specific step details.",
        "properties": {},
        "type": "object"
      },
      "CreatingImageStep": {
        "description": "CreatingImageStep contains specific step details.",
        "properties": {},
        "type": "object"
      },
      "InitializingImageImportStep": {
        "description": "InitializingImageImportStep contains specific step details.",
        "properties": {},
        "type": "object"
      },
      "LoadingImageSourceFilesStep": {
        "description": "LoadingImageSourceFilesStep contains specific step details.",
        "properties": {},
        "type": "object"
      },
      "MigrationWarning": {
        "description": "Represents migration resource warning information that can be used with google.rpc.Status message. MigrationWarning is used to present the user with warning information in migration operations.",
        "properties": {
          "actionItem": {
            "$ref": "#/$defs/LocalizedMessage"
          },
          "code": {
            "description": "The warning code.",
            "enum": [
              "WARNING_CODE_UNSPECIFIED",
              "ADAPTATION_WARNING"
            ],
            "type": "string"
          },
          "helpLinks": {
            "description": "URL(s) pointing to additional information on handling the current warning.",
            "items": {
              "$ref": "#/$defs/Link"
            },
            "type": "array"
          },
          "warningMessage": {
            "$ref": "#/$defs/LocalizedMessage"
          },
          "warningTime": {
            "description": "The time the warning occurred.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocalizedMessage": {
        "description": "Provides a localized error message that is safe to return to the user which can be attached to an RPC error.",
        "properties": {
          "locale": {
            "description": "The locale used following the specification defined at https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: \"en-US\", \"fr-CH\", \"es-MX\"",
            "type": "string"
          },
          "message": {
            "description": "The localized error message in the above locale.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Link": {
        "description": "Describes a URL link.",
        "properties": {
          "description": {
            "description": "Describes what the link offers.",
            "type": "string"
          },
          "url": {
            "description": "The URL of the link.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://vmmigration.googleapis.com//v1/{parent}/imageImports{?imageImportId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
