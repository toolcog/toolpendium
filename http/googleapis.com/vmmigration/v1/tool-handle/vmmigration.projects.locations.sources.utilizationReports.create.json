{
  "name": "vmmigration_projects_locations_sources_utilizationReports_create",
  "description": "Creates a new UtilizationReport.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The Utilization Report's parent."
      },
      "requestId": {
        "type": "string",
        "description": "A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "utilizationReportId": {
        "type": "string",
        "description": "Required. The ID to use for the report, which will become the final component of the reports's resource name. This value maximum length is 63 characters, and valid characters are /a-z-/. It must start with an english letter and must not end with a hyphen."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/UtilizationReport"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "UtilizationReport": {
        "description": "Utilization report details the utilization (CPU, memory, etc.) of selected source VMs.",
        "properties": {
          "createTime": {
            "description": "Output only. The time the report was created (this refers to the time of the request, not the time the report creation completed).",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "The report display name, as assigned by the user.",
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/Status"
          },
          "frameEndTime": {
            "description": "Output only. The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the \"frame_end_time\" value is 2021/01/20 and the time frame is WEEK then the report covers the week between 2021/01/20 and 2021/01/14.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Output only. The report unique name.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. Current state of the report.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "SUCCEEDED",
              "FAILED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "stateTime": {
            "description": "Output only. The time the state was last set.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "timeFrame": {
            "description": "Time frame of the report.",
            "enum": [
              "TIME_FRAME_UNSPECIFIED",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "type": "string"
          },
          "vmCount": {
            "description": "Output only. Total number of VMs included in the report.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "vms": {
            "description": "List of utilization information per VM. When sent as part of the request, the \"vm_id\" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.",
            "items": {
              "$ref": "#/$defs/VmUtilizationInfo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmUtilizationInfo": {
        "description": "Utilization information of a single VM.",
        "properties": {
          "utilization": {
            "$ref": "#/$defs/VmUtilizationMetrics"
          },
          "vmId": {
            "description": "The VM's ID in the source.",
            "type": "string"
          },
          "vmwareVmDetails": {
            "$ref": "#/$defs/VmwareVmDetails"
          }
        },
        "type": "object"
      },
      "VmUtilizationMetrics": {
        "description": "Utilization metrics values for a single VM.",
        "properties": {
          "cpuAveragePercent": {
            "description": "Average CPU usage, percent.",
            "format": "int32",
            "type": "integer"
          },
          "cpuMaxPercent": {
            "description": "Max CPU usage, percent.",
            "format": "int32",
            "type": "integer"
          },
          "diskIoRateAverageKbps": {
            "description": "Average disk IO rate, in kilobytes per second.",
            "format": "int64",
            "type": "string"
          },
          "diskIoRateMaxKbps": {
            "description": "Max disk IO rate, in kilobytes per second.",
            "format": "int64",
            "type": "string"
          },
          "memoryAveragePercent": {
            "description": "Average memory usage, percent.",
            "format": "int32",
            "type": "integer"
          },
          "memoryMaxPercent": {
            "description": "Max memory usage, percent.",
            "format": "int32",
            "type": "integer"
          },
          "networkThroughputAverageKbps": {
            "description": "Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.",
            "format": "int64",
            "type": "string"
          },
          "networkThroughputMaxKbps": {
            "description": "Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareVmDetails": {
        "description": "VmwareVmDetails describes a VM in vCenter.",
        "properties": {
          "bootOption": {
            "description": "Output only. The VM Boot Option.",
            "enum": [
              "BOOT_OPTION_UNSPECIFIED",
              "EFI",
              "BIOS"
            ],
            "readOnly": true,
            "type": "string"
          },
          "committedStorageMb": {
            "description": "The total size of the storage allocated to the VM in MB.",
            "format": "int64",
            "type": "string"
          },
          "cpuCount": {
            "description": "The number of cpus in the VM.",
            "format": "int32",
            "type": "integer"
          },
          "datacenterDescription": {
            "description": "The descriptive name of the vCenter's datacenter this VM is contained in.",
            "type": "string"
          },
          "datacenterId": {
            "description": "The id of the vCenter's datacenter this VM is contained in.",
            "type": "string"
          },
          "diskCount": {
            "description": "The number of disks the VM has.",
            "format": "int32",
            "type": "integer"
          },
          "displayName": {
            "description": "The display name of the VM. Note that this is not necessarily unique.",
            "type": "string"
          },
          "guestDescription": {
            "description": "The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.",
            "type": "string"
          },
          "memoryMb": {
            "description": "The size of the memory of the VM in MB.",
            "format": "int32",
            "type": "integer"
          },
          "powerState": {
            "description": "The power state of the VM at the moment list was taken.",
            "enum": [
              "POWER_STATE_UNSPECIFIED",
              "ON",
              "OFF",
              "SUSPENDED"
            ],
            "type": "string"
          },
          "uuid": {
            "description": "The unique identifier of the VM in vCenter.",
            "type": "string"
          },
          "vmId": {
            "description": "The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://vmmigration.googleapis.com//v1/{parent}/utilizationReports{?requestId,utilizationReportId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
