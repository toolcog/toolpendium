{
  "name": "vmmigration_projects_locations_sources_datacenterConnectors_create",
  "description": "Creates a new DatacenterConnector in a given Source.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The DatacenterConnector's parent. Required. The Source in where the new DatacenterConnector will be created. For example: `projects/my-project/locations/us-central1/sources/my-source`"
      },
      "datacenterConnectorId": {
        "type": "string",
        "description": "Required. The datacenterConnector identifier."
      },
      "requestId": {
        "type": "string",
        "description": "A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/DatacenterConnector"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "DatacenterConnector": {
        "description": "DatacenterConnector message describes a connector between the Source and Google Cloud, which is installed on a vmware datacenter (an OVA vm installed by the user) to connect the Datacenter to Google Cloud and support vm migration data transfer.",
        "properties": {
          "applianceInfrastructureVersion": {
            "description": "Output only. Appliance OVA version. This is the OVA which is manually installed by the user and contains the infrastructure for the automatically updatable components on the appliance.",
            "readOnly": true,
            "type": "string"
          },
          "applianceSoftwareVersion": {
            "description": "Output only. Appliance last installed update bundle version. This is the version of the automatically updatable components on the appliance.",
            "readOnly": true,
            "type": "string"
          },
          "availableVersions": {
            "$ref": "#/$defs/AvailableUpdates"
          },
          "bucket": {
            "description": "Output only. The communication channel between the datacenter connector and Google Cloud.",
            "readOnly": true,
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The time the connector was created (as an API call, not when it was actually installed).",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/Status"
          },
          "name": {
            "description": "Output only. The connector's name.",
            "readOnly": true,
            "type": "string"
          },
          "registrationId": {
            "description": "Immutable. A unique key for this connector. This key is internal to the OVA connector and is supplied with its creation during the registration process and can not be modified.",
            "type": "string"
          },
          "serviceAccount": {
            "description": "The service account to use in the connector when communicating with the cloud.",
            "type": "string"
          },
          "state": {
            "description": "Output only. State of the DatacenterConnector, as determined by the health checks.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PENDING",
              "OFFLINE",
              "FAILED",
              "ACTIVE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "stateTime": {
            "description": "Output only. The time the state was last set.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The last time the connector was updated with an API call.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "upgradeStatus": {
            "$ref": "#/$defs/UpgradeStatus"
          },
          "version": {
            "description": "The version running in the DatacenterConnector. This is supplied by the OVA connector during the registration process and can not be modified.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AvailableUpdates": {
        "description": "Holds informatiom about the available versions for upgrade.",
        "properties": {
          "inPlaceUpdate": {
            "$ref": "#/$defs/ApplianceVersion"
          },
          "newDeployableAppliance": {
            "$ref": "#/$defs/ApplianceVersion"
          }
        },
        "type": "object"
      },
      "ApplianceVersion": {
        "description": "Describes an appliance version.",
        "properties": {
          "critical": {
            "description": "Determine whether it's critical to upgrade the appliance to this version.",
            "type": "boolean"
          },
          "releaseNotesUri": {
            "description": "Link to a page that contains the version release notes.",
            "type": "string"
          },
          "uri": {
            "description": "A link for downloading the version.",
            "type": "string"
          },
          "version": {
            "description": "The appliance version.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpgradeStatus": {
        "description": "UpgradeStatus contains information about upgradeAppliance operation.",
        "properties": {
          "error": {
            "$ref": "#/$defs/Status"
          },
          "previousVersion": {
            "description": "The version from which we upgraded.",
            "type": "string"
          },
          "startTime": {
            "description": "The time the operation was started.",
            "format": "google-datetime",
            "type": "string"
          },
          "state": {
            "description": "The state of the upgradeAppliance operation.",
            "enum": [
              "STATE_UNSPECIFIED",
              "RUNNING",
              "FAILED",
              "SUCCEEDED"
            ],
            "type": "string"
          },
          "version": {
            "description": "The version to upgrade to.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://vmmigration.googleapis.com//v1alpha1/{parent}/datacenterConnectors{?datacenterConnectorId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
