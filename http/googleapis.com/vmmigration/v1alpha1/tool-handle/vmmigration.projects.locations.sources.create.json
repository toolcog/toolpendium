{
  "name": "vmmigration_projects_locations_sources_create",
  "description": "Creates a new Source in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The Source's parent."
      },
      "requestId": {
        "type": "string",
        "description": "A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "sourceId": {
        "type": "string",
        "description": "Required. The source identifier."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Source"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Source": {
        "description": "Source message describes a specific vm migration Source resource. It contains the source environment information.",
        "properties": {
          "aws": {
            "$ref": "#/$defs/AwsSourceDetails"
          },
          "azure": {
            "$ref": "#/$defs/AzureSourceDetails"
          },
          "createTime": {
            "description": "Output only. The create time timestamp.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "User-provided description of the source.",
            "type": "string"
          },
          "encryption": {
            "$ref": "#/$defs/Encryption"
          },
          "error": {
            "$ref": "#/$defs/Status"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels of the source.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The Source name.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The update time timestamp.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "vmware": {
            "$ref": "#/$defs/VmwareSourceDetails"
          }
        },
        "type": "object"
      },
      "AwsSourceDetails": {
        "description": "AwsSourceDetails message describes a specific source details for the AWS source type.",
        "properties": {
          "accessKeyCreds": {
            "$ref": "#/$defs/AccessKeyCredentials"
          },
          "awsRegion": {
            "description": "Immutable. The AWS region that the source VMs will be migrated from.",
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/Status"
          },
          "inventorySecurityGroupNames": {
            "description": "AWS security group names to limit the scope of the source inventory.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "inventoryTagList": {
            "description": "AWS resource tags to limit the scope of the source inventory.",
            "items": {
              "$ref": "#/$defs/Tag"
            },
            "type": "array"
          },
          "migrationResourcesUserTags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.",
            "type": "object"
          },
          "publicIp": {
            "description": "Output only. The source's public IP. All communication initiated by this source will originate from this IP.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. State of the source as determined by the health check.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PENDING",
              "FAILED",
              "ACTIVE"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccessKeyCredentials": {
        "description": "Message describing AWS Credentials using access key id and secret.",
        "properties": {
          "accessKeyId": {
            "description": "AWS access key ID.",
            "type": "string"
          },
          "secretAccessKey": {
            "description": "Input only. AWS secret access key.",
            "type": "string"
          },
          "sessionToken": {
            "description": "Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Tag": {
        "description": "Tag is an AWS tag representation.",
        "properties": {
          "key": {
            "description": "Key of tag.",
            "type": "string"
          },
          "value": {
            "description": "Value of tag.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AzureSourceDetails": {
        "description": "AzureSourceDetails message describes a specific source details for the Azure source type.",
        "properties": {
          "azureLocation": {
            "description": "Immutable. The Azure location (region) that the source VMs will be migrated from.",
            "type": "string"
          },
          "clientSecretCreds": {
            "$ref": "#/$defs/ClientSecretCredentials"
          },
          "error": {
            "$ref": "#/$defs/Status"
          },
          "migrationResourcesUserTags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.",
            "type": "object"
          },
          "resourceGroupId": {
            "description": "Output only. The ID of the Azure resource group that contains all resources related to the migration process of this source.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. State of the source as determined by the health check.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PENDING",
              "FAILED",
              "ACTIVE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "subscriptionId": {
            "description": "Immutable. Azure subscription ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientSecretCredentials": {
        "description": "Message describing Azure Credentials using tenant ID, client ID and secret.",
        "properties": {
          "clientId": {
            "description": "Azure client ID.",
            "type": "string"
          },
          "clientSecret": {
            "description": "Input only. Azure client secret.",
            "type": "string"
          },
          "tenantId": {
            "description": "Azure tenant ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Encryption": {
        "description": "Encryption message describes the details of the applied encryption.",
        "properties": {
          "kmsKey": {
            "description": "Required. The name of the encryption key that is stored in Google Cloud KMS.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareSourceDetails": {
        "description": "VmwareSourceDetails message describes a specific source details for the vmware source type.",
        "properties": {
          "password": {
            "description": "Input only. The credentials password. This is write only and can not be read in a GET operation.",
            "type": "string"
          },
          "resolvedVcenterHost": {
            "description": "The hostname of the vcenter.",
            "type": "string"
          },
          "thumbprint": {
            "description": "The thumbprint representing the certificate for the vcenter.",
            "type": "string"
          },
          "username": {
            "description": "The credentials username.",
            "type": "string"
          },
          "vcenterIp": {
            "description": "The ip address of the vcenter this Source represents.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://vmmigration.googleapis.com//v1alpha1/{parent}/sources{?requestId,sourceId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
