{
  "name": "vmmigration_projects_locations_sources_migratingVms_cloneJobs_create",
  "description": "Initiates a Clone of a specific migrating VM.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The Clone's parent."
      },
      "cloneJobId": {
        "type": "string",
        "description": "Required. The clone job identifier."
      },
      "requestId": {
        "type": "string",
        "description": "A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CloneJob"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "CloneJob": {
        "description": "CloneJob describes the process of creating a clone of a MigratingVM to the requested target based on the latest successful uploaded snapshots. While the migration cycles of a MigratingVm take place, it is possible to verify the uploaded VM can be started in the cloud, by creating a clone. The clone can be created without any downtime, and it is created using the latest snapshots which are already in the cloud. The cloneJob is only responsible for its work, not its products, which means once it is finished, it will never touch the instance it created. It will only delete it in case of the CloneJob being cancelled or upon failure to clone.",
        "properties": {
          "computeEngineDisksTargetDetails": {
            "$ref": "#/$defs/ComputeEngineDisksTargetDetails"
          },
          "computeEngineTargetDetails": {
            "$ref": "#/$defs/ComputeEngineTargetDetails"
          },
          "computeEngineVmDetails": {
            "$ref": "#/$defs/TargetVMDetails"
          },
          "createTime": {
            "description": "Output only. The time the clone job was created (as an API call, not when it was actually created in the target).",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "endTime": {
            "description": "Output only. The time the clone job was ended.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/Status"
          },
          "name": {
            "description": "Output only. The name of the clone.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. State of the clone job.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PENDING",
              "ACTIVE",
              "FAILED",
              "SUCCEEDED",
              "CANCELLED",
              "CANCELLING",
              "ADAPTING_OS"
            ],
            "readOnly": true,
            "type": "string"
          },
          "stateTime": {
            "description": "Output only. The time the state was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "steps": {
            "description": "Output only. The clone steps list representing its progress.",
            "items": {
              "$ref": "#/$defs/CloneStep"
            },
            "readOnly": true,
            "type": "array"
          },
          "targetDetails": {
            "$ref": "#/$defs/TargetVMDetails"
          }
        },
        "type": "object"
      },
      "ComputeEngineDisksTargetDetails": {
        "description": "ComputeEngineDisksTargetDetails is a collection of created Persistent Disks details.",
        "properties": {
          "disks": {
            "description": "The details of each created Persistent Disk.",
            "items": {
              "$ref": "#/$defs/PersistentDisk"
            },
            "type": "array"
          },
          "disksTargetDetails": {
            "$ref": "#/$defs/DisksMigrationDisksTargetDetails"
          },
          "vmTargetDetails": {
            "$ref": "#/$defs/DisksMigrationVmTargetDetails"
          }
        },
        "type": "object"
      },
      "PersistentDisk": {
        "description": "Details of a created Persistent Disk.",
        "properties": {
          "diskUri": {
            "description": "The URI of the Persistent Disk.",
            "type": "string"
          },
          "sourceDiskNumber": {
            "description": "The ordinal number of the source VM disk.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DisksMigrationDisksTargetDetails": {
        "description": "Details for a disks-only migration.",
        "properties": {},
        "type": "object"
      },
      "DisksMigrationVmTargetDetails": {
        "description": "Details for the VM created VM as part of disks migration.",
        "properties": {
          "vmUri": {
            "description": "Output only. The URI of the Compute Engine VM.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ComputeEngineTargetDetails": {
        "description": "ComputeEngineTargetDetails is a collection of details for creating a VM in a target Compute Engine project.",
        "properties": {
          "additionalLicenses": {
            "description": "Additional licenses to assign to the VM.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "appliedLicense": {
            "$ref": "#/$defs/AppliedLicense"
          },
          "bootOption": {
            "description": "The VM Boot Option, as set in the source VM.",
            "enum": [
              "COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED",
              "COMPUTE_ENGINE_BOOT_OPTION_EFI",
              "COMPUTE_ENGINE_BOOT_OPTION_BIOS"
            ],
            "type": "string"
          },
          "computeScheduling": {
            "$ref": "#/$defs/ComputeScheduling"
          },
          "diskType": {
            "description": "The disk type to use in the VM.",
            "enum": [
              "COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED",
              "COMPUTE_ENGINE_DISK_TYPE_STANDARD",
              "COMPUTE_ENGINE_DISK_TYPE_SSD",
              "COMPUTE_ENGINE_DISK_TYPE_BALANCED"
            ],
            "type": "string"
          },
          "encryption": {
            "$ref": "#/$defs/Encryption"
          },
          "hostname": {
            "description": "The hostname to assign to the VM.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of labels to associate with the VM.",
            "type": "object"
          },
          "licenseType": {
            "description": "The license type to use in OS adaptation.",
            "enum": [
              "COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT",
              "COMPUTE_ENGINE_LICENSE_TYPE_PAYG",
              "COMPUTE_ENGINE_LICENSE_TYPE_BYOL"
            ],
            "type": "string"
          },
          "machineType": {
            "description": "The machine type to create the VM with.",
            "type": "string"
          },
          "machineTypeSeries": {
            "description": "The machine type series to create the VM with.",
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The metadata key/value pairs to assign to the VM.",
            "type": "object"
          },
          "networkInterfaces": {
            "description": "List of NICs connected to this VM.",
            "items": {
              "$ref": "#/$defs/NetworkInterface"
            },
            "type": "array"
          },
          "networkTags": {
            "description": "A list of network tags to associate with the VM.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "project": {
            "description": "The Google Cloud target project ID or project name.",
            "type": "string"
          },
          "secureBoot": {
            "description": "Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.",
            "type": "boolean"
          },
          "serviceAccount": {
            "description": "The service account to associate the VM with.",
            "type": "string"
          },
          "vmName": {
            "description": "The name of the VM to create.",
            "type": "string"
          },
          "zone": {
            "description": "The zone in which to create the VM.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppliedLicense": {
        "description": "AppliedLicense holds the license data returned by adaptation module report.",
        "properties": {
          "osLicense": {
            "description": "The OS license returned from the adaptation module's report.",
            "type": "string"
          },
          "type": {
            "description": "The license type that was used in OS adaptation.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "NONE",
              "PAYG",
              "BYOL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ComputeScheduling": {
        "description": "Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.",
        "properties": {
          "automaticRestart": {
            "deprecated": true,
            "type": "boolean"
          },
          "minNodeCpus": {
            "description": "The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.",
            "format": "int32",
            "type": "integer"
          },
          "nodeAffinities": {
            "description": "A set of node affinity and anti-affinity configurations for sole tenant nodes.",
            "items": {
              "$ref": "#/$defs/SchedulingNodeAffinity"
            },
            "type": "array"
          },
          "onHostMaintenance": {
            "description": "How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.",
            "enum": [
              "ON_HOST_MAINTENANCE_UNSPECIFIED",
              "TERMINATE",
              "MIGRATE"
            ],
            "type": "string"
          },
          "restartType": {
            "description": "Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.",
            "enum": [
              "RESTART_TYPE_UNSPECIFIED",
              "AUTOMATIC_RESTART",
              "NO_AUTOMATIC_RESTART"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SchedulingNodeAffinity": {
        "description": "Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled. Based on https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling",
        "properties": {
          "key": {
            "description": "The label key of Node resource to reference.",
            "type": "string"
          },
          "operator": {
            "description": "The operator to use for the node resources specified in the `values` parameter.",
            "enum": [
              "OPERATOR_UNSPECIFIED",
              "IN",
              "NOT_IN"
            ],
            "type": "string"
          },
          "values": {
            "description": "Corresponds to the label values of Node resource.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Encryption": {
        "description": "Encryption message describes the details of the applied encryption.",
        "properties": {
          "kmsKey": {
            "description": "Required. The name of the encryption key that is stored in Google Cloud KMS.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkInterface": {
        "description": "NetworkInterface represents a NIC of a VM.",
        "properties": {
          "externalIp": {
            "description": "The external IP to define in the NIC.",
            "type": "string"
          },
          "internalIp": {
            "description": "The internal IP to define in the NIC. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.",
            "type": "string"
          },
          "network": {
            "description": "The network to connect the NIC to.",
            "type": "string"
          },
          "subnetwork": {
            "description": "The subnetwork to connect the NIC to.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TargetVMDetails": {
        "deprecated": true,
        "description": "TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.",
        "properties": {
          "appliedLicense": {
            "$ref": "#/$defs/AppliedLicense"
          },
          "bootOption": {
            "description": "Output only. The VM Boot Option, as set in the source VM.",
            "enum": [
              "BOOT_OPTION_UNSPECIFIED",
              "EFI",
              "BIOS"
            ],
            "readOnly": true,
            "type": "string"
          },
          "computeScheduling": {
            "$ref": "#/$defs/ComputeScheduling"
          },
          "diskType": {
            "description": "The disk type to use in the VM.",
            "enum": [
              "DISK_TYPE_UNSPECIFIED",
              "STANDARD",
              "BALANCED",
              "SSD"
            ],
            "type": "string"
          },
          "externalIp": {
            "description": "The external IP to define in the VM.",
            "type": "string"
          },
          "internalIp": {
            "description": "The internal IP to define in the VM. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of labels to associate with the VM.",
            "type": "object"
          },
          "licenseType": {
            "description": "The license type to use in OS adaptation.",
            "enum": [
              "DEFAULT",
              "PAYG",
              "BYOL"
            ],
            "type": "string"
          },
          "machineType": {
            "description": "The machine type to create the VM with.",
            "type": "string"
          },
          "machineTypeSeries": {
            "description": "The machine type series to create the VM with.",
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The metadata key/value pairs to assign to the VM.",
            "type": "object"
          },
          "name": {
            "description": "The name of the VM to create.",
            "type": "string"
          },
          "network": {
            "description": "The network to connect the VM to.",
            "type": "string"
          },
          "networkInterfaces": {
            "description": "List of NICs connected to this VM.",
            "items": {
              "$ref": "#/$defs/NetworkInterface"
            },
            "type": "array"
          },
          "networkTags": {
            "description": "A list of network tags to associate with the VM.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "project": {
            "deprecated": true,
            "description": "Output only. The project in which to create the VM.",
            "readOnly": true,
            "type": "string"
          },
          "secureBoot": {
            "description": "Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.",
            "type": "boolean"
          },
          "serviceAccount": {
            "description": "The service account to associate the VM with.",
            "type": "string"
          },
          "subnetwork": {
            "description": "The subnetwork to connect the VM to.",
            "type": "string"
          },
          "targetProject": {
            "description": "The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.",
            "type": "string"
          },
          "zone": {
            "description": "The zone in which to create the VM.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CloneStep": {
        "description": "CloneStep holds information about the clone step progress.",
        "properties": {
          "adaptingOs": {
            "$ref": "#/$defs/AdaptingOSStep"
          },
          "endTime": {
            "description": "The time the step has ended.",
            "format": "google-datetime",
            "type": "string"
          },
          "instantiatingMigratedVm": {
            "$ref": "#/$defs/InstantiatingMigratedVMStep"
          },
          "preparingVmDisks": {
            "$ref": "#/$defs/PreparingVMDisksStep"
          },
          "startTime": {
            "description": "The time the step has started.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdaptingOSStep": {
        "description": "AdaptingOSStep contains specific step details.",
        "properties": {},
        "type": "object"
      },
      "InstantiatingMigratedVMStep": {
        "description": "InstantiatingMigratedVMStep contains specific step details.",
        "properties": {},
        "type": "object"
      },
      "PreparingVMDisksStep": {
        "description": "PreparingVMDisksStep contains specific step details.",
        "properties": {},
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://vmmigration.googleapis.com//v1alpha1/{parent}/cloneJobs{?cloneJobId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
