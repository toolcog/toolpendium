{
  "name": "eventarc_projects_locations_triggers_patch",
  "description": "Update a single trigger.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The resource name of the trigger. Must be unique within the location of the project and must be in `projects/{project}/locations/{location}/triggers/{trigger}` format."
      },
      "allowMissing": {
        "type": "boolean",
        "description": "If set to true, and the trigger is not found, a new trigger will be created. In this situation, `update_mask` is ignored."
      },
      "updateMask": {
        "type": "string",
        "description": "The fields to be updated; only fields explicitly provided are updated. If no field mask is provided, all provided fields in the request are updated. To update all fields, provide a field mask of \"*\"."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Optional. If set, validate the request and preview the review, but do not post it."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Trigger"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "Trigger": {
        "description": "A representation of the trigger resource.",
        "properties": {
          "channel": {
            "description": "Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.",
            "type": "string"
          },
          "conditions": {
            "additionalProperties": {
              "$ref": "#/$defs/StateCondition"
            },
            "description": "Output only. The reason(s) why a trigger is in FAILED state.",
            "readOnly": true,
            "type": "object"
          },
          "createTime": {
            "description": "Output only. The creation time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "destination": {
            "$ref": "#/$defs/Destination"
          },
          "etag": {
            "description": "Output only. This checksum is computed by the server based on the value of other fields, and might be sent only on create requests to ensure that the client has an up-to-date value before proceeding.",
            "readOnly": true,
            "type": "string"
          },
          "eventDataContentType": {
            "description": "Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data field. This is set to `application/json` if the value is not defined.",
            "type": "string"
          },
          "eventFilters": {
            "description": "Required. Unordered list. The list of filters that applies to event attributes. Only events that match all the provided filters are sent to the destination.",
            "items": {
              "$ref": "#/$defs/EventFilter"
            },
            "type": "array"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. User labels attached to the triggers that can be used to group resources.",
            "type": "object"
          },
          "name": {
            "description": "Required. The resource name of the trigger. Must be unique within the location of the project and must be in `projects/{project}/locations/{location}/triggers/{trigger}` format.",
            "type": "string"
          },
          "serviceAccount": {
            "description": "Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The `iam.serviceAccounts.actAs` permission must be granted on the service account to allow a principal to impersonate the service account. For more information, see the [Roles and permissions](/eventarc/docs/all-roles-permissions) page specific to the trigger destination.",
            "type": "string"
          },
          "transport": {
            "$ref": "#/$defs/Transport"
          },
          "uid": {
            "description": "Output only. Server-assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The last-modified time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "StateCondition": {
        "description": "A condition that is part of the trigger state computation.",
        "properties": {
          "code": {
            "description": "The canonical code of the condition.",
            "enum": [
              "OK",
              "CANCELLED",
              "UNKNOWN",
              "INVALID_ARGUMENT",
              "DEADLINE_EXCEEDED",
              "NOT_FOUND",
              "ALREADY_EXISTS",
              "PERMISSION_DENIED",
              "UNAUTHENTICATED",
              "RESOURCE_EXHAUSTED",
              "FAILED_PRECONDITION",
              "ABORTED",
              "OUT_OF_RANGE",
              "UNIMPLEMENTED",
              "INTERNAL",
              "UNAVAILABLE",
              "DATA_LOSS"
            ],
            "type": "string"
          },
          "message": {
            "description": "Human-readable message.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Destination": {
        "description": "Represents a target of an invocation over HTTP.",
        "properties": {
          "cloudFunction": {
            "description": "The Cloud Function resource name. Cloud Functions V1 and V2 are supported. Format: `projects/{project}/locations/{location}/functions/{function}` This is a read-only field. Creating Cloud Functions V1/V2 triggers is only supported via the Cloud Functions product. An error will be returned if the user sets this value.",
            "type": "string"
          },
          "cloudRun": {
            "$ref": "#/$defs/CloudRun"
          },
          "gke": {
            "$ref": "#/$defs/GKE"
          },
          "httpEndpoint": {
            "$ref": "#/$defs/HttpEndpoint"
          },
          "networkConfig": {
            "$ref": "#/$defs/NetworkConfig"
          },
          "workflow": {
            "description": "The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CloudRun": {
        "description": "Represents a Cloud Run destination.",
        "properties": {
          "path": {
            "description": "Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: \"/route\", \"route\", \"route/subroute\".",
            "type": "string"
          },
          "region": {
            "description": "Required. The region the Cloud Run service is deployed in.",
            "type": "string"
          },
          "service": {
            "description": "Required. The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project as the trigger object can be addressed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GKE": {
        "description": "Represents a GKE destination.",
        "properties": {
          "cluster": {
            "description": "Required. The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.",
            "type": "string"
          },
          "location": {
            "description": "Required. The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.",
            "type": "string"
          },
          "namespace": {
            "description": "Required. The namespace the GKE service is running in.",
            "type": "string"
          },
          "path": {
            "description": "Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: \"/route\", \"route\", \"route/subroute\".",
            "type": "string"
          },
          "service": {
            "description": "Required. Name of the GKE service.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpEndpoint": {
        "description": "Represents a HTTP endpoint destination.",
        "properties": {
          "uri": {
            "description": "Required. The URI of the HTTP enpdoint. The value must be a RFC2396 URI string. Examples: `http://10.10.10.8:80/route`, `http://svc.us-central1.p.local:8080/`. Only HTTP and HTTPS protocols are supported. The host can be either a static IP addressable from the VPC specified by the network config, or an internal DNS hostname of the service resolvable via Cloud DNS.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkConfig": {
        "description": "Represents a network config to be used for destination resolution and connectivity.",
        "properties": {
          "networkAttachment": {
            "description": "Required. Name of the NetworkAttachment that allows access to the destination VPC. Format: `projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventFilter": {
        "description": "Filters events based on exact matches on the CloudEvents attributes.",
        "properties": {
          "attribute": {
            "description": "Required. The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. You can [retrieve a specific provider's supported event types](/eventarc/docs/list-providers#describe-provider). All triggers MUST provide a filter for the 'type' attribute.",
            "type": "string"
          },
          "operator": {
            "description": "Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The allowed values are `path_pattern` and `match-path-pattern`. `path_pattern` is only allowed for GCFv1 triggers.",
            "type": "string"
          },
          "value": {
            "description": "Required. The value for the attribute.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Transport": {
        "description": "Represents the transport intermediaries created for the trigger to deliver events.",
        "properties": {
          "pubsub": {
            "$ref": "#/$defs/Pubsub"
          }
        },
        "type": "object"
      },
      "Pubsub": {
        "description": "Represents a Pub/Sub transport.",
        "properties": {
          "subscription": {
            "description": "Output only. The name of the Pub/Sub subscription created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.",
            "readOnly": true,
            "type": "string"
          },
          "topic": {
            "description": "Optional. The name of the Pub/Sub topic created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing topic for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished`. The topic you provide here is not deleted by Eventarc at trigger deletion.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://eventarc.googleapis.com//v1/{name}{?allowMissing,updateMask,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
