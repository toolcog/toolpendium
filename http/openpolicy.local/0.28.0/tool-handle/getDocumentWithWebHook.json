{
  "name": "getDocumentWithWebHook",
  "description": "The example given here assumes you have created a policy (with `PUT /v1/policies/{path}`), such as:\n\n  ```yaml\n  package opa.examples\n  import input.example.flag\n  allow_request { flag == true }\n  ```\n\nThe server will return a *not found* (404) response if the requested document is missing or undefined.\n",
  "parameters": {
    "type": "object",
    "properties": {
      "pretty": {
        "type": "boolean",
        "description": "If true, response will be in a human-readable format."
      },
      "path": {
        "type": "string",
        "description": "A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404."
      }
    },
    "required": [
      "path"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://openpolicy.local/v0/data/{path}{?pretty}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**result**",
            [
              "**provenance**",
              {
                "$ul": [
                  "**build_commit**: The Git commit id of this OPA build.",
                  "**build_hostname**: The hostname where this instance was built.",
                  "**build_timestamp**: When this OPA instance was built (in [ISO8601 format](https://www.w3.org/TR/NOTE-datetime))",
                  "**bundles**: A set of key-value pairs describing each bundle activated on the server.",
                  "**version**: The version of this OPA instance"
                ]
              }
            ],
            [
              "**metrics**",
              {
                "$ul": [
                  "**counter_server_query_cache_hit**: *Description is forthcoming*",
                  "**timer_query_compile_stage_build_comprehension_index_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_query_compile_stage_check_safety_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_query_compile_stage_check_types_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_query_compile_stage_check_undefined_funcs_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_query_compile_stage_check_unsafe_builtins_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_query_compile_stage_resolve_refs_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_query_compile_stage_rewrite_comprehension_terms_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_query_compile_stage_rewrite_dynamic_terms_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_query_compile_stage_rewrite_expr_terms_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_query_compile_stage_rewrite_local_vars_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_query_compile_stage_rewrite_to_capture_value_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_query_compile_stage_rewrite_with_values_ns**: (Only returned if `instrument` is true.) *Description is forthcoming*",
                  "**timer_rego_input_parse_ns**: Time taken (in nanonseconds) to parse the input",
                  "**timer_rego_module_compile_ns**: Time taken (in nanonseconds) to compile the loaded policy modules",
                  "**timer_rego_module_parse_ns**: Time taken (in nanoseconds) to parse the input policy module",
                  "**timer_rego_query_compile_ns**: Time taken (in nanoseconds) to compile the query",
                  "**timer_rego_query_eval_ns**: Time taken (in nanonseconds) to evaluate the query",
                  "**timer_rego_query_parse_ns**: Time taken (in nanoseconds) to parse the query",
                  "**timer_server_handler_ns**: Time taken (in nanoseconds) to handle the API request",
                  "**timer_server_read_bytes_ns**: *Description is forthcoming*"
                ]
              }
            ],
            "**explanation**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: The error code name",
            "**errors**: Errors that may have been generated during the parse, compile, or installation of a policy module",
            "**message**: The description of the error"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: The error code name",
            "**message**: The description of the error (including the name of any undefined policy module)"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: The error code name",
            "**errors**: Errors that may have been generated during the parse, compile, or installation of a policy module",
            "**message**: The description of the error"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
