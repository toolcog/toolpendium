{
  "name": "Update_project_settings",
  "description": "",
  "parameters": {
    "type": "object",
    "properties": {
      "orgId": {
        "type": "string",
        "description": "Automatically added"
      },
      "projectId": {
        "type": "string",
        "description": "Automatically added"
      },
      "body": {
        "example": {
          "autoDepUpgradeEnabled": false,
          "autoDepUpgradeIgnoredDependencies": [
            "tap",
            "ava"
          ],
          "autoDepUpgradeLimit": 2,
          "autoDepUpgradeMinAge": 21,
          "autoRemediationPrs": {
            "backlogPrsEnabled": false,
            "freshPrsEnabled": true,
            "usePatchRemediation": false
          },
          "pullRequestAssignment": {
            "assignees": [
              "username"
            ],
            "enabled": true,
            "type": "manual"
          },
          "pullRequestFailOnAnyVulns": false,
          "pullRequestFailOnlyForHighSeverity": true,
          "pullRequestTestEnabled": true
        },
        "properties": {
          "autoDepUpgradeEnabled": {
            "description": "If set to `true`, Snyk will raise dependency upgrade PRs automatically.",
            "type": "boolean"
          },
          "autoDepUpgradeIgnoredDependencies": {
            "description": "An array of comma-separated strings with names of dependencies you wish Snyk to ignore to upgrade.",
            "items": {},
            "type": "array"
          },
          "autoDepUpgradeLimit": {
            "description": "The limit on auto dependency upgrade PRs.",
            "type": "number"
          },
          "autoDepUpgradeMinAge": {
            "description": "The age (in days) that an automatic dependency check is valid for",
            "type": "number"
          },
          "autoRemediationPrs": {
            "description": "Defines automatic remediation policies",
            "properties": {
              "backlogPrsEnabled": {
                "description": "If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified",
                "type": "boolean"
              },
              "freshPrsEnabled": {
                "description": "If true, allows automatic remediation of prioritized backlog issues",
                "type": "boolean"
              },
              "usePatchRemediation": {
                "description": "If true, allows using patched remediation",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "pullRequestAssignment": {
            "description": "assign Snyk pull requests",
            "properties": {
              "assignees": {
                "description": "an array of usernames that have contributed to the organization's project(s).",
                "items": {},
                "type": "array"
              },
              "enabled": {
                "description": "if the organization's project(s) will assign Snyk pull requests.",
                "type": "boolean"
              },
              "type": {
                "description": "a string representing the type of assignment your projects require.",
                "enum": [
                  "auto",
                  "manual"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "pullRequestFailOnAnyVulns": {
            "description": "If set to `true`, fail Snyk Test if the repo has any vulnerabilities. Otherwise, fail only when the PR is adding a vulnerable dependency.",
            "type": "boolean"
          },
          "pullRequestFailOnlyForHighSeverity": {
            "description": "If set to `true`, fail Snyk Test only for high and critical severity vulnerabilities",
            "type": "boolean"
          },
          "pullRequestTestEnabled": {
            "description": "If set to `true`, Snyk Test checks PRs for vulnerabilities.:cq",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    },
    "required": [
      "orgId",
      "projectId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://api.snyk.io/v1/org/{orgId}/project/{projectId}/settings"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**autoDepUpgradeEnabled**: If set to `true`, Snyk will raise dependency upgrade PRs automatically.",
            "**autoDepUpgradeIgnoredDependencies**: An array of comma-separated strings with names of dependencies you wish Snyk to ignore to upgrade.",
            "**autoDepUpgradeLimit**: The limit on auto dependency upgrade PRs.",
            "**autoDepUpgradeMinAge**: The age (in days) that an automatic dependency check is valid for",
            [
              "**autoRemediationPrs**: Defines automatic remediation policies",
              {
                "$ul": [
                  "**backlogPrsEnabled**: If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified",
                  "**freshPrsEnabled**: If true, allows automatic remediation of prioritized backlog issues",
                  "**usePatchRemediation**: If true, allows using patched remediation"
                ]
              }
            ],
            [
              "**pullRequestAssignment**: assign Snyk pull requests",
              {
                "$ul": [
                  "**assignees**: an array of usernames that have contributed to the organization's project(s).",
                  "**enabled**: if the organization's project(s) will assign Snyk pull requests.",
                  "**type**: a string representing the type of assignment your projects require."
                ]
              }
            ],
            "**pullRequestFailOnAnyVulns**: If set to `true`, fail Snyk Test if the repo has any vulnerabilities. Otherwise, fail only when the PR is adding a vulnerable dependency.",
            "**pullRequestFailOnlyForHighSeverity**: If set to `true`, fail Snyk Test only for high and critical severity vulnerabilities",
            "**pullRequestTestEnabled**: If set to `true`, Snyk Test checks PRs for vulnerabilities.:cq"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
