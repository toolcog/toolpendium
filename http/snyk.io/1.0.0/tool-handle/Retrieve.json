{
  "name": "Retrieve",
  "description": "",
  "parameters": {
    "type": "object",
    "properties": {
      "orgId": {
        "type": "string",
        "description": "The organization ID. The `API_KEY` must have admin access to this organization."
      },
      "integrationId": {
        "type": "string",
        "description": "The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured."
      }
    },
    "required": [
      "orgId",
      "integrationId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api.snyk.io/v1/org/{orgId}/integrations/{integrationId}/settings"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**autoDepUpgradeEnabled**: Defines if the functionality is enabled",
            "**autoDepUpgradeIgnoredDependencies**: A list of strings defining what dependencies should be ignored",
            "**autoDepUpgradeLimit**: A limit on how many automatic dependency upgrade PRs can be opened simultaneously",
            "**autoDepUpgradeMinAge**: The age (in days) that an automatic dependency check is valid for",
            [
              "**autoRemediationPrs**: Defines automatic remediation policies",
              {
                "$ul": [
                  "**backlogPrsEnabled**: If true, allows automatic remediation of prioritized backlog issues",
                  "**freshPrsEnabled**: If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified",
                  "**usePatchRemediation**: If true, allows using patched remediation"
                ]
              }
            ],
            "**dockerfileSCMEnabled**: If true, will automatically detect and scan Dockerfiles in your Git repositories, surface base image vulnerabilities and recommend possible fixes",
            [
              "**manualRemediationPrs**: Defines manual remediation policies",
              {
                "$ul": [
                  "**usePatchRemediation**: If true, allows using patched remediation"
                ]
              }
            ],
            [
              "**pullRequestAssignment**: assign Snyk pull requests",
              {
                "$ul": [
                  "**assignees**: an array of usernames that have contributed to the organization's project(s).",
                  "**enabled**: if the organization's project(s) will assign Snyk pull requests.",
                  "**type**: a string representing the type of assignment your projects require."
                ]
              }
            ],
            "**pullRequestFailOnAnyVulns**: If an opened PR should fail to be validated if any vulnerable dependencies have been detected",
            "**pullRequestFailOnlyForHighSeverity**: If an opened PR only should fail its validation if any dependencies are marked as being of high severity",
            "**pullRequestTestEnabled**: If opened PRs should be tested"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
