{
  "name": "get",
  "description": "Retrieve details for the specified Subscription",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Shopper-Id": {
        "type": "string",
        "description": "Shopper ID to be operated on, if different from JWT"
      },
      "X-Market-Id": {
        "default": "en-US",
        "type": "string",
        "description": "Unique identifier of the Market in which the request is happening"
      },
      "subscriptionId": {
        "type": "string",
        "description": "Unique identifier of the Subscription to retrieve"
      }
    },
    "required": [
      "subscriptionId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "//api.ote-godaddy.com/v1/subscriptions/{subscriptionId}"
    },
    "headers": {
      "X-Shopper-Id": {
        "$": "X-Shopper-Id"
      },
      "X-Market-Id": {
        "$": "X-Market-Id"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**addons**: An array of additional products that have been purchased to augment this Subscription",
            [
              "**billing**",
              {
                "$ul": [
                  "**commitment**: The financial commitment the customer has in the product",
                  "**pastDueTypes**: The types of charges that are past due when `status` is PAST_DUE",
                  "**renewAt**: The point in time after which the Subscription will bill for automatic renewal",
                  "**status**: Whether payments are past due"
                ]
              }
            ],
            "**cancelable**: Whether or not the Subscription is allowed to be canceled",
            "**createdAt**: When the Subscription was created",
            "**expiresAt**: When the Subscription will expire",
            "**label**: A human readable description of this Subscription",
            "**launchUrl**: The url to use or manage this Subscription's active product",
            "**paymentProfileId**: Unique identifier of the payment profile that will be used to automatically renew this Subscription",
            "**priceLocked**: Whether the renewal price will be based from the list price or a locked-in price for this shopper",
            [
              "**product**",
              {
                "$ul": [
                  "**label**: A human readable description of the Product that is subscribed",
                  "**namespace**: Grouping of related Subscriptions",
                  "**pfid**: Unique identifier of the Product that is subscribed",
                  "**productGroupKey**: Primary key of a grouping of related Subscriptions",
                  "**renewalPeriod**: The number of `renewalPeriodUnits` that will be added by the `renewalPfid`",
                  "**renewalPeriodUnit**: The unit of time that `renewalPeriod` is measured in",
                  "**renewalPfid**: Unique identifier of the renewal Product",
                  "**supportBillOn**: Whether the product supports the `billOn` option on the renewal endpoint"
                ]
              }
            ],
            [
              "**relations**",
              {
                "$ul": [
                  "**children**: A set of related Subscriptions that will be canceled automatically if this Subscription is canceled",
                  "**parent**: Unique identifier of this Subscription's parent"
                ]
              }
            ],
            "**renewAuto**: Whether or not the Subscription is set to be automatically renewed via the billing agent",
            "**renewable**: Whether or not the Subscription is allowed to be renewed",
            "**status**: Whether the Subscription is active or the specific non-active state",
            "**subscriptionId**: Unique identifier of the Subscription",
            "**upgradeable**: Whether or not the Subscription is allowed to be upgraded"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: Short identifier for the error, suitable for indicating the specific error within client code",
            "**fields**: List of the specific fields, and the errors found with their contents",
            "**message**: Human-readable, English description of the error"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: Short identifier for the error, suitable for indicating the specific error within client code",
            "**fields**: List of the specific fields, and the errors found with their contents",
            "**message**: Human-readable, English description of the error"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: Short identifier for the error, suitable for indicating the specific error within client code",
            "**fields**: List of the specific fields, and the errors found with their contents",
            "**message**: Human-readable, English description of the error"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: Short identifier for the error, suitable for indicating the specific error within client code",
            "**fields**: List of the specific fields, and the errors found with their contents",
            "**message**: Human-readable, English description of the error"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "422": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: Short identifier for the error, suitable for indicating the specific error within client code",
            "**fields**: List of the specific fields, and the errors found with their contents",
            "**message**: Human-readable, English description of the error"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "429": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: Short identifier for the error, suitable for indicating the specific error within client code",
            "**fields**: List of the specific fields, and the errors found with their contents",
            "**message**: Human-readable, English description of the error",
            "**retryAfterSec**: Number of seconds to wait before attempting a similar request"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: Short identifier for the error, suitable for indicating the specific error within client code",
            "**fields**: List of the specific fields, and the errors found with their contents",
            "**message**: Human-readable, English description of the error"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "504": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: Short identifier for the error, suitable for indicating the specific error within client code",
            "**fields**: List of the specific fields, and the errors found with their contents",
            "**message**: Human-readable, English description of the error"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
