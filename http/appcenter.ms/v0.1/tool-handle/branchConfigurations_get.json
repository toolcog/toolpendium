{
  "name": "branchConfigurations_get",
  "description": "Gets the branch configuration",
  "parameters": {
    "type": "object",
    "properties": {
      "branch": {
        "type": "string",
        "description": "The branch name"
      },
      "owner_name": {
        "type": "string",
        "description": "The name of the owner"
      },
      "app_name": {
        "type": "string",
        "description": "The name of the application"
      }
    },
    "required": [
      "branch",
      "owner_name",
      "app_name"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api.appcenter.ms/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The branch build configuration",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**artifactVersioning**: The versioning configuration for artifacts built for this branch",
              {
                "$ul": [
                  "**buildNumberFormat**"
                ]
              }
            ],
            "**badgeIsEnabled**",
            "**cloneFromBranch**: A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.",
            "**signed**",
            "**testsEnabled**",
            [
              "**toolsets**: The branch build configuration for each toolset",
              {
                "$ul": [
                  [
                    "**android**: Build configuration for Android projects",
                    {
                      "$ul": [
                        "**automaticSigning**: Whether to apply automatic signing or not",
                        "**buildVariant**: The Android build variant to build",
                        "**gradleWrapperPath**: Path to the Gradle wrapper script",
                        "**isRoot**: Whether it is the root module or not",
                        "**keyAlias**: The key alias",
                        "**keyPassword**: The key password",
                        "**keystoreEncoded**: The keystore encoded value",
                        "**keystoreFilename**: The name of the keystore file",
                        "**keystorePassword**: The password of the keystore",
                        "**module**: The Gradle module to build",
                        "**runLint**: Whether to run lint checks during the build (default)",
                        "**runTests**: Whether to run unit tests during the build (default) (default: true)"
                      ]
                    }
                  ],
                  [
                    "**javascript**: Build configuration when React Native, or other JavaScript tech, is part of the build steps",
                    {
                      "$ul": [
                        "**packageJsonPath**: Path to package.json file for the main project, e.g. \"package.json\" or \"myapp/package.json\"",
                        "**reactNativeVersion**: Version of React Native from package.json files",
                        "**runTests**: Whether to run Jest unit tests, via npm test, during the build"
                      ]
                    }
                  ],
                  [
                    "**xamarin**: Build configuration for Xamarin projects",
                    {
                      "$ul": [
                        "**args**",
                        "**configuration**",
                        "**isSimBuild**",
                        "**monoVersion**",
                        "**p12File**",
                        "**p12Pwd**",
                        "**provProfile**",
                        "**sdkBundle**",
                        "**slnPath**",
                        "**symlink**: Symlink of the SDK Bundle and Mono installation."
                      ]
                    }
                  ],
                  [
                    "**xcode**: Build configuration when Xcode is part of the build steps",
                    {
                      "$ul": [
                        "**appExtensionProvisioningProfileFiles**",
                        "**archiveConfiguration**: The build configuration of the target to archive",
                        "**automaticSigning**",
                        "**cartfilePath**: Path to Carthage file, if present",
                        "**certificateEncoded**",
                        "**certificateFileId**",
                        "**certificateFilename**",
                        "**certificatePassword**",
                        "**certificateUploadId**",
                        "**forceLegacyBuildSystem**: Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.",
                        "**podfilePath**: Path to CococaPods file, if present",
                        "**projectOrWorkspacePath**: Xcode project/workspace path",
                        "**provisioningProfileEncoded**",
                        "**provisioningProfileFileId**",
                        "**provisioningProfileFilename**",
                        "**provisioningProfileUploadId**",
                        "**scheme**",
                        "**targetToArchive**: The target id of the selected scheme to archive",
                        "**teamId**",
                        "**xcodeProjectSha**: The selected pbxproject hash to the repositroy",
                        "**xcodeVersion**: Xcode version used to build. Available versions can be found in \"/xcode_versions\" API. Default is latest stable version, at the time when the configuration is set."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**trigger**",
            "**id**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**",
            "**id**",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
