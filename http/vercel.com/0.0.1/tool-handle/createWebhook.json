{
  "name": "createWebhook",
  "description": "Creates a webhook",
  "parameters": {
    "type": "object",
    "properties": {
      "teamId": {
        "type": "string",
        "description": "The Team identifier or slug to perform the request on behalf of."
      },
      "body": {
        "additionalProperties": false,
        "properties": {
          "events": {
            "items": {
              "enum": [
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.DomainCreate",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.DeploymentCreate",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.DeploymentErro",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.DeploymentCancele",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.DeploymentSucceede",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.DeploymentRead",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.DeploymentCheckRerequeste",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.IntegrationConfigurationPermissionUpgrade",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.IntegrationConfigurationRemove",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.IntegrationConfigurationScopeChangeConfirme",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.ProjectCreate",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.ProjectRemove",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyDeploymentChecksComplete",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyDeploymentRead",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyDeploymentPrepare",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyDeploymentErro",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyDeploymentCheckRerequeste",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyDeploymentCancele",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyProjectCreate",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyProjectRemove",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyDomainCreate",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyDeploymen",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyIntegrationConfigurationPermissionUpdate",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyIntegrationConfigurationRemove",
                "mport(\"/vercel/path0/utils/webhooks/webhooks/types\").WebhookName.LegacyIntegrationConfigurationScopeChangeConfirme"
              ],
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "projectIds": {
            "items": {
              "pattern": "^[a-zA-z0-9_]+$",
              "type": "string"
            },
            "maxItems": 50,
            "minItems": 1,
            "type": "array"
          },
          "url": {
            "format": "uri",
            "pattern": "^https?://",
            "type": "string"
          }
        },
        "required": [
          "url",
          "events"
        ],
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://api.vercel.com/v1/webhooks{?teamId}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**createdAt**: A number containing the date when the webhook was created in in milliseconds",
            "**events**: The webhooks events",
            "**id**: The webhook id",
            "**ownerId**: The unique ID of the team the webhook belongs to",
            "**projectIds**: The ID of the projects the webhook is associated with",
            "**secret**: The webhook secret used to sign the payload",
            "**updatedAt**: A number containing the date when the webhook was updated in in milliseconds",
            "**url**: A string with the URL of the webhook"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
