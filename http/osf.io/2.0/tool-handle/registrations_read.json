{
  "name": "registrations_read",
  "description": "Retrieve the details of a given registration.\n#### Permissions\nOnly project contributors may retrieve the details of a registration that is embargoed, or has not yet been made public. Attempting to retrieve a private registration for which you are not a contributor will result in a **403 Forbidden** response.\n\nAuthentication is not required to view the details of a public registration, as public registrations give read-only access to everyone.\n#### Registrations\nA registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.\n\nRegistrations can be made public immediately or embargoed for up to 4 years.\n\n#### Withdrawals\nRegistrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
  "parameters": {
    "type": "object",
    "properties": {
      "registration_id": {
        "type": "string",
        "description": "The unique identifier of the registration."
      }
    },
    "required": [
      "registration_id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api.test.osf.io/v2/registrations/{registration_id}/"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Registration"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**attributes**: The properties of the registration entity.",
              {
                "$ul": [
                  "**category**: The category of the registered node.",
                  "**collection**: Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions.",
                  "**current_user_can_comment**: Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors.",
                  "**current_user_permissions**: A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\".",
                  "**date_created**: The time at which the registered node was created, as an iso8601 formatted timestamp.",
                  "**date_modified**: The time at which the registered node was last modified, as an iso8601 formatted timestamp.",
                  "**date_registered**: The time at which this registration was created, as an iso8601 formatted timestamp.",
                  "**date_withdrawn**: The time at which this registration was withdrawn, as an iso8601 formatted timestamp.",
                  "**description**: The description of the registered node.",
                  "**embargo_end_date**: The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp.",
                  "**fork**: Whether or not this registration represents a fork of another node.",
                  "**node_license**: A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types).",
                  "**pending_embargo_approval**: Whether or not the embargo associated with this registration is pending approval from project administrators.",
                  "**pending_registration_approval**: Whether or not the registration is pending approval from project administrators.",
                  "**pending_withdrawal**: Whether or not the registration is pending approval for withdrawal from project administrators.",
                  "**preprint**: Whether or not a preprint has been created from this node, or if this node was created for a preprint.",
                  "**public**: Whether or not the registration is publicly visible.",
                  "**registered_meta**: A dictionary with supplemental registration questions and responses.",
                  "**registration**: Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions.",
                  "**registration_supplement**: The title of the registration schema this registration conforms to.",
                  "**tags**: A list of strings that describe the registered node.",
                  "**template_from**: The unique ID of the node from which the registered node was templated, if the registered node was created from a template.",
                  "**title**: The title of the registered node.",
                  "**withdrawal_justification**: The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal.",
                  "**withdrawn**: Whether or not this registration has been withdrawn."
                ]
              }
            ],
            "**id**: The unique identifier of the registration.",
            [
              "**links**: URLs to alternative representations of the registrations entity.",
              {
                "$ul": [
                  "**html**: A link to the registration's page on the OSF.",
                  "**self**: A link to the canonical API endpoint of this registration."
                ]
              }
            ],
            [
              "**relationships**: URLs to other entities or entity collections that have a relationship to the registration entity.",
              {
                "$ul": [
                  "**affiliated_institutions**: A link to the list of institutions this registration is affiliated with.",
                  "**children**: A link to the list of the registered node's children (components).",
                  "**citation**: A link to the citation details of this registration.",
                  "**comments**: A link to the list of comments on this registration.",
                  "**contributors**: A link to the list of contributors on this registration.",
                  "**files**: A link to the list of storage providers that have been enabled on this registration.",
                  "**forks**: A link to the list of nodes that are forks of this registration.",
                  "**identifiers**: A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers).",
                  "**linked_nodes**: A link to the list of nodes that are linked to this registration.",
                  "**logs**: A link to the list of log actions pertaining to this registration.",
                  "**node_links**: A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead.",
                  "**parent**: A link to the node that is the direct parent of the current registration, if the current registration is a child registration.",
                  "**registered_by**: A link to the user that initiated this registration.",
                  "**registered_from**: A link to the node that this registration was registered from.",
                  "**registration_schema**: A link to the metaschema that this registration conforms to.",
                  "**root**: A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration.",
                  "**view_only_links**: A link to the list of view only links that have been created for this registration.",
                  "**wikis**: A link to the list of wiki pages for this registration."
                ]
              }
            ],
            "**type**: The type identifier of the registration entity (`registrations`)."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
