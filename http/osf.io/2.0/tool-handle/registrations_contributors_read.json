{
  "name": "registrations_contributors_read",
  "description": "Retrieves the details of a contributor on this registration.\n\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
  "parameters": {
    "type": "object",
    "properties": {
      "registration_id": {
        "type": "string",
        "description": "The unique identifier of the registration."
      },
      "user_id": {
        "type": "string",
        "description": "The unique identifier of the user."
      }
    },
    "required": [
      "registration_id",
      "user_id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api.test.osf.io/v2/registrations/{registration_id}/contributors/{user_id}/"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Contributor list"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**attributes**: The properties of the contributor entity.",
              {
                "$ul": [
                  "**bibliographic**: Whether or not the contributor will be included in citations for the node. The default value is true.",
                  "**index**: The position of this contributor in the list of project contributors and in project citations.",
                  "**permission**: The permission level of the contributor. The default value is 'write'.",
                  "**unregistered_contributor**: The assigned name of the contributor if the contributor has not yet claimed their account."
                ]
              }
            ],
            "**id**: The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}.",
            [
              "**links**: URLs to alternative representations of the contributor entity.",
              {
                "$ul": [
                  "**self**: A link to the the canonical API endpoint for the contributor."
                ]
              }
            ],
            [
              "**relationships**: URLs to other entities or entity collections that have a relationship to the contributor entity.",
              {
                "$ul": [
                  "**node**: A relationship to the node that was created for the preprint, or from which the preprint was created.",
                  "**user**: A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                ]
              }
            ],
            "**type**: The type identifier of the contributor entity (`contributors`)."
          ]
        },
        {
          "$each": "$.body.*",
          "$as": "item",
          "$block": [
            {
              "$h2": {
                "$": "$.item.id"
              }
            },
            {
              "$lang": "json",
              "$code": {
                "$encode": "json",
                "$indent": true,
                "$content": {
                  "$": "$.item"
                }
              }
            }
          ]
        }
      ]
    }
  }
}
