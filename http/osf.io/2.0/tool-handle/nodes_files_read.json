{
  "name": "nodes_files_read",
  "description": "Retrieves the details of a file attached to given node (project or component) for the given storage provider.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested file object, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
  "parameters": {
    "type": "object",
    "properties": {
      "node_id": {
        "type": "string",
        "description": "The unique identifier of the node."
      },
      "provider": {
        "type": "string",
        "description": "The unique identifier of the storage provider."
      },
      "path": {
        "type": "string",
        "description": "The unique identifier of the file path."
      }
    },
    "required": [
      "node_id",
      "provider",
      "path"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api.test.osf.io/v2/nodes/{node_id}/files/{provider}/{path}/"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "File"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**attributes**: The properties of the file entity.",
              {
                "$ul": [
                  "**checkout**: SOON TO BE DEPRECATED, see relationships checkout.",
                  "**current_user_can_comment**: Whether or not the current user is allowed to post comments.",
                  "**current_version**: Version number of the file.",
                  "**date_created**: The time at which the file was created, as an iso8601 formatted timestamp.",
                  "**date_modified**: The time at which the file was last modified, as an iso8601 formatted timestamp.",
                  "**delete_allowed**: Whether or not deletion of the file is allowed.",
                  "**extra**: Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count.",
                  "**guid**: Global unique identifier (GUID) for this file (if one has been assigned).",
                  "**kind**: The kind of files object it is (`file` or `folder`).",
                  "**last_touched**: The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files).",
                  "**materialized_path**: Unix-style path to the file relative to the provider root.",
                  "**name**: Name of the file",
                  "**path**: The unique identifier for this file entity for this project and storage provider.",
                  "**provider**: The id of the file provider (e.g., `osfstorage`)",
                  "**size**: Size of the file in bytes.",
                  "**tags**: A list of strings that describe this file, as entered by project contributors."
                ]
              }
            ],
            "**id**: The identifier of the file entity.",
            [
              "**links**: Links to alternative representations of the file entity.",
              {
                "$ul": [
                  "**delete**: The Waterbutler API route for file deletions.",
                  "**download**: The Waterbutler API route for file downloads.",
                  "**info**: A link to the page to view a file's information or a folder's contents.",
                  "**move**: The Waterbutler API route for file moves.",
                  "**new_folder**: The Waterbutler API route for creating a new subfolder (does not exist for files).",
                  "**self**: A link to the detail page for the file.",
                  "**upload**: The Waterbutler API route for file uploads."
                ]
              }
            ],
            [
              "**relationships**: Links to other entities or entity collections that have a relationship to the file entity.",
              {
                "$ul": [
                  "**checkout**: A link to the user who checked out the file.",
                  "**comments**: A link to the comments on the file.",
                  "**node**: A link to the node the file is on.",
                  "**versions**: A link to the versions of the file."
                ]
              }
            ],
            "**type**: The type identifier of the file entity (`files`)."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
