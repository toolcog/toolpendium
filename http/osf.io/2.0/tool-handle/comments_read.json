{
  "name": "comments_read",
  "description": "Retrieves the details of a comment\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested comment, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
  "parameters": {
    "type": "object",
    "properties": {
      "comment_id": {
        "type": "string",
        "description": "The unique identifier of the comment you wish to retrieve."
      }
    },
    "required": [
      "comment_id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api.test.osf.io/v2/comments/{comment_id}/"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Comment"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**attributes**: The properties of the comment entity.",
              {
                "$ul": [
                  "**can_edit**: Whether or not the current user has permission to edit this comment",
                  "**content**: The content of the comment.",
                  "**date_created**: The time at which the comment was created, as an iso8601 formatted timestamp.",
                  "**date_modified**: The time at which the comment was last modified, as an iso8601 formatted timestamp.",
                  "**deleted**: Whether or not the comment is deleted.",
                  "**has_children**: Whether or not the comment has replies.",
                  "**has_report**: Whether or not the comment the current user reported this as spam.",
                  "**is_abuse**: Whether or not the comment is flagged or confirmed spam.",
                  "**is_ham**: Whether or not an admin checked the legitimacy of this comment.",
                  "**modified**: Whether or not the comment has been edited.",
                  "**page**: The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`."
                ]
              }
            ],
            "**id**: The identifier of the comment entity.",
            [
              "**links**: URLs to alternative representations of the comment entity.",
              {
                "$ul": [
                  "**self**: A link to the detail page for the comment."
                ]
              }
            ],
            [
              "**relationships**: URLs to other entities or entity collections that have a relationship to the comment entity.",
              {
                "$ul": [
                  "**node**: A relationship to the node the comment is on.",
                  "**replies**: A relationship to the replies to the comment.",
                  "**reports**: A relationship to the reports connected to the comment.",
                  "**target**: A relationship to the target of the comment.",
                  "**user**: A relationship to the user who created the comment."
                ]
              }
            ],
            "**type**: The type identifier of the comment entity (`comments`)."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
