{
  "name": "search",
  "description": "Search cars for sale in UK",
  "parameters": {
    "type": "object",
    "properties": {
      "api_key": {
        "type": "string",
        "description": "The API Authentication Key. Mandatory with all API calls."
      },
      "append_api_key": {
        "default": false,
        "type": "boolean",
        "description": "Flag on whether to include api_key in response API urls (if any)"
      },
      "latitude": {
        "format": "double",
        "type": "number",
        "description": "Latitude component of location"
      },
      "longitude": {
        "format": "double",
        "type": "number",
        "description": "Longitude component of location"
      },
      "radius": {
        "format": "int32",
        "maximum": 7000,
        "minimum": 0,
        "type": "integer",
        "description": "Radius around the search location (Unit - Miles)"
      },
      "postal_code": {
        "type": "string",
        "description": "To filter listing on postal code around which they are listed"
      },
      "zip": {
        "type": "string",
        "description": "To filter listing on ZIP around which they are listed"
      },
      "car_type": {
        "enum": [
          "new",
          "used"
        ],
        "type": "string",
        "description": "Car type. Allowed values are - new / used"
      },
      "year": {
        "minLength": 4,
        "type": "string",
        "description": "To filter listing on their year"
      },
      "year_range": {
        "format": "string",
        "type": "string",
        "description": "Year range to filter listings with the year in the range given. Range to be given in the format - min-max e.g. 2019-2021"
      },
      "make": {
        "type": "string",
        "description": "To filter listings on their make"
      },
      "model": {
        "type": "string",
        "description": "To filter listings on their model"
      },
      "variant": {
        "type": "string",
        "description": "To filter listing on their variant"
      },
      "trim": {
        "type": "string",
        "description": "To filter listing on their trim"
      },
      "body_type": {
        "type": "string",
        "description": "To filter listing on their body type"
      },
      "ymmt": {
        "type": "string",
        "description": "Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe '|' character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - 'year|make||' or 'year|make|model' or '|make|model|' combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the 'vins' or 'taxonomy_vins' parameter to the search api instead the year|make|model|trim combinations."
      },
      "transmission": {
        "type": "string",
        "description": "To filter listing on their transmission"
      },
      "doors": {
        "format": "string",
        "type": "string",
        "description": "Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated"
      },
      "drivetrain": {
        "type": "string",
        "description": "To filter listing on their drivetrain"
      },
      "exterior_color": {
        "type": "string",
        "description": "Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated"
      },
      "interior_color": {
        "type": "string",
        "description": "Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated"
      },
      "engine": {
        "type": "string",
        "description": "To filter listing on their engine"
      },
      "miles_range": {
        "format": "string",
        "type": "string",
        "description": "Miles range to filter listings with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000"
      },
      "price_range": {
        "format": "string",
        "type": "string",
        "description": "Price range to filter listings with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000"
      },
      "msrp_range": {
        "format": "string",
        "type": "string",
        "description": "MSRP range to filter listings with the msrp in the range given. Range to be given in the format - min-max e.g. 1000-5000"
      },
      "sort_by": {
        "format": "string",
        "type": "string",
        "description": "Sort by field. Default sort field is distance from the given point"
      },
      "sort_order": {
        "enum": [
          "asc",
          "desc",
          "ASC",
          "DESC"
        ],
        "format": "string",
        "type": "string",
        "description": "Sort order - asc or desc. Default sort order is asc"
      },
      "rows": {
        "default": 10,
        "format": "int32",
        "minimum": 0,
        "type": "integer",
        "description": "Number of results to return. Default is 10. Max is 50"
      },
      "start": {
        "default": 0,
        "format": "int32",
        "minimum": 0,
        "type": "integer",
        "description": "Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows"
      },
      "msa_code": {
        "type": "string",
        "description": "To filter listing on msa code in which they are listed"
      },
      "facets": {
        "type": "string",
        "description": "The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond."
      },
      "range_facets": {
        "type": "string",
        "description": "The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond."
      },
      "facet_sort": {
        "default": "count",
        "enum": [
          "count",
          "index"
        ],
        "type": "string",
        "description": "Control sort order of facets with this parameter with default sort being on count, Other available sort is alphabetical sort, which can be obtained by using index as value for this param"
      },
      "stats": {
        "type": "string",
        "description": "The list of fields for which stats need to be generated based on the matching listings for the search criteria. The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond."
      },
      "country": {
        "default": "uk",
        "enum": [
          "uk",
          "england",
          "scotland",
          "northan ireland",
          "wales"
        ],
        "type": "string",
        "description": "To filter listing on Country in which they are listed"
      },
      "plot": {
        "type": "boolean",
        "description": "If plot has value true results in around 25k coordinates with limited fields to plot respective graph"
      },
      "nodedup": {
        "type": "boolean",
        "description": "If nodedup is set to true then API will give results without is_searchable i.e multiple listings for single vin"
      },
      "dedup": {
        "type": "boolean",
        "description": "If dedup is set to true then will give results with is_searchable irrespecive of dealer_id or source"
      },
      "county": {
        "type": "string",
        "description": "To filter listing on county in which they are listed"
      },
      "state": {
        "type": "string",
        "description": "To filter listing on State in which they are listed"
      },
      "city": {
        "type": "string",
        "description": "To filter listing on City in which they are listed"
      },
      "fuel_type": {
        "type": "string",
        "description": "To filter listing on their fuel type"
      },
      "stock_no": {
        "type": "string",
        "description": "To filter listing on their stock number on lot"
      },
      "dom_range": {
        "format": "string",
        "type": "string",
        "description": "Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50"
      },
      "dom_active_range": {
        "format": "string",
        "type": "string",
        "description": "Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50"
      },
      "dom_180_range": {
        "format": "string",
        "type": "string",
        "description": "Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50"
      },
      "last_seen_range": {
        "format": "string",
        "type": "string",
        "description": "Last seen date range to filter listings with the last seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623"
      },
      "first_seen_range": {
        "format": "string",
        "type": "string",
        "description": "First seen date range to filter listings with the first seen in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623"
      },
      "first_seen_at_source_range": {
        "format": "string",
        "type": "string",
        "description": "First seen at source date range to filter listings with the first seen at source in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623"
      },
      "first_seen_at_mc_range": {
        "format": "string",
        "type": "string",
        "description": "First seen at MC date range to filter listings with the first seen at MC in the range given. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623"
      },
      "last_seen_days": {
        "format": "string",
        "type": "string",
        "description": "Last seen days range to filter listings with the last seen in the range given. Range to be given in the format - min-max e.g. 25-12"
      },
      "first_seen_days": {
        "format": "string",
        "type": "string",
        "description": "First seen days range to filter listings with the first seen in the range given. Range to be given in the format - min-max e.g. 25-12"
      },
      "first_seen_at_source_days": {
        "format": "string",
        "type": "string",
        "description": "First seen at source days range to filter listings with the first seen at source in the range given. Range to be given in the format - min-max e.g. 25-12"
      },
      "first_seen_at_mc_days": {
        "format": "string",
        "type": "string",
        "description": "First seen at MC days range to filter listings with the first seen at MC in the range given. Range to be given in the format - min-max e.g. 25-12"
      },
      "co2_emissions": {
        "type": "string",
        "description": "CO2 emissions"
      },
      "insurance_group": {
        "type": "string",
        "description": "Insurance Group"
      },
      "vehicle_registration_mark": {
        "type": "string",
        "description": "Vehicle Registration Mark"
      },
      "vehicle_registration_date_range": {
        "format": "string",
        "type": "string",
        "description": "Vehicle registration date range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623"
      },
      "num_owners": {
        "format": "string",
        "type": "string",
        "description": "Number of owners. Range to be given in the format - min-max e.g. 1000-5000"
      },
      "inventory_count_range": {
        "format": "string",
        "type": "string",
        "description": "Inventory count range to filter listings with count of total listings in dealers inventory. Range to be given in the format - min-max e.g. 10-50"
      },
      "source": {
        "type": "string",
        "description": "To filter listing on their source only for widget requests"
      },
      "dealer_id": {
        "format": "string",
        "type": "string",
        "description": "Dealer id to filter the listings."
      },
      "exclude_sources": {
        "format": "string",
        "type": "string",
        "description": "A list of sources to exclude from result"
      },
      "exclude_dealer_ids": {
        "format": "string",
        "type": "string",
        "description": "A list of dealer ids to exclude from result"
      },
      "in_transit": {
        "enum": [
          "true",
          "false"
        ],
        "type": "string",
        "description": "A boolean to filter in transit vehicles"
      },
      "include_non_vin_listings": {
        "default": false,
        "type": "boolean",
        "description": "To include non vin listings. Default is false"
      },
      "cylinders": {
        "type": "string",
        "description": "To filter listing on their cylinders"
      },
      "photo_links": {
        "type": "boolean",
        "description": "A boolean indicating whether to include only those listings that have photo_links in search results, And discard those that don't have them"
      },
      "photo_links_cached": {
        "type": "boolean",
        "description": "A boolean indicating whether to include only those listings that have photo_links_cached in search results, And discard those that don't have them"
      },
      "base_exterior_color": {
        "type": "string",
        "description": "Base exterior color to match. Valid filter values are those that our Search facets API returns for unique base exterior colors. You can pass in multiple base interior color values comma separated"
      },
      "base_interior_color": {
        "type": "string",
        "description": "Base interior color to match. Valid filter values are those that our Search facets API returns for unique base interior colors. You can pass in multiple base interior color values comma separated"
      },
      "write_off_category": {
        "format": "string",
        "type": "string",
        "description": "write off category"
      },
      "exclude_write_off_category": {
        "format": "string",
        "type": "string",
        "description": "To exclude write off category"
      },
      "fca_status": {
        "format": "string",
        "type": "string",
        "description": "To filter on fca status"
      },
      "seating_capacity": {
        "format": "string",
        "type": "string",
        "description": "To filter on vehicle seating capacity"
      },
      "vrm": {
        "format": "string",
        "type": "string",
        "description": "To filter on vrm"
      },
      "powertrain_type": {
        "format": "string",
        "type": "string",
        "description": "To filter on powertrain_type"
      },
      "client_filters": {
        "default": true,
        "enum": [
          true,
          false
        ],
        "type": "boolean",
        "description": "Flag to add explicit filters set on client level in solr"
      },
      "boost": {
        "default": true,
        "enum": [
          true,
          false
        ],
        "type": "boolean",
        "description": "Flag to sort listings based on client filter score in solr"
      },
      "car_location_seller_name": {
        "type": "string",
        "description": "Filter cars on seller name"
      },
      "car_location_street": {
        "type": "string",
        "description": "Filter cars on street name"
      },
      "car_location_city": {
        "type": "string",
        "description": "Filter cars on city"
      },
      "car_location_county": {
        "type": "string",
        "description": "Filter cars on county"
      },
      "car_location_zip": {
        "type": "string",
        "description": "To filter listing on car ZIP around which they are listed"
      },
      "car_location_latitude": {
        "format": "double",
        "type": "number",
        "description": "Latitude component of car location"
      },
      "car_location_longitude": {
        "format": "double",
        "type": "number",
        "description": "Longitude component of car location"
      },
      "price_change": {
        "enum": [
          "positive",
          "negative"
        ],
        "type": "string",
        "description": "Query to filter listings based on their positive and negative price change"
      },
      "price_change_range": {
        "format": "string",
        "type": "string",
        "description": "Price change range to filter listings with price change within given price_change_range. Range to be given in the format - min-max e.g. 10-500"
      },
      "active_inventory_date_range": {
        "format": "string",
        "type": "string",
        "description": "date range to filter listings that were active within given date range. Range to be given in the format [YYYYMMDD] - min-max e.g. 20190523-20190623"
      },
      "engine_size": {
        "type": "string",
        "description": "Engine Size to match. Valid filter values are those that our Search facets API returns for unique engine size. You can pass in multiple engine size values comma separated"
      },
      "engine_size_range": {
        "format": "string",
        "type": "string",
        "description": "Engine size range to filter listings with engine size in the given range. Range to be given in the format - min-max e.g. 1.0-2"
      },
      "uvc_id": {
        "format": "string",
        "type": "string",
        "description": "To filter on uvc id"
      },
      "highway_mpg_range": {
        "format": "string",
        "type": "string",
        "description": "Highway mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000"
      },
      "city_mpg_range": {
        "format": "string",
        "type": "string",
        "description": "City mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000"
      },
      "combined_mpg_range": {
        "format": "string",
        "type": "string",
        "description": "Combined mileage range for UK to filter listings with the mileage in the range given. Range to be given in the format - min-max e.g. 1000-5000"
      },
      "owned": {
        "type": "boolean",
        "description": "Used in combination with dealer_id or source, when true returns the listings actually owned by dealer himself"
      },
      "min_photo_links": {
        "format": "string",
        "type": "string",
        "description": "Filter listings based by number of photo links within given range"
      },
      "min_photo_links_cached": {
        "format": "string",
        "type": "string",
        "description": "Filter listings based by number of cached photo links within given range"
      },
      "match": {
        "type": "string",
        "description": "Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match"
      },
      "ulez_compliant": {
        "type": "boolean",
        "description": "Filter listings based on drive into ultra low emmition zone"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://marketcheck-prod.apigee.net/v2/search/car/uk/active{?api_key,append_api_key,latitude,longitude,radius,postal_code,zip,car_type,year,year_range,make,model,variant,trim,body_type,ymmt,transmission,doors,drivetrain,exterior_color,interior_color,engine,miles_range,price_range,msrp_range,sort_by,sort_order,rows,start,msa_code,facets,range_facets,facet_sort,stats,country,plot,nodedup,dedup,county,state,city,fuel_type,stock_no,dom_range,dom_active_range,dom_180_range,last_seen_range,first_seen_range,first_seen_at_source_range,first_seen_at_mc_range,last_seen_days,first_seen_days,first_seen_at_source_days,first_seen_at_mc_days,co2_emissions,insurance_group,vehicle_registration_mark,vehicle_registration_date_range,num_owners,inventory_count_range,source,dealer_id,exclude_sources,exclude_dealer_ids,in_transit,include_non_vin_listings,cylinders,photo_links,photo_links_cached,base_exterior_color,base_interior_color,write_off_category,exclude_write_off_category,fca_status,seating_capacity,vrm,powertrain_type,client_filters,boost,car_location_seller_name,car_location_street,car_location_city,car_location_county,car_location_zip,car_location_latitude,car_location_longitude,price_change,price_change_range,active_inventory_date_range,engine_size,engine_size_range,uvc_id,highway_mpg_range,city_mpg_range,combined_mpg_range,owned,min_photo_links,min_photo_links_cached,match,ulez_compliant}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Search query response",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**facets**",
              {
                "$ul": [
                  "**base_exterior_color**",
                  "**base_interior_color**",
                  "**body_subtype**",
                  "**body_type**",
                  "**car_location_city**",
                  "**car_location_county**",
                  "**car_location_seller_name**",
                  "**car_location_street**",
                  "**car_location_zip**",
                  "**car_type**",
                  "**carfax_1_owner**",
                  "**carfax_clean_title**",
                  "**city**",
                  "**co2_emissions**",
                  "**cylinders**",
                  "**data_source**",
                  "**dealer_id**",
                  "**dealer_type**",
                  "**dealership_group_name**",
                  "**doors**",
                  "**drivetrain**",
                  "**engine**",
                  "**engine_aspiration**",
                  "**engine_block**",
                  "**engine_size**",
                  "**exterior_color**",
                  "**fca_status**",
                  "**fuel_type**",
                  "**in_transit**",
                  "**insurance_group**",
                  "**interior_color**",
                  "**make**",
                  "**mas_code**",
                  "**model**",
                  "**num_owners**",
                  "**powertrain_type**",
                  "**seating_capacity**",
                  "**seller_name**",
                  "**seller_type**",
                  "**source**",
                  "**state**",
                  "**transmission**",
                  "**trim**",
                  "**vehicle_registration_mark**",
                  "**vehicle_type**",
                  "**vrm**",
                  "**year**"
                ]
              }
            ],
            "**listings**",
            "**num_found**: The number of listings found",
            [
              "**range_facets**",
              {
                "$ul": [
                  "**dom**",
                  "**dom_180**",
                  "**dom_active**",
                  "**finance_down_payment**",
                  "**finance_emp**",
                  "**finance_loan_apr**",
                  "**finance_loan_term**",
                  "**lease_down_payment**",
                  "**lease_emp**",
                  "**lease_term**",
                  "**miles**",
                  "**msrp**",
                  "**price**"
                ]
              }
            ],
            [
              "**stats**",
              {
                "$ul": [
                  [
                    "**dom**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**dom_180**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**dom_active**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**finance_down_payment**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**finance_down_payment_per**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**finance_emp**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**finance_loan_apr**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**finance_loan_term**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**lease_down_payment**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**lease_emp**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**lease_term**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**miles**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**msrp**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ],
                  [
                    "**price**",
                    {
                      "$ul": [
                        "**count**: count",
                        "**max**: Maximum value of the field",
                        "**mean**: Mean of the field",
                        "**median**: median of the field",
                        "**min**: Minimum value of the field",
                        "**missing**: count of listings missing particular field",
                        "**stddev**: stddev of the field",
                        "**sum**: Summation of all values of the field",
                        "**sum_of_squares**: sum_of_squares of the field"
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: Error code",
            "**message**: Error message"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
