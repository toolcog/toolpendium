{
  "name": "ProductSearchFilteredandOrdered",
  "description": "Retrieves general information about the store products. This information can be filtered and ordered by a number of options. It also can be paginated, filtered and ordered. \r\n\r\n## Filters  \r\n\r\n- **Filter by full text** - `ft={searchWord}`  \r\nE.g.: `ft=television`\r\n\r\n- **Filter by category** - `fq=C:/{a}/{b}`  \r\n`{a}` and `{b}` are Category IDs   \r\nE.g.: `fq=C:/1000041/1000049/`\r\n\r\n- **Filter by brand** - `fq=B:/{a}/{b}`  \r\n`{a}` and `{b}` are Brand IDs\r\nE.g.: `fq=B:/189385/189387/`\r\n\r\n- **Filter by specification** - `fq=specificationFilter_{a}:{b}`  \r\n`{a}` is the specification ID\r\n`{b}` is the specification value\r\nE.g.: To filter products where the color is Blue, find the specification ID for color. Suppose it is 123, then the query will be: `fq=specificationFilter_123:Blue`\r\n\r\n- **Filter by price range** - `fq=P:[{a} TO {b}]`  \r\n`{a}`  is the minimum price \"from\"\r\n`{b}` is the highest price \"to\"  \r\nE.g.: `fq=P:[0 TO 20]` will search products between 0.00 and 20.00.  \r\n\r\n- **Filter by collection** - `fq=productClusterIds:{{productClusterId}}` \r\n`productClusterId` is the same as `collectionId`  \r\nFor more information about collections, read [Creating a product collection](https://help.vtex.com/en/tutorial/creating-a-product-collection).\r\n\r\n- **Filter by product ID** - `fq=productId:{{productId}}`\r\n\r\n- **Filter by SKU ID** - `fq=skuId:{{skuId}}`\r\n\r\n- **Filter by referenceId** - `fq=alternateIds_RefId:{{referenceId}}`\r\n\r\n- **Filter by EAN13** - `fq=alternateIds_Ean:{{ean13}}`\r\n\r\n- **Filter by availability at a specific sales channel** - `fq=isAvailablePerSalesChannel_{{sc}}:{{bool}}`  \r\n`{{sc}}` is the desired sales channel  \r\n`{{bool}}` is true ou false, 1 or 0.  \r\nE.g.: seaching available products for the sales channel 4 would be `fq=isAvailablePerSalesChannel_4:1`\r\n\r\n- **Filter by available at a specific seller** - `fq=sellerId:{{sellerId}}`\r\nThe search does not include White Label Sellers.\r\n\r\n## Pagination\r\n\r\n- **Initial item number** - `_from={{first}}`\r\n- **Final item number** - `_to={{last}}`\r\n\r\n>⚠️ This endpoint returns a maximum of 50 items per response, so the difference between `_from` and `_to` should not exceed this number. The result order is descending, from the highest product ID to the lowest.\r\n\r\n## Sorting\r\n\r\n- **Price**  \r\n`O=OrderByPriceDESC`  \r\n`O=OrderByPriceASC`\r\n\r\n- **Top Selling Products**  \r\n`O=OrderByTopSaleDESC`\r\n\r\n- **Best Reviews**  \r\n`O=OrderByReviewRateDESC`\r\n\r\n- **Name**  \r\n`O=OrderByNameASC`  \r\n`O=OrderByNameDESC`\r\n\r\n- **Release Date**  \r\n`O=OrderByReleaseDateDESC`\r\n\r\n- **Best Discounts**  \r\n`O=OrderByBestDiscountDESC`\r\n\r\n- **Score**  \r\n`O=OrderByScoreDESC`",
  "parameters": {
    "type": "object",
    "properties": {
      "Accept": {
        "example": "application/json",
        "type": "string",
        "description": "HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand."
      },
      "Content-Type": {
        "example": "application/json",
        "type": "string",
        "description": "Describes the type of the content being sent."
      },
      "_from": {
        "example": "1",
        "type": "string",
        "description": "Starter page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page."
      },
      "_to": {
        "example": "50",
        "type": "string",
        "description": "Finisher page range. These parameters allow the API to be paginated. Take into account that the initial and final pages cannot have a separation superior to 50 pages. Thus, it will be displayed 50 items per page."
      },
      "ft": {
        "example": "television",
        "type": "string",
        "description": "Filter by full text. The form is`ft={searchWord}`"
      },
      "fq": {
        "example": "C:/1000041/1000049/",
        "type": "string",
        "description": "General filter. It can be by category (`fq=C:/{a}/{b}`), by specification (`fq=specificationFilter_{a}:{b}`),  by price range (`fq=P:[{a} TO {b}]`), by collection (`fq=productClusterIds:{{productClusterId}}`), by product ID (`fq=productId:{{productId}}`),  by SKU ID (`fq=skuId:{{skuId}}`), by Reference ID (`fq=alternateIds_RefId:{{referenceId}}`), by EAN13 (`fq=alternateIds_Ean:{{ean13}}`), by availability at a specific sales channel (`fq=isAvailablePerSalesChannel_{{sc}}:{{bool}}`), by available at a specific seller (`fq=sellerId:{{sellerId}}`)"
      },
      "O": {
        "example": "OrderByNameASC",
        "type": "string",
        "description": "Sorting method. It can be by Price (`O=OrderByPriceDESC` or `O=OrderByPriceASC`), by Top Selling Products (`O=OrderByTopSaleDESC`), by Best Reviews (`O=OrderByReviewRateDESC`), by Name (`O=OrderByNameASC` or `O=OrderByNameDESC`), by Release Date (`O=OrderByReleaseDateDESC`), by Best Discounts (`O=OrderByBestDiscountDESC`), by Score (`O=OrderByScoreDESC`)"
      }
    },
    "required": [
      "Accept",
      "Content-Type"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "http://example.com/.DefaultParameterValue.com.br/api/catalog_system/pub/products/search{?_from,_to,ft,fq,O}"
    },
    "headers": {
      "Accept": {
        "$": "Accept"
      },
      "Content-Type": {
        "$": "Content-Type"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": ""
        },
        "**Key properties:**",
        {
          "$ul": [
            "**allSpecifications**: Array of the product's specifications.",
            "**allSpecificationsGroups**: Array of the product's specifications groups.",
            "**brand**: Brand name.",
            "**brandId**: Product brand ID.",
            "**brandImageUrl**: Product's brand image URL.",
            "**categories**: Array of the product's categories URLs.",
            "**categoriesIds**: Array of the product's categories IDs.",
            "**categoryId**: Product category ID.",
            "**clusterHighlights**: Cluster highlight ID and name.",
            "**description**: Description of the main information related to the product. A simple and easy to understand summary for the customer.",
            "**items**: Array containing the product SKU general information.",
            "**link**: Product URL.",
            "**linkText**: Product URL.",
            "**metaTagDescription**: Brief description of the category. It's recommended that you don't exceed 150 characters so that the search engines can display it correctly in the results page.",
            "**productClusters**: Product clusters' IDs and names.",
            "**productId**: Product unique identifier.",
            "**productName**: Product name.",
            "**productReference**: Product reference.",
            "**productReferenceCode**: Product reference ID.",
            "**productTitle**: Text that is in the browser tab and corresponds to the title of the product page. This field is important for SEO.",
            "**releaseDate**: Product release date.",
            "**searchableClusters**: Searchable clusters IDs and names"
          ]
        },
        {
          "$each": "$.body.*",
          "$as": "item",
          "$block": [
            {
              "$h2": "Item"
            },
            {
              "$lang": "json",
              "$code": {
                "$encode": "json",
                "$indent": true,
                "$content": {
                  "$": "$.item"
                }
              }
            }
          ]
        }
      ]
    }
  }
}
