{
  "name": "JobSchedule_Get",
  "description": "Gets information about the specified job schedule.",
  "parameters": {
    "type": "object",
    "properties": {
      "jobScheduleId": {
        "type": "string",
        "description": "The id of the job schedule to get."
      },
      "$select": {
        "type": "string",
        "description": "Sets an OData $select clause."
      },
      "$expand": {
        "type": "string",
        "description": "Sets an OData $expand clause."
      },
      "timeout": {
        "default": 30,
        "format": "int32",
        "type": "integer",
        "description": "Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds."
      },
      "client-request-id": {
        "type": "string",
        "description": "Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0."
      },
      "return-client-request-id": {
        "type": "boolean",
        "description": "Specifies if the server should return the client-request-id identifier in the response."
      },
      "ocp-date": {
        "format": "date-time-rfc1123",
        "type": "string",
        "description": "The time the request was issued. If not specified, this header will be automatically populated with the current system clock time."
      },
      "If-Match": {
        "type": "string",
        "description": "An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified."
      },
      "If-None-Match": {
        "type": "string",
        "description": "An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag."
      },
      "If-Modified-Since": {
        "format": "date-time-rfc1123",
        "type": "string",
        "description": "Specify this header to perform the operation only if the resource has been modified since the specified date/time."
      },
      "If-Unmodified-Since": {
        "format": "date-time-rfc1123",
        "type": "string",
        "description": "Specify this header to perform the operation only if the resource has not been modified since the specified date/time."
      },
      "api-version": {
        "type": "string",
        "description": "Client API Version."
      }
    },
    "required": [
      "jobScheduleId",
      "api-version"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://batch.core.windows.net/jobschedules/{jobScheduleId}{?$select,$expand,timeout,api-version}"
    },
    "headers": {
      "client-request-id": {
        "$": "client-request-id"
      },
      "return-client-request-id": {
        "$": "return-client-request-id"
      },
      "ocp-date": {
        "$": "ocp-date"
      },
      "If-Match": {
        "$": "If-Match"
      },
      "If-None-Match": {
        "$": "If-None-Match"
      },
      "If-Modified-Since": {
        "$": "If-Modified-Since"
      },
      "If-Unmodified-Since": {
        "$": "If-Unmodified-Since"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A job schedule that allows recurring jobs by specifying when to run jobs and a specification used to create each job.",
        "**Key properties:**",
        {
          "$ul": [
            "**creationTime**: Gets or sets the creation time of the job schedule.",
            "**displayName**: Gets or sets the display name for the schedule.",
            "**eTag**: Gets or sets the ETag of the job schedule.",
            [
              "**executionInfo**: Specifies how tasks should be run in a job associated with a job schedule.",
              {
                "$ul": [
                  "**endTime**: Gets or sets the time at which the schedule ended. This property is set only if the job schedule is in the completed state.",
                  "**nextRunTime**: Gets or sets the next time at which a job will be created under this schedule.",
                  [
                    "**recentJob**: Information about the most recent job to run under the job schedule.",
                    {
                      "$ul": [
                        "**id**: Gets or sets the id of the job.",
                        "**url**: Gets or sets the URL of the job."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**id**: Gets or sets a string that uniquely identifies the schedule within the account. A GUID is recommended.",
            [
              "**jobSpecification**: Specifies details of the jobs to be created on a schedule.",
              {
                "$ul": [
                  "**commonEnvironmentSettings**: Gets or sets a list of common environment variable settings.  These environment variables are set for all tasks in jobs created under this schedule (including the Job Manager, Job Preparation and Job Release tasks).",
                  [
                    "**constraints**: Specifies the execution constraints for jobs created on a schedule.",
                    {
                      "$ul": [
                        "**maxTaskRetryCount**: Gets or sets the maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero.",
                        "**maxWallClockTime**: Gets or sets the maximum elapsed time that the job may run, measured from the time the job starts. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running."
                      ]
                    }
                  ],
                  "**displayName**: Gets or sets the display name for jobs created under this schedule. It need not be unique and can contain any Unicode characters up to a maximum length of 1024.",
                  [
                    "**jobManagerTask**: Specifies details of a Job Manager task.",
                    {
                      "$ul": [
                        "**commandLine**: Gets or sets the command line of the Job Manager task.",
                        [
                          "**constraints**: Constraints to apply to the Job Manager task.",
                          {
                            "$ul": [
                              "**maxTaskRetryCount**: Gets or sets the maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero.",
                              "**maxWallClockTime**: Gets or sets the maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it.",
                              "**retentionTime**: Gets or sets the minimum time to retain the working directory for the task on the compute node where it ran. After this time, the Batch service may delete the working directory and all its contents. The default is infinite."
                            ]
                          }
                        ],
                        "**displayName**: Gets or sets the display name of the Job Manager task.",
                        "**environmentSettings**: Gets or sets a list of environment variable settings for the Job Manager task.",
                        "**id**: Gets or sets a string that uniquely identifies the Job Manager task. A GUID is recommended.",
                        "**killJobOnCompletion**: Gets or sets whether completion of the Job Manager task signifies completion of the entire job.",
                        "**resourceFiles**: Gets or sets a list of files that Batch will download to the compute node before running the command line.",
                        "**runElevated**: Gets or sets whether to run the Job Manager task in elevated mode. The default value is false.",
                        "**runExclusive**: Gets or sets whether the Job Manager task requires exclusive use of the compute node where it runs."
                      ]
                    }
                  ],
                  [
                    "**jobPreparationTask**: A Job Preparation task to run before any tasks of the job on any given compute node.",
                    {
                      "$ul": [
                        "**commandLine**: Gets or sets the command line of the Job Preparation task.",
                        [
                          "**constraints**: Constraints to apply to the Job Manager task.",
                          {
                            "$ul": [
                              "**maxTaskRetryCount**: Gets or sets the maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero.",
                              "**maxWallClockTime**: Gets or sets the maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it.",
                              "**retentionTime**: Gets or sets the minimum time to retain the working directory for the task on the compute node where it ran. After this time, the Batch service may delete the working directory and all its contents. The default is infinite."
                            ]
                          }
                        ],
                        "**environmentSettings**: Gets or sets a list of environment variable settings for the Job Preparation task.",
                        "**id**: Gets or sets a string that uniquely identifies the job preparation task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.",
                        "**rerunOnNodeRebootAfterSuccess**: Gets or sets whether the Batch service should rerun the Job Preparation task after a compute node reboots. The default value is true.",
                        "**resourceFiles**: Gets or sets a list of files that Batch will download to the compute node before running the command line.",
                        "**runElevated**: Gets or sets whether to run the Job Preparation task in elevated mode. The default value is false.",
                        "**waitForSuccess**: Gets or sets whether the Batch Service should wait for the Job Preparation task to complete successfully before scheduling any other tasks of the job on the compute node."
                      ]
                    }
                  ],
                  [
                    "**jobReleaseTask**: A Job Release task to run on job completion on any compute node where the job has run.",
                    {
                      "$ul": [
                        "**commandLine**: Gets or sets the command line of the Job Release task.",
                        "**environmentSettings**: Gets or sets a list of environment variable settings for the Job Release task.",
                        "**id**: Gets or sets a string that uniquely identifies the Job Release task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.",
                        "**maxWallClockTime**: Gets or sets the maximum elapsed time that the Job Release task may run on a given compute node, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.",
                        "**resourceFiles**: Gets or sets a list of files that Batch will download to the compute node before running the command line.",
                        "**retentionTime**: Gets or sets the minimum time to retain the working directory for the Job Release task on the compute node.  After this time, the Batch service may delete the working directory and all its contents. The default is infinite.",
                        "**runElevated**: Gets or sets whether to run the Job Release task in elevated mode. The default value is false."
                      ]
                    }
                  ],
                  "**metadata**: Gets or sets a list of name-value pairs associated with each job created under this schedule as metadata.",
                  [
                    "**poolInfo**: Specifies how a job should be assigned to a pool.",
                    {
                      "$ul": [
                        [
                          "**autoPoolSpecification**: Specifies characteristics for a temporary 'auto pool'. The Batch service will create this auto pool, run all the tasks for the job on it, and will delete the pool once the job has completed.",
                          {
                            "$ul": [
                              "**autoPoolIdPrefix**: Gets or sets a prefix to be added to the unique identifier when a pool is automatically created. The prefix can be up to 20 characters long.",
                              "**keepAlive**: Gets or sets whether to keep an auto pool alive after its lifetime expires.",
                              [
                                "**pool**: Specification for creating a new pool.",
                                {
                                  "$ul": [
                                    "**applicationPackageReferences**: Gets or sets the list of application packages to be installed on each compute node in the pool.",
                                    "**autoScaleEvaluationInterval**: Gets or sets a time interval for the desired AutoScale evaluation period in the pool.",
                                    "**autoScaleFormula**: Gets or sets the formula for the desired number of compute nodes in the pool.",
                                    "**certificateReferences**: Gets or sets a list of certificates to be installed on each compute node in the pool.",
                                    "**displayName**: Gets or sets the display name for the pool.",
                                    "**enableAutoScale**: Gets or sets whether the pool size should automatically adjust over time.",
                                    "**enableInterNodeCommunication**: Gets or sets whether the pool permits direct communication between nodes.",
                                    "**maxTasksPerNode**: Gets or sets the maximum number of tasks that can run concurrently on a single compute node in the pool.",
                                    "**metadata**: Gets or sets a list of name-value pairs associated with the pool as metadata.",
                                    "**osFamily**: Gets or sets the Azure Guest OS family to be installed on the virtual machines in the pool.",
                                    "**resizeTimeout**: Gets or sets the timeout for allocation of compute nodes to the pool.",
                                    [
                                      "**startTask**: A task defined on a pool and run by compute nodes when they join the pool.",
                                      {
                                        "$ul": [
                                          "**commandLine**: Gets or sets the command line of the start task.",
                                          "**environmentSettings**: Gets or sets a list of environment variable settings for the start task.",
                                          "**maxTaskRetryCount**: Gets or sets the maximum number of times the task may be retried.",
                                          "**resourceFiles**: Gets or sets a list of files that Batch will download to the compute node before running the command line.",
                                          "**runElevated**: Gets or sets whether to run the start task in elevated mode. The default value is false.",
                                          "**waitForSuccess**: Gets or sets whether the Batch Service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node."
                                        ]
                                      }
                                    ],
                                    "**targetDedicated**: Gets or sets the desired number of compute nodes in the pool.",
                                    "**targetOSVersion**: Gets or sets the Azure Guest OS version to be installed on the virtual machines in the pool.",
                                    [
                                      "**taskSchedulingPolicy**: Specifies how tasks should be distributed across compute nodes.",
                                      {
                                        "$ul": [
                                          "**nodeFillType**: Gets or sets how tasks should be distributed across compute nodes"
                                        ]
                                      }
                                    ],
                                    "**vmSize**: Gets or sets the size of the virtual machines in the pool. All VMs in a pool are the same size."
                                  ]
                                }
                              ],
                              "**poolLifetimeOption**: Gets or sets the minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned to pools."
                            ]
                          }
                        ],
                        "**poolId**: Gets or sets the id of an existing pool. All the tasks of the job will run on the specified pool. You must specify either PoolId or AutoPoolSpecification, but not both."
                      ]
                    }
                  ],
                  "**priority**: Gets or sets the priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.",
                  "**usesTaskDependencies**: Gets or sets the flag that determines if this job will use tasks with dependencies."
                ]
              }
            ],
            "**lastModified**: Gets or sets the last modified time of the job schedule.",
            "**metadata**: Gets or sets a list of name-value pairs associated with the schedule as metadata.",
            "**previousState**: Gets or sets the previous state of the job schedule.",
            "**previousStateTransitionTime**: Gets or sets the time at which the job schedule entered its previous state.",
            [
              "**schedule**: The schedule according to which jobs will be created",
              {
                "$ul": [
                  "**doNotRunAfter**: Gets or sets a time after which no job will be created under this job schedule.  The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule.",
                  "**doNotRunUntil**: Gets or sets the earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately.",
                  "**recurrenceInterval**: Gets or sets the time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time.",
                  "**startWindow**: Gets or sets the time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created.  If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule."
                ]
              }
            ],
            "**state**: Gets or sets the current state of the job schedule.",
            "**stateTransitionTime**: Gets or sets the time at which the job schedule entered the current state.",
            [
              "**stats**: The lifetime resource usage statistics for a job schedule.",
              {
                "$ul": [
                  "**kernelCPUTime**: Gets or sets the total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all the tasks in all the jobs created under the schedule.",
                  "**lastUpdateTime**: Gets or sets the time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.",
                  "**numFailedTasks**: Gets or sets the total number of tasks that failed during the given time range in jobs created under the schedule. A task fails if it exhausts its maximum retry count without returning exit code 0.",
                  "**numSucceededTasks**: Gets or sets the total number of tasks successfully completed during the given time range in jobs created under the schedule.  A task completes successfully if it returns exit code 0.",
                  "**numTaskRetries**: Gets or sets the total number of retries during the given time range on all the tasks in jobs created under the schedule.",
                  "**readIOGiB**: Gets or sets the total amount of data in GiB of I/O read by all the tasks in all the jobs created under the schedule.",
                  "**readIOps**: Gets or sets the total number of I/O read operations performed by all the tasks in all the jobs created under the schedule.",
                  "**startTime**: Gets or sets the start time of the time range covered by the statistics.",
                  "**url**: Gets or sets the URL for the statistics.",
                  "**userCPUTime**: Gets or sets the total user mode CPU time (summed across all cores and all compute nodes) consumed by all the tasks in all the jobs created under the schedule.",
                  "**waitTime**: Gets or sets the total wait time of all the tasks in jobs created under the schedule.",
                  "**wallClockTime**: Gets or sets the total wall clock time of all the tasks in all the jobs created under the schedule.",
                  "**writeIOGiB**: Gets or sets the total amount of data in GiB of I/O written by all the tasks in all the jobs created under the schedule.",
                  "**writeIOps**: Gets or sets the total number of I/O write operations performed by all the tasks in all the jobs created under the schedule."
                ]
              }
            ],
            "**url**: Gets or sets the URL of the job schedule."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An error response received from the Azure Batch service.",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: Gets or sets an identifier for the error. Codes are invariant and are intended to be consumed programmatically.",
            [
              "**message**: An error message received in an Azure Batch error response.",
              {
                "$ul": [
                  "**lang**: Gets or sets the language code of the error message",
                  "**value**: Gets or sets the text of the message."
                ]
              }
            ],
            "**values**: Gets or sets a collection of key-value pairs containing additional details about the error."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
