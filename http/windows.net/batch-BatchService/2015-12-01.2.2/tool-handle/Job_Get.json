{
  "name": "Job_Get",
  "description": "Gets information about the specified job.",
  "parameters": {
    "type": "object",
    "properties": {
      "jobId": {
        "type": "string",
        "description": "The id of the job."
      },
      "$select": {
        "type": "string",
        "description": "Sets an OData $select clause."
      },
      "$expand": {
        "type": "string",
        "description": "Sets an OData $expand clause."
      },
      "timeout": {
        "default": 30,
        "format": "int32",
        "type": "integer",
        "description": "Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds."
      },
      "client-request-id": {
        "type": "string",
        "description": "Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0."
      },
      "return-client-request-id": {
        "type": "boolean",
        "description": "Specifies if the server should return the client-request-id identifier in the response."
      },
      "ocp-date": {
        "format": "date-time-rfc1123",
        "type": "string",
        "description": "The time the request was issued. If not specified, this header will be automatically populated with the current system clock time."
      },
      "api-version": {
        "type": "string",
        "description": "Client API Version."
      }
    },
    "required": [
      "jobId",
      "api-version"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://batch.core.windows.net/jobs/{jobId}{?$select,$expand,timeout,api-version}"
    },
    "headers": {
      "client-request-id": {
        "$": "client-request-id"
      },
      "return-client-request-id": {
        "$": "return-client-request-id"
      },
      "ocp-date": {
        "$": "ocp-date"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An Azure Batch job.",
        "**Key properties:**",
        {
          "$ul": [
            "**commonEnvironmentSettings**: Gets or sets the list of common environment variable settings.  These environment variables are set for all tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).",
            [
              "**constraints**: Specifies the execution constraints for jobs created on a schedule.",
              {
                "$ul": [
                  "**maxTaskRetryCount**: Gets or sets the maximum number of times each task may be retried. The Batch service retries a task if its exit code is nonzero.",
                  "**maxWallClockTime**: Gets or sets the maximum elapsed time that the job may run, measured from the time the job starts. If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running."
                ]
              }
            ],
            "**creationTime**: Gets or sets the creation time of the job.",
            "**displayName**: Gets or sets the display name for the job.",
            "**eTag**: Gets or sets the ETag of the job.",
            [
              "**executionInfo**: Contains information about the execution of a job in the Azure Batch service.",
              {
                "$ul": [
                  "**endTime**: Gets or sets the completion time of the job. This property is set only if the job is in the completed state.",
                  "**poolId**: Gets or sets the id of the pool to which this job is assigned.",
                  [
                    "**schedulingError**: An error encountered by the Batch service when scheduling a job.",
                    {
                      "$ul": [
                        "**category**: Gets or sets the category of the job scheduling error.",
                        "**code**: Gets or sets an identifier for the job scheduling error.  Codes are invariant and are intended to be consumed programmatically.",
                        "**details**: Gets or sets a list of additional error details related to the scheduling error.",
                        "**message**: Gets or sets a message describing the job scheduling error, intended to be suitable for display in a user interface."
                      ]
                    }
                  ],
                  "**startTime**: Gets or sets the start time of the job.",
                  "**terminateReason**: Gets or sets a string describing the reason the job ended."
                ]
              }
            ],
            "**id**: Gets or sets a string that uniquely identifies the job within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.",
            [
              "**jobManagerTask**: Specifies details of a Job Manager task.",
              {
                "$ul": [
                  "**commandLine**: Gets or sets the command line of the Job Manager task.",
                  [
                    "**constraints**: Constraints to apply to the Job Manager task.",
                    {
                      "$ul": [
                        "**maxTaskRetryCount**: Gets or sets the maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero.",
                        "**maxWallClockTime**: Gets or sets the maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it.",
                        "**retentionTime**: Gets or sets the minimum time to retain the working directory for the task on the compute node where it ran. After this time, the Batch service may delete the working directory and all its contents. The default is infinite."
                      ]
                    }
                  ],
                  "**displayName**: Gets or sets the display name of the Job Manager task.",
                  "**environmentSettings**: Gets or sets a list of environment variable settings for the Job Manager task.",
                  "**id**: Gets or sets a string that uniquely identifies the Job Manager task. A GUID is recommended.",
                  "**killJobOnCompletion**: Gets or sets whether completion of the Job Manager task signifies completion of the entire job.",
                  "**resourceFiles**: Gets or sets a list of files that Batch will download to the compute node before running the command line.",
                  "**runElevated**: Gets or sets whether to run the Job Manager task in elevated mode. The default value is false.",
                  "**runExclusive**: Gets or sets whether the Job Manager task requires exclusive use of the compute node where it runs."
                ]
              }
            ],
            [
              "**jobPreparationTask**: A Job Preparation task to run before any tasks of the job on any given compute node.",
              {
                "$ul": [
                  "**commandLine**: Gets or sets the command line of the Job Preparation task.",
                  [
                    "**constraints**: Constraints to apply to the Job Manager task.",
                    {
                      "$ul": [
                        "**maxTaskRetryCount**: Gets or sets the maximum number of times the task may be retried. The Batch service retries a task if its exit code is nonzero.",
                        "**maxWallClockTime**: Gets or sets the maximum elapsed time that the task may run, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it.",
                        "**retentionTime**: Gets or sets the minimum time to retain the working directory for the task on the compute node where it ran. After this time, the Batch service may delete the working directory and all its contents. The default is infinite."
                      ]
                    }
                  ],
                  "**environmentSettings**: Gets or sets a list of environment variable settings for the Job Preparation task.",
                  "**id**: Gets or sets a string that uniquely identifies the job preparation task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.",
                  "**rerunOnNodeRebootAfterSuccess**: Gets or sets whether the Batch service should rerun the Job Preparation task after a compute node reboots. The default value is true.",
                  "**resourceFiles**: Gets or sets a list of files that Batch will download to the compute node before running the command line.",
                  "**runElevated**: Gets or sets whether to run the Job Preparation task in elevated mode. The default value is false.",
                  "**waitForSuccess**: Gets or sets whether the Batch Service should wait for the Job Preparation task to complete successfully before scheduling any other tasks of the job on the compute node."
                ]
              }
            ],
            [
              "**jobReleaseTask**: A Job Release task to run on job completion on any compute node where the job has run.",
              {
                "$ul": [
                  "**commandLine**: Gets or sets the command line of the Job Release task.",
                  "**environmentSettings**: Gets or sets a list of environment variable settings for the Job Release task.",
                  "**id**: Gets or sets a string that uniquely identifies the Job Release task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.",
                  "**maxWallClockTime**: Gets or sets the maximum elapsed time that the Job Release task may run on a given compute node, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.",
                  "**resourceFiles**: Gets or sets a list of files that Batch will download to the compute node before running the command line.",
                  "**retentionTime**: Gets or sets the minimum time to retain the working directory for the Job Release task on the compute node.  After this time, the Batch service may delete the working directory and all its contents. The default is infinite.",
                  "**runElevated**: Gets or sets whether to run the Job Release task in elevated mode. The default value is false."
                ]
              }
            ],
            "**lastModified**: Gets or sets the last modified time of the job.",
            "**metadata**: Gets or sets a list of name-value pairs associated with the job as metadata.",
            [
              "**poolInfo**: Specifies how a job should be assigned to a pool.",
              {
                "$ul": [
                  [
                    "**autoPoolSpecification**: Specifies characteristics for a temporary 'auto pool'. The Batch service will create this auto pool, run all the tasks for the job on it, and will delete the pool once the job has completed.",
                    {
                      "$ul": [
                        "**autoPoolIdPrefix**: Gets or sets a prefix to be added to the unique identifier when a pool is automatically created. The prefix can be up to 20 characters long.",
                        "**keepAlive**: Gets or sets whether to keep an auto pool alive after its lifetime expires.",
                        [
                          "**pool**: Specification for creating a new pool.",
                          {
                            "$ul": [
                              "**applicationPackageReferences**: Gets or sets the list of application packages to be installed on each compute node in the pool.",
                              "**autoScaleEvaluationInterval**: Gets or sets a time interval for the desired AutoScale evaluation period in the pool.",
                              "**autoScaleFormula**: Gets or sets the formula for the desired number of compute nodes in the pool.",
                              "**certificateReferences**: Gets or sets a list of certificates to be installed on each compute node in the pool.",
                              "**displayName**: Gets or sets the display name for the pool.",
                              "**enableAutoScale**: Gets or sets whether the pool size should automatically adjust over time.",
                              "**enableInterNodeCommunication**: Gets or sets whether the pool permits direct communication between nodes.",
                              "**maxTasksPerNode**: Gets or sets the maximum number of tasks that can run concurrently on a single compute node in the pool.",
                              "**metadata**: Gets or sets a list of name-value pairs associated with the pool as metadata.",
                              "**osFamily**: Gets or sets the Azure Guest OS family to be installed on the virtual machines in the pool.",
                              "**resizeTimeout**: Gets or sets the timeout for allocation of compute nodes to the pool.",
                              [
                                "**startTask**: A task defined on a pool and run by compute nodes when they join the pool.",
                                {
                                  "$ul": [
                                    "**commandLine**: Gets or sets the command line of the start task.",
                                    "**environmentSettings**: Gets or sets a list of environment variable settings for the start task.",
                                    "**maxTaskRetryCount**: Gets or sets the maximum number of times the task may be retried.",
                                    "**resourceFiles**: Gets or sets a list of files that Batch will download to the compute node before running the command line.",
                                    "**runElevated**: Gets or sets whether to run the start task in elevated mode. The default value is false.",
                                    "**waitForSuccess**: Gets or sets whether the Batch Service should wait for the start task to complete successfully (that is, to exit with exit code 0) before scheduling any tasks on the compute node."
                                  ]
                                }
                              ],
                              "**targetDedicated**: Gets or sets the desired number of compute nodes in the pool.",
                              "**targetOSVersion**: Gets or sets the Azure Guest OS version to be installed on the virtual machines in the pool.",
                              [
                                "**taskSchedulingPolicy**: Specifies how tasks should be distributed across compute nodes.",
                                {
                                  "$ul": [
                                    "**nodeFillType**: Gets or sets how tasks should be distributed across compute nodes"
                                  ]
                                }
                              ],
                              "**vmSize**: Gets or sets the size of the virtual machines in the pool. All VMs in a pool are the same size."
                            ]
                          }
                        ],
                        "**poolLifetimeOption**: Gets or sets the minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned to pools."
                      ]
                    }
                  ],
                  "**poolId**: Gets or sets the id of an existing pool. All the tasks of the job will run on the specified pool. You must specify either PoolId or AutoPoolSpecification, but not both."
                ]
              }
            ],
            "**previousState**: Gets or sets the previous state of the job. This property is not set if the job is in its initial Active state.",
            "**previousStateTransitionTime**: Gets or sets the time at which the job entered its previous state. This property is not set if the job is in its initial Active state.",
            "**priority**: Gets or sets the priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.",
            "**state**: Gets or sets the current state of the job.",
            "**stateTransitionTime**: Gets or sets the time at which the job entered its current state.",
            [
              "**stats**: Resource usage statistics for a job.",
              {
                "$ul": [
                  "**kernelCPUTime**: Gets or sets the total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all the tasks in the job.",
                  "**lastUpdateTime**: Gets or sets the time at which the statistics were last updated. All statistics are limited to the range between StartTime and LastUpdateTime.",
                  "**numFailedTasks**: Gets or sets the total number of tasks in the job that failed during the given time range.",
                  "**numSucceededTasks**: Gets or sets the total number of tasks successfully completed in the job during the given time range.",
                  "**numTaskRetries**: Gets or sets the total number of retries on all the tasks in the job during the given time range.",
                  "**readIOGiB**: Gets or sets the total amount of data in GiB of I/O read by all the tasks in the job.",
                  "**readIOps**: Gets or sets the total number of I/O read operations performed by all the tasks in the job.",
                  "**startTime**: Gets or sets the start time of the time range covered by the statistics.",
                  "**url**: Gets or sets the URL for the statistics.",
                  "**userCPUTime**: Gets or sets the total user mode CPU time (summed across all cores and all compute nodes) consumed by all the tasks in the job.",
                  "**waitTime**: Gets or sets the total wait time of all the tasks in the job.  The wait time for a task is defined as the elapsed time between the creation of the task creation and the start of task execution.  This value is reported only in the account lifetime statistics; it is not included in individual job statistics.",
                  "**wallClockTime**: Gets or sets the total wall clock time of all the tasks in the job.",
                  "**writeIOGiB**: Gets or sets the total amount of data in GiB of I/O written by all the tasks in the job.",
                  "**writeIOps**: Gets or sets the total number of I/O write operations performed by all the tasks in the job."
                ]
              }
            ],
            "**url**: Gets or sets the URL of the job.",
            "**usesTaskDependencies**: Gets or sets the flag that determines if this job will use tasks with dependencies."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An error response received from the Azure Batch service.",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: Gets or sets an identifier for the error. Codes are invariant and are intended to be consumed programmatically.",
            [
              "**message**: An error message received in an Azure Batch error response.",
              {
                "$ul": [
                  "**lang**: Gets or sets the language code of the error message",
                  "**value**: Gets or sets the text of the message."
                ]
              }
            ],
            "**values**: Gets or sets a collection of key-value pairs containing additional details about the error."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
