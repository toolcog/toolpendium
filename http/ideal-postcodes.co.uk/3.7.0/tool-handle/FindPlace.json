{
  "name": "FindPlace",
  "description": "Query for geographical places across countries. Each query will return a list of place suggestions, which consists of a place name, descriptive name and id.\n\nThis API returns geographical information such as countries, capitals, administrative areas and more. It is ideal for correctly identifying a place along with any other details like geolocation.\n\n## Implementing Place Autocomplete\n\nExtracting the full information of a place is a 2 step process:\n\n1. Retrieve place suggestions via /places\n2. Retrieve the entire place with the ID provided in the suggestion\n\n## Suggestion Format\n\nEach place suggestion contains a descriptive name which you can provide to users to uniquely idenfity a place.\n\n## Rate Limiting\n\nYou can make up to 3000 requests to the autocomplete API within a 5 minute span. The HTTP Header contains information on your current rate limit.\n\n| Header                  | Description                                                                            |\n| ----------------------- | -------------------------------------------------------------------------------------- |\n| `X-RateLimit-Limit`     | The maximum number of requests that can be made in 5 minutes                           |\n| `X-RateLimit-Remaining` | The remaining requests within the current rate limit window                            |\n| `X-RateLimit-Reset`     | The time when the rate limit window resets in Unix Time (seconds) or UTC Epoch seconds |\n\n## Pricing\n\nThis API currently does not affect your balance. However, resolving a suggestion into a full place requires a paid request.\n\nPlease note, this API is not intended as a standalone free resource. Integrations that consistently make autocomplete requests without a paid request to resolve an place may be disrupted via tightened rate limits.\n",
  "parameters": {
    "type": "object",
    "properties": {
      "api_key": {
        "$ref": "#/$defs/ApiKeyParam"
      },
      "query": {
        "type": "string",
        "description": "Specifies the place you wish to query. Query can be shortened to `q=`"
      },
      "country_iso": {
        "$ref": "#/$defs/CountryIsoParam"
      },
      "bias_country_iso": {
        "$ref": "#/$defs/BiasCountryIsoParam"
      },
      "bias_lonlat": {
        "$ref": "#/$defs/BiasLonLatParam"
      },
      "bias_ip": {
        "$ref": "#/$defs/BiasIpParam"
      }
    },
    "required": [
      "api_key"
    ],
    "$defs": {
      "ApiKeyParam": {
        "description": "Your API Key. Typically beings `ak_`.\n\nAvailable from your dashboard\n",
        "example": "ak_test",
        "title": "API Key",
        "type": "string"
      },
      "CountryIsoParam": {
        "description": "Filter by country ISO code. Uses 3 letter country code (ISO 3166-1) standard.\nFilter by multiple countries with a comma separated list. E.g. `GBR,IRL`",
        "example": "GBR",
        "title": "Country",
        "type": "string"
      },
      "BiasCountryIsoParam": {
        "description": "Bias by country ISO code. Uses 3 letter country code (ISO 3166-1) standard.\nBias by multiple countries with a comma separated list. E.g. `GBR,IRL`",
        "example": "GBR",
        "title": "Country",
        "type": "string"
      },
      "BiasLonLatParam": {
        "description": "Bias search to a geospatial circle determined by an origin and radius in meters. Max radius is `50000`.  Uses the format bias_lonlat=[longitude],[latitude],[radius in metres] Only one geospatial bias may be provided",
        "example": "-2.095,57.15,100",
        "title": "Bias Lon/Lat",
        "type": "string"
      },
      "BiasIpParam": {
        "description": "Biases search based on approximate geolocation of IP address.\nSet `bias_ip=true` to enable.",
        "enum": [
          "true"
        ],
        "example": "true",
        "title": "Bias query by Geolocation of IP",
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api.ideal-postcodes.co.uk/v1/places{?api_key,query,country_iso,bias_country_iso,bias_lonlat,bias_ip}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Place Search Response"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**",
            "**message**",
            [
              "**result**",
              {
                "$ul": [
                  "**hits**: List of up to 10 matching places"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error Response"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: `400X` type error response code",
            "**message**: Bad request error description",
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
