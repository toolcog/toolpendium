{
  "name": "AddressAutocomplete",
  "description": "The address autocomplete API returns a list of address suggestions that match the query ordered by relevance.\n\nThis API can be used to power realtime address finders, also known as address autofill or address autocomplete.\n\nConsider using our Address Autocomplete JavaScript libraries to add address lookup to a form in moments.\n\n## Implementing Address Autocomplete\n\nRapid address autocompletion using our Address Autocomplete API is a 2 step process.\n\n1. Retrieve partial address suggestions via `/autocomplete/addresses`\n2. Retrieve the entire address with the ID provided in the suggestion\n\nStep 2 will decrement your lookup balance.\n\nPlease note, this API is not intended to be a free standalone resource.\n\n## Filters\n\nYou can strictly narrow your result by adding filters to your querystring. For instance, you can restrict to postcode `SW1A 2AA` by appending `postcode=sw1a2aa`.\n\nIf a filter term is invalid, e.g. `postcode=SW1A2AAA`, then an empty result set is returned and no lookup is incurred.\n\nYou can also scope using multiple terms for the same filter with a comma separated list of terms. E.g. Restrict results to E1, E2 and E3 outward codes: `postcode_outward=e1,e2,e3`. Multiple terms are `OR`'ed, i.e. the matching result sets are combined.\n\nAll filters can accept multiple terms unless stated otherwise below.\n\nFilters can also be combined. E.g. Restrict results to small user organisations in the N postcode area: `su_organisation_indicator=Y&postcode_area=n`. Multiple filters are `AND`'ed, i.e. each additional filter narrows the result set.\n\nA maximum of **10** terms are allowed across all filters.\n\n## Biases\n\nYou can boost certain addresses results that match specific address criteria. All bias searches are prefixed with `bias_`.\n\nBiasing (unlike filtering) also allow unmatched addresses to appear with lower precedence.\n\nFor instance, can boost addresses with postcode areas `SW` and `SE` by appending `bias_postcode_area=SW,SE`.\n\nNo bias effect applies to bias terms that are invalid. e.g. `bias_postcode=SW1A2AAA`\n\nYou may scope using multiple terms for the same bias with a comma separated list of terms. E.g. Restrict results to `E1`, `E2` and `E3` outward codes: <code>bias_postcode_outward=e1,e2,e3</code>.\n\nAll biases can accept multiple terms unless stated otherwise below.\n\nA combined maximum of **5** terms are allowed across all biases.\n\n## Suggestion Format\n\nThe suggestion format is prone to change over time. Attempts to parse the suggestion may result in your integration breaking. Instead use the suggestion as-is.\n\n## Rate Limiting\n\nYou can make up to 3000 requests to the autocomplete API within a 5 minute span. The HTTP Header contains information on your current rate limit.\n\n| Header                  | Description                                                                            |\n| ----------------------- | -------------------------------------------------------------------------------------- |\n| `X-RateLimit-Limit`     | The maximum number of requests that can be made in 5 minutes                           |\n| `X-RateLimit-Remaining` | The remaining requests within the current rate limit window                            |\n| `X-RateLimit-Reset`     | The time when the rate limit window resets in Unix Time (seconds) or UTC Epoch seconds |\n\n## Pricing\n\nThis API currently does not affect your balance. However, resolving a suggestion into a full address requires a paid request.\n\nPlease note, this API is not intended as a standalone free resource. Integrations that consistently make autocomplete requests without a paid request to resolve an address may be disrupted via tightened rate limits. Continued misuse will result in account suspension.\n",
  "parameters": {
    "type": "object",
    "properties": {
      "api_key": {
        "$ref": "#/$defs/ApiKeyParam"
      },
      "query": {
        "type": "string",
        "description": "Specifies the address you wish to query. Query can be shortened to `q=`"
      },
      "context": {
        "$ref": "#/$defs/Context"
      },
      "limit": {
        "$ref": "#/components/schemas/LimitParam",
        "description": "Limits number of address suggestions unless a postcode is detected. In this instance entire list of addreses for that postcode is returned.\n"
      },
      "postcode_outward": {
        "$ref": "#/$defs/PostcodeOutwardParam"
      },
      "postcode": {
        "$ref": "#/$defs/PostcodeParam"
      },
      "postcode_area": {
        "$ref": "#/$defs/PostcodeAreaParam"
      },
      "postcode_sector": {
        "$ref": "#/$defs/PostcodeSectorParam"
      },
      "post_town": {
        "$ref": "#/$defs/PostTownParam"
      },
      "uprn": {
        "$ref": "#/$defs/UPRNParam"
      },
      "country": {
        "$ref": "#/$defs/CountryParam"
      },
      "postcode_type": {
        "$ref": "#/$defs/PostcodeTypeParam"
      },
      "su_organisation_indicator": {
        "$ref": "#/$defs/SmallUserParam"
      },
      "box": {
        "$ref": "#/$defs/BoxParam"
      },
      "bias_postcode_outward": {
        "$ref": "#/$defs/BiasPostcodeOutwardParam"
      },
      "bias_postcode": {
        "$ref": "#/$defs/BiasPostcodeParam"
      },
      "bias_postcode_area": {
        "$ref": "#/$defs/BiasPostcodeAreaParam"
      },
      "bias_postcode_sector": {
        "$ref": "#/$defs/BiasPostcodeSectorParam"
      },
      "bias_post_town": {
        "$ref": "#/$defs/BiasPosttownParam"
      },
      "bias_thoroughfare": {
        "$ref": "#/$defs/BiasThoroughfareParam"
      },
      "bias_country": {
        "$ref": "#/$defs/BiasCountryParam"
      },
      "bias_lonlat": {
        "$ref": "#/$defs/BiasLonLatParam"
      },
      "bias_ip": {
        "$ref": "#/$defs/BiasIpParam"
      }
    },
    "$defs": {
      "ApiKeyParam": {
        "description": "Your API Key. Typically beings `ak_`.\n\nAvailable from your dashboard\n",
        "example": "ak_test",
        "title": "API Key",
        "type": "string"
      },
      "Context": {
        "description": "Limits search results within a geographical boundary or country.",
        "title": "Context",
        "type": "string"
      },
      "PostcodeOutwardParam": {
        "description": "Filter by outward code.",
        "example": "1AA",
        "title": "Postcode Outward",
        "type": "string"
      },
      "PostcodeParam": {
        "description": "Filter by postcode. Can be combined with query to perform a postcode + building number/name search.",
        "example": "SW1A 2AA",
        "title": "Postcode",
        "type": "string"
      },
      "PostcodeAreaParam": {
        "description": "Filter by postcode. Can be combined with query to perform a postcode + building number/name search.",
        "example": "SW",
        "title": "Postcode Area",
        "type": "string"
      },
      "PostcodeSectorParam": {
        "description": "Filter by postcode sector, the outward code plus first numeric of the inward code. ",
        "example": "SW1A 2",
        "title": "Postcode Sector",
        "type": "string"
      },
      "PostTownParam": {
        "description": "Filter by town. ",
        "example": "London",
        "title": "Post Town",
        "type": "string"
      },
      "UPRNParam": {
        "description": "Filters by UPRN. Does not accept comma separated terms. Only a single term is permitted",
        "example": "100023336956",
        "title": "UPRN",
        "type": "integer"
      },
      "CountryParam": {
        "description": "Filter by country. Possible values are England, Scotland, Wales, Northern Ireland, Jersey, Guernsey and Isle of Man.",
        "example": "England",
        "title": "Country",
        "type": "string"
      },
      "PostcodeTypeParam": {
        "description": "Filter by Postcode Type. Useful for separating organisational and residential addresses",
        "example": "L",
        "title": "Country",
        "type": "string"
      },
      "SmallUserParam": {
        "description": "Filter by Organisation Indicator. Useful for separating organisational and residential addresses",
        "example": "Y",
        "title": "SU Organisation Indicator",
        "type": "string"
      },
      "BoxParam": {
        "description": "Restrict search to a geospatial box determined by the \"top-left\" and \"bottom-right\" gelocations.   Only one geospatial box can be provided.",
        "example": "2.095,57.15,-2.096,57.14",
        "title": "Box",
        "type": "string"
      },
      "BiasPostcodeOutwardParam": {
        "description": "Bias by outward code",
        "title": "Bias Postcode Outward",
        "type": "string"
      },
      "BiasPostcodeParam": {
        "description": "Bias by postcode. Can be combined with query to perform a postcode + building number/name search.",
        "example": "/addresses?postcode=SW1A2AA&q=10",
        "title": "Bias Postcode",
        "type": "string"
      },
      "BiasPostcodeAreaParam": {
        "description": "Bias by postcode area, the first one or two non-numeric characters of a postcode.",
        "example": "The postcode area of SW1A 2AA and N1 6RT are SW and N respectively",
        "title": "Bias Postcode Area",
        "type": "string"
      },
      "BiasPostcodeSectorParam": {
        "description": "Bias by postcode sector, the outward code plus first numeric of the inward code.",
        "example": "SW1A 2AA is SW1A 2",
        "title": "Bias Postcode Sector",
        "type": "string"
      },
      "BiasPosttownParam": {
        "description": "Bias by town.",
        "title": "Bias Post Town",
        "type": "string"
      },
      "BiasThoroughfareParam": {
        "description": "Bias by street name.",
        "title": "Bias Thoroughfare",
        "type": "string"
      },
      "BiasCountryParam": {
        "description": "Bias by country. Possible values are England, Scotland, Wales, Northern Ireland, Jersey, Guernsey and Isle of Man.",
        "title": "Bias Country",
        "type": "string"
      },
      "BiasLonLatParam": {
        "description": "Bias search to a geospatial circle determined by an origin and radius in meters. Max radius is `50000`.  Uses the format bias_lonlat=[longitude],[latitude],[radius in metres] Only one geospatial bias may be provided",
        "example": "-2.095,57.15,100",
        "title": "Bias Lon/Lat",
        "type": "string"
      },
      "BiasIpParam": {
        "description": "Biases search based on approximate geolocation of IP address.\nSet `bias_ip=true` to enable.",
        "enum": [
          "true"
        ],
        "example": "true",
        "title": "Bias query by Geolocation of IP",
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api.ideal-postcodes.co.uk/v1/autocomplete/addresses{?api_key,query,context,limit,postcode_outward,postcode,postcode_area,postcode_sector,post_town,uprn,country,postcode_type,su_organisation_indicator,box,bias_postcode_outward,bias_postcode,bias_postcode_area,bias_postcode_sector,bias_post_town,bias_thoroughfare,bias_country,bias_lonlat,bias_ip}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Address Autocomplete Response"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**",
            "**message**",
            [
              "**result**",
              {
                "$ul": [
                  "**hits**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error Response"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**: `400X` type error response code",
            "**message**: Bad request error description",
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
