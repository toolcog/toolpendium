{
  "name": "admin_conversations_search",
  "description": "Search for public or private channels in an Enterprise organization.",
  "parameters": {
    "type": "object",
    "properties": {
      "token": {
        "type": "string",
        "description": "Authentication token. Requires scope: `admin.conversations:read`"
      },
      "team_ids": {
        "type": "string",
        "description": "Comma separated string of team IDs, signifying the workspaces to search through."
      },
      "query": {
        "type": "string",
        "description": "Name of the the channel to query by."
      },
      "limit": {
        "type": "integer",
        "description": "Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10."
      },
      "cursor": {
        "type": "string",
        "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page."
      },
      "search_channel_types": {
        "type": "string",
        "description": "The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types)."
      },
      "sort": {
        "type": "string",
        "description": "Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted "
      },
      "sort_dir": {
        "type": "string",
        "description": "Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)"
      }
    },
    "required": [
      "token"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://slack.com/api/admin.conversations.search{?team_ids,query,limit,cursor,search_channel_types,sort,sort_dir}"
    },
    "headers": {
      "token": {
        "$": "token"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "admin.conversations.search schema"
        },
        "Schema for successful response of admin.conversations.search",
        "**Key properties:**",
        {
          "$ul": [
            "**channels**",
            "**next_cursor**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "admin.conversations.search error schema"
        },
        "Schema for error response from admin.conversations.search",
        "**Key properties:**",
        {
          "$ul": [
            "**error**",
            "**ok**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
