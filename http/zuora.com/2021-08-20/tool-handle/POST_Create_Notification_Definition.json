{
  "name": "POST_Create_Notification_Definition",
  "description": "Creates a notification definition. If a filter rule is specified, it will be evaluated to\nsee if the notification definition is qualified to handle the incoming events \nduring runtime. If the notification is qualified, it will send the email and\ninvoke the callout if it has an email template or a callout. See a step-by-step guide for\n[creating a custom notification](https://www.zuora.com/developer/api-guides/#Callout-to-external-system-for-provisioning-or-entitlements)\nin [Zuora API Guides](https://www.zuora.com/developer/api-guides/).\n\n**Note**: This operation is only applicable to notifications for custom events.\n",
  "parameters": {
    "type": "object",
    "properties": {
      "Authorization": {
        "type": "string",
        "description": "`Bearer {token}` for a valid OAuth token.\n\nNote that you must regenerate the OAuth token after the Custom Events feature is enabled in your Zuora tenant. The OAuth tokens generated before this feature is turned on will not work.\n"
      },
      "Zuora-Track-Id": {
        "maxLength": 64,
        "type": "string",
        "description": "A custom identifier for tracing the API call. If you set a value for this header, Zuora returns the same value in the response headers. This header enables you to associate your system process identifiers with Zuora API calls, to assist with troubleshooting in the event of an issue.\n\nThe value of this field must use the US-ASCII character set and must not include any of the following characters: colon (`:`), semicolon (`;`), double quote (`\"`), and quote (`'`).\n"
      },
      "Zuora-Entity-Ids": {
        "type": "string",
        "description": "An entity ID. If you have [Zuora Multi-entity](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/Multi-entity) enabled and the OAuth token is valid for more than one entity, you must use this header to specify which entity to perform the operation in. If the OAuth token is only valid for a single entity, or you do not have Zuora Multi-entity enabled, you do not need to set this header.\n"
      }
    },
    "required": [
      "Authorization"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://rest.zuora.com/notifications/notification-definitions"
    },
    "headers": {
      "Authorization": {
        "$": "Authorization"
      },
      "Zuora-Track-Id": {
        "$": "Zuora-Track-Id"
      },
      "Zuora-Entity-Ids": {
        "$": "Zuora-Entity-Ids"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**active**: The status of the notification definition. The default value is true.",
            [
              "**callout**",
              {
                "$ul": [
                  "**active**: The status of the callout. The default is true. (default: true)",
                  [
                    "**calloutAuth**: If requiredAuth is true, this object is required.",
                    {
                      "$ul": [
                        "**domain**: The domain of the callout auth.",
                        "**password**: The field is required when requiredAuth is true.",
                        "**preemptive**: Set this field to `true` if you want to enable the preemptive authentication.",
                        "**username**: The field is required when requiredAuth is true."
                      ]
                    }
                  ],
                  "**calloutBaseurl**: The callout URL. It must start with 'https://'",
                  "**calloutParams**: A key-value map of merge fields of this callout.",
                  "**calloutRetry**: Specified whether to retry the callout when the callout fails. The default is true. (default: true)",
                  "**description**: Description for the callout.",
                  "**eventTypeName**: The name of the event type.",
                  "**httpMethod**: The HTTP method of the callout.",
                  "**id**: The ID of the callout. If `calloutActive` is true, a callout is required. The eventTypeName of the callout MUST be the same as the eventTypeName.",
                  "**name**: The name of the created callout.",
                  "**requiredAuth**: Specifies whether the callout requires auth."
                ]
              }
            ],
            "**calloutActive**: The status of the callout action. The default value is false.",
            "**communicationProfileId**: The profile that the notification definition belongs to.",
            "**createdBy**: The ID of the user who created the notification definition.",
            "**createdOn**: The time when the notification definition was created. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00",
            "**description**: Description of the notification definition",
            "**emailActive**: The status of the email action. The default value is false.",
            "**emailTemplateId**: The ID of the email template. In the request, there should be at least one email template or callout.",
            "**eventTypeName**: The name of the event type.",
            "**eventTypeNamespace**: The namespace of the `eventTypeName` field. ",
            [
              "**filterRule**: ",
              {
                "$ul": [
                  "**condition**: The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/).",
                  "**description**: The description of the filter rule.",
                  "**eventTypeName**: The value is `null`.",
                  "**id**: The ID of the filter rule. If not specified or null, the notification definition is always qualified to process events of \"eventType\".",
                  "**parameters**: The parameters of the filter rule and their name must match those in the filter rule. And all parameters must be defined in the event type payload. The name of parameters can't be duplicate. The following reserved keywords should not be used as a parameter name: `AttachmentList`, `RecipientList`, `RecipientType`, `Exceptions`, `OCP_OBJECT_TYPE`, `OCP_OBJECT_ID`, `OCP_TRIGGER_BY`"
                ]
              }
            ],
            "**filterRuleParams**: The parameter values used to configure the filter rule.",
            "**id**: The filter rule associated with this notification definition.",
            "**name**: The name of the notification definition.",
            "**updatedBy**: The ID of the user who updated the notification definition.",
            "**updatedOn**: The time when the notification was updated. Specified in the UTC timezone in the ISO860 format (YYYY-MM-DDThh:mm:ss.sTZD). E.g. 1997-07-16T19:20:30.45+00:00"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**reasons**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**reasons**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "405": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**reasons**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "415": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**reasons**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**reasons**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
