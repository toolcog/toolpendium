{
  "name": "createNodes",
  "description": "Use the provided array of node information to create new nodes",
  "parameters": {
    "type": "object",
    "properties": {
      "body": {
        "$ref": "#/$defs/node-add"
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "node-add": {
        "items": {
          "properties": {
            "agentKey": {
              "$ref": "#/$defs/agent-key"
            },
            "hostname": {
              "description": "The fully qualified name of the node",
              "example": "my.node.hostname.local",
              "type": "string"
            },
            "id": {
              "description": "The Rudder node unique identifier in /opt/rudder/etc/uuid.hive",
              "example": "378740d3-c4a9-4474-8485-478e7e52db52",
              "type": "string"
            },
            "ipAddresses": {
              "description": "an array of IPs.",
              "items": {
                "example": "192.168.180.90",
                "type": "string"
              },
              "type": "array"
            },
            "machineType": {
              "description": "The kind of machine for the node (use vm for a generic VM)",
              "enum": [
                "vmware",
                "physical",
                "vm",
                "solariszone",
                "qemu",
                "xen",
                "aixlpar",
                "hyperv",
                "bsdjail"
              ],
              "type": "string"
            },
            "os": {
              "$ref": "#/$defs/os"
            },
            "policyMode": {
              "description": "The policy mode for the node. Can only be specified when status=accepted. If not specified, the default (global) mode will be used",
              "enum": [
                "enforce",
                "audit"
              ],
              "type": "string"
            },
            "policyServerId": {
              "description": "The policy server ID for that node. By default, \"root\"",
              "example": "root",
              "type": "string"
            },
            "properties": {
              "description": "Node properties (either set by user or filled by third party sources)",
              "items": {
                "properties": {
                  "name": {
                    "description": "Property name",
                    "example": "datacenter",
                    "type": "string"
                  },
                  "value": {
                    "description": "Property value (can be a string or JSON object)",
                    "example": "AMS2",
                    "format": "string or JSON"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "state": {
              "description": "Node lifecycle state. Can only be specified when status=accepted. If not specified, enable is used",
              "enum": [
                "enabled",
                "ignored",
                "empty-policies",
                "initializing",
                "preparing-eol"
              ],
              "type": "string"
            },
            "status": {
              "description": "Target status of the node",
              "enum": [
                "accepted",
                "pending"
              ],
              "type": "string"
            },
            "timezone": {
              "$ref": "#/$defs/timezone"
            }
          },
          "required": [
            "id",
            "hostname",
            "status",
            "os",
            "machineType",
            "properties",
            "ipAddresses"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "agent-key": {
        "description": "Information about agent key or certificate",
        "properties": {
          "status": {
            "description": "Certification status of the security token (reset to `undefined` to trust a new certificate). If `certified`, inventory signature check will be enforced",
            "enum": [
              "certified",
              "undefined"
            ],
            "type": "string"
          },
          "value": {
            "description": "Certificate (or public key for <6.0 agents) used by the agent. Be careful write a \"\\n\" after header line and before footer line, JSON does not keep formatting in string.",
            "example": "-----BEGIN CERTIFICATE-----\nMIIFqDCC[...]3tALNn\n-----END CERTIFICATE-----",
            "format": "PEM",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "os": {
        "properties": {
          "fullName": {
            "description": "The long description name of the os",
            "example": "Debian GNU/Linux 9 (stretch)",
            "type": "string"
          },
          "name": {
            "description": "For Linux, a distribution, for Windows, the commercial name",
            "enum": [
              "debian",
              "kali",
              "ubuntu",
              "redhat",
              "centos",
              "fedora",
              "suse",
              "oracle",
              "scientific",
              "slackware",
              "xp",
              "vista",
              "seven",
              "10",
              "2000",
              "2003",
              "2008 r2",
              "2012",
              "2012 r2",
              "2016"
            ],
            "type": "string"
          },
          "servicePack": {
            "description": "a service pack informationnal string",
            "type": "string"
          },
          "type": {
            "enum": [
              "linux",
              "windows",
              "solaris",
              "aix",
              "freebsd",
              "unknown"
            ],
            "type": "string"
          },
          "version": {
            "description": "A string representation of the version",
            "example": "9.5",
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "version",
          "fullName"
        ],
        "type": "object"
      },
      "timezone": {
        "description": "Timezone information of the node.",
        "properties": {
          "name": {
            "description": "The standard name of the timezone",
            "example": "CEST",
            "type": "string"
          },
          "offset": {
            "description": "Timezone offset compared to UTC, in +/-HHMM format",
            "example": 200,
            "type": "string"
          }
        },
        "required": [
          "name",
          "offset"
        ],
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://rudder.example.local/rudder/api/latest/nodes"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**action**: The id of the action",
            [
              "**data**",
              {
                "$ul": [
                  "**created**",
                  "**failed**"
                ]
              }
            ],
            "**result**: Result of the request"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
