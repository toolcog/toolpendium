{
  "name": "getAllSettings",
  "description": "Get the current value of all the settings",
  "parameters": {
    "type": "object"
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://rudder.example.local/rudder/api/latest/settings"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**action**: The id of the action",
            [
              "**data**: Information about the setting",
              {
                "$ul": [
                  [
                    "**settings**",
                    {
                      "$ul": [
                        "**allowed_networks**: List of allowed networks for each policy server (root and relays)",
                        "**change_message_prompt**: Explanation to display",
                        "**display_recent_changes_graphs**: Display changes graphs",
                        "**enable_change_message**: Enable change audit logs",
                        "**enable_change_request**: Enable Change Requests",
                        "**enable_javascript_directives**: Enable script evaluation in Directives",
                        "**enable_self_deployment**: Allow self deployment",
                        "**enable_self_validation**: Allow self validation",
                        "**first_run_hour**: First agent run time - hour",
                        "**first_run_minute**: First agent run time - minute",
                        "**global_policy_mode**: Define the default setting for global policy mode",
                        "**global_policy_mode_overridable**: Allow overrides on this default setting",
                        "**heartbeat_frequency**: Send heartbeat every heartbeat_frequency runs (only on **changes-only** compliance mode)",
                        "**mandatory_change_message**: Make message mandatory",
                        "**modified_file_ttl**: Number of days to retain modified files",
                        "**node_accept_duplicated_hostname**: Allow acceptation of a pending node when another one with the same hostname is already accepted (default: false)",
                        "**node_onaccept_default_policyMode**: Default policy mode for accepted node",
                        "**node_onaccept_default_state**: Set default state for node when they are accepted within Rudder",
                        "**output_file_ttl**: Number of days to retain agent output files",
                        "**relay_server_synchronization_method**: Method used to synchronize data between server and relays, either \"classic\" (agent protocol, default), \"rsync\" (use rsync to synchronize, that you'll need to be manually set up), or \"disabled\" (use third party system to transmit data)",
                        "**relay_server_synchronize_policies**: If **rsync** is set as a synchronization method, use rsync to synchronize policies between Rudder server and relays. If false, you'll have to synchronize policies yourself.",
                        "**relay_server_synchronize_shared_files**: If **rsync** is set as a synchronization method, use rsync to synchronize shared files between Rudder server and relays. If false, you'll have to synchronize shared files yourself.",
                        "**reporting_mode**: Compliance reporting mode",
                        "**require_time_synchronization**: Require time synchronization between nodes and policy server",
                        "**rudder_compute_changes**: Compute list of changes (repaired reports) per rule (default: true)",
                        "**rudder_compute_dyngroups_max_parallelism**: Set the parallelism to compute dynamic group, as a number of thread (i.e. 4), or a multiplicative of the number of core (x0.5) (default: 1)",
                        "**rudder_generation_compute_dyngroups**: Recompute all dynamic groups at the start of policy generation (default: true)",
                        "**rudder_generation_continue_on_error**: Policy generation continues on error during NodeConfiguration evaluation (default: false)",
                        "**rudder_generation_delay**: Set a delay before starting policy generation, this will allow you to accumulate changes before they are deployed to Nodes, and can also lessen webapp resources needs. The value is a number followed by the time unit needed (seconds/s, minutes/m, hours/h ...), ie \"5m\" for 5 minutes (default: 0 seconds)",
                        "**rudder_generation_js_timeout**: Policy generation JS evaluation of directive parameter timeout in seconds (default: 30)",
                        "**rudder_generation_max_parallelism**: Set the policy generation parallelism, either as an number of thread (i.e. 4), or a multiplicative of the number of core (x0.5) (default: x0.5)",
                        "**rudder_generation_policy**: Should policy generation be triggered automatically after a change (value 'all'), or should we wait until a manual launch (through api or UI, value 'onlyManual') or even no policy generation at all (value \"none\") (default: all)",
                        "**rudder_report_protocol_default**: Default reporting protocol used",
                        "**rudder_save_db_compliance_details**: Store all compliance details in database (default: false)",
                        "**rudder_save_db_compliance_levels**: Store all compliance levels in database (default: true)",
                        "**rudder_verify_certificates**: Enforce certificate validation in all HTTPS calls (default: false)",
                        "**run_frequency**: Agent run schedule - time between agent runs (in minutes)",
                        "**send_metrics**: Send anonymous usage statistics",
                        "**splay_time**: Maximum delay after scheduled run time (random interval)",
                        "**unexpected_unbound_var_values**: Allows multiple reports for configuration based on a multivalued variable (default: true)"
                      ]
                    }
                  ]
                ]
              }
            ],
            "**result**: Result of the request"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
