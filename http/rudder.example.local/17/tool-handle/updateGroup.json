{
  "name": "updateGroup",
  "description": "Update detailed information about a group",
  "parameters": {
    "type": "object",
    "properties": {
      "groupId": {
        "example": "9a1773c9-0889-40b6-be89-f6504443ac1b",
        "format": "uuid",
        "type": "string",
        "description": "Id of the group"
      },
      "body": {
        "$ref": "#/$defs/group-update"
      }
    },
    "required": [
      "groupId",
      "body"
    ],
    "$defs": {
      "group-update": {
        "properties": {
          "category": {
            "description": "Id of the new group's category",
            "example": "e17ecf6a-a9f2-44de-a97c-116d24d30ff4",
            "format": "uuid",
            "type": "string"
          },
          "description": {
            "description": "Group description",
            "example": "Documentation for the group",
            "type": "string"
          },
          "displayName": {
            "description": "Name of the group",
            "example": "Ubuntu 18.04 nodes",
            "type": "string"
          },
          "dynamic": {
            "default": true,
            "description": "Should the group be dynamically refreshed (if not, it is a static group)",
            "type": "boolean"
          },
          "enabled": {
            "default": true,
            "description": "Enable or disable the group",
            "type": "boolean"
          },
          "query": {
            "description": "The criteria defining the group. If not provided, the group will be empty.",
            "properties": {
              "composition": {
                "default": "and",
                "description": "Boolean operator to use between each  `where` criteria.",
                "enum": [
                  "and",
                  "or"
                ],
                "example": "and",
                "type": "string"
              },
              "select": {
                "default": "node",
                "description": "What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.",
                "type": "string"
              },
              "where": {
                "description": "List of criteria",
                "items": {
                  "properties": {
                    "attribute": {
                      "description": "Attribute to compare",
                      "example": "OS",
                      "type": "string"
                    },
                    "comparator": {
                      "description": "Comparator to use",
                      "example": "eq",
                      "type": "string"
                    },
                    "objectType": {
                      "description": "Type of the object",
                      "example": "node",
                      "type": "string"
                    },
                    "value": {
                      "description": "Value to compare against",
                      "example": "Linux",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://rudder.example.local/rudder/api/latest/groups/{groupId}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**action**: The id of the action",
            [
              "**data**",
              {
                "$ul": [
                  "**groups**"
                ]
              }
            ],
            "**result**: Result of the request"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
