{
  "name": "getTeamEventMatches",
  "description": "Gets a list of matches for the given team and event.",
  "parameters": {
    "type": "object",
    "properties": {
      "If-None-Match": {
        "type": "string",
        "description": "Value of the `ETag` header in the most recently cached response by the client."
      },
      "team_key": {
        "type": "string",
        "description": "TBA Team Key, eg `frc254`"
      },
      "event_key": {
        "type": "string",
        "description": "TBA Event Key, eg `2016nytr`"
      }
    },
    "required": [
      "team_key",
      "event_key"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://www.thebluealliance.com/api/v3/team/{team_key}/event/{event_key}/matches"
    },
    "headers": {
      "If-None-Match": {
        "$": "If-None-Match"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "List"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**actual_time**: UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.",
            [
              "**alliances**: A list of alliances, the teams on the alliances, and their score.",
              {
                "$ul": [
                  [
                    "**blue**",
                    {
                      "$ul": [
                        "**dq_team_keys**: TBA team keys (eg `frc254`) of any disqualified teams.",
                        "**score**: Score for this alliance. Will be null or -1 for an unplayed match.",
                        "**surrogate_team_keys**: TBA team keys (eg `frc254`) of any teams playing as a surrogate.",
                        "**team_keys**"
                      ]
                    }
                  ],
                  [
                    "**red**",
                    {
                      "$ul": [
                        "**dq_team_keys**: TBA team keys (eg `frc254`) of any disqualified teams.",
                        "**score**: Score for this alliance. Will be null or -1 for an unplayed match.",
                        "**surrogate_team_keys**: TBA team keys (eg `frc254`) of any teams playing as a surrogate.",
                        "**team_keys**"
                      ]
                    }
                  ]
                ]
              }
            ],
            "**comp_level**: The competition level the match was played at.",
            "**event_key**: Event key of the event the match was played at.",
            "**key**: TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.",
            "**match_number**: The match number of the match in the competition level.",
            "**post_result_time**: UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.",
            "**predicted_time**: UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.",
            "**score_breakdown**: Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.",
            "**set_number**: The set number in a series of matches where more than one match is required in the match series.",
            "**time**: UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.",
            "**videos**: Array of video objects associated with this match.",
            "**winning_alliance**: The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie."
          ]
        },
        {
          "$each": "$.body.*",
          "$as": "item",
          "$block": [
            {
              "$h2": "Item"
            },
            {
              "$lang": "json",
              "$code": {
                "$encode": "json",
                "$indent": true,
                "$content": {
                  "$": "$.item"
                }
              }
            }
          ]
        }
      ]
    }
  }
}
