{
  "name": "get_task_instances_batch",
  "description": "List task instances from all DAGs and DAG runs.\nThis endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL length limits.\n",
  "parameters": {
    "type": "object",
    "properties": {
      "body": {
        "$ref": "#/$defs/ListTaskInstanceForm"
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "ListTaskInstanceForm": {
        "properties": {
          "dag_ids": {
            "description": "Return objects with specific DAG IDs.\nThe value can be repeated to retrieve multiple matching values (OR condition).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "duration_gte": {
            "description": "Returns objects greater than or equal to the specified values.\n\nThis can be combined with duration_lte parameter to receive only the selected period.\n",
            "type": "number"
          },
          "duration_lte": {
            "description": "Returns objects less than or equal to the specified values.\n\nThis can be combined with duration_gte parameter to receive only the selected range.\n",
            "type": "number"
          },
          "end_date_gte": {
            "description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n",
            "format": "date-time",
            "type": "string"
          },
          "end_date_lte": {
            "description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n",
            "format": "date-time",
            "type": "string"
          },
          "execution_date_gte": {
            "description": "Returns objects greater or equal to the specified date.\n\nThis can be combined with execution_date_lte parameter to receive only the selected period.\n",
            "format": "date-time",
            "type": "string"
          },
          "execution_date_lte": {
            "description": "Returns objects less than or equal to the specified date.\n\nThis can be combined with execution_date_gte parameter to receive only the selected period.\n",
            "format": "date-time",
            "type": "string"
          },
          "pool": {
            "description": "The value can be repeated to retrieve multiple matching values (OR condition).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "queue": {
            "description": "The value can be repeated to retrieve multiple matching values (OR condition).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "start_date_gte": {
            "description": "Returns objects greater or equal the specified date.\n\nThis can be combined with start_date_lte parameter to receive only the selected period.\n",
            "format": "date-time",
            "type": "string"
          },
          "start_date_lte": {
            "description": "Returns objects less or equal the specified date.\n\nThis can be combined with start_date_gte parameter to receive only the selected period.\n",
            "format": "date-time",
            "type": "string"
          },
          "state": {
            "description": "The value can be repeated to retrieve multiple matching values (OR condition).",
            "items": {
              "$ref": "#/$defs/TaskState"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TaskState": {
        "description": "Task state.\n\n*Changed in version 2.0.2*&#58; 'removed' is added as a possible value.\n\n*Changed in version 2.2.0*&#58; 'deferred' is added as a possible value.\n\n*Changed in version 2.4.0*&#58; 'sensing' state has been removed.\n*Changed in version 2.4.2*&#58; 'restarting' is added as a possible value\n",
        "enum": [
          "success",
          "running",
          "failed",
          "upstream_failed",
          "skipped",
          "up_for_retry",
          "up_for_reschedule",
          "queued",
          "none",
          "scheduled",
          "deferred",
          "removed",
          "restarting"
        ],
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "/api/v1/dags/~/dagRuns/~/taskInstances/list"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Metadata about collection.",
        "**Key properties:**",
        {
          "$ul": [
            "**task_instances**",
            "**total_entries**: Count of total objects in the current result set before pagination parameters"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: A human-readable explanation specific to this occurrence of the problem.",
            "**instance**: A URI reference that identifies the specific occurrence of the problem. It may or may",
            "**status**: The HTTP status code generated by the API server for this occurrence of the problem.",
            "**title**: A short, human-readable summary of the problem type.",
            "**type**: A URI reference [RFC3986] that identifies the problem type. This specification"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: A human-readable explanation specific to this occurrence of the problem.",
            "**instance**: A URI reference that identifies the specific occurrence of the problem. It may or may",
            "**status**: The HTTP status code generated by the API server for this occurrence of the problem.",
            "**title**: A short, human-readable summary of the problem type.",
            "**type**: A URI reference [RFC3986] that identifies the problem type. This specification"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.\n",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: A human-readable explanation specific to this occurrence of the problem.",
            "**instance**: A URI reference that identifies the specific occurrence of the problem. It may or may",
            "**status**: The HTTP status code generated by the API server for this occurrence of the problem.",
            "**title**: A short, human-readable summary of the problem type.",
            "**type**: A URI reference [RFC3986] that identifies the problem type. This specification"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
