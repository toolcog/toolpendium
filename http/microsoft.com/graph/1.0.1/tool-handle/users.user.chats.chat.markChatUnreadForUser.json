{
  "name": "users_user_chats_chat_markChatUnreadForUser",
  "description": "Mark a chat as unread for a user.",
  "parameters": {
    "type": "object",
    "properties": {
      "user-id": {
        "type": "string",
        "description": "key: id of user"
      },
      "chat-id": {
        "type": "string",
        "description": "key: id of chat"
      },
      "body": {
        "properties": {
          "lastMessageReadDateTime": {
            "format": "date-time",
            "nullable": true,
            "pattern": "^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$",
            "type": "string"
          },
          "user": {
            "anyOf": [
              {
                "$ref": "#/$defs/microsoft.graph.teamworkUserIdentity"
              },
              {
                "nullable": true,
                "type": "object"
              }
            ]
          }
        },
        "type": "object",
        "description": "Action parameters"
      }
    },
    "required": [
      "user-id",
      "chat-id",
      "body"
    ],
    "$defs": {
      "microsoft.graph.teamworkUserIdentity": {
        "allOf": [
          {
            "$ref": "#/$defs/microsoft.graph.identity"
          },
          {
            "properties": {
              "@odata.type": {
                "default": "#microsoft.graph.teamworkUserIdentity",
                "type": "string"
              },
              "userIdentityType": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/microsoft.graph.teamworkUserIdentityType"
                  },
                  {
                    "nullable": true,
                    "type": "object"
                  }
                ],
                "description": "Type of user. Possible values are: aadUser, onPremiseAadUser, anonymousGuest, federatedUser, personalMicrosoftAccountUser, skypeUser, phoneUser, unknownFutureValue and emailUser."
              }
            },
            "required": [
              "@odata.type"
            ],
            "title": "teamworkUserIdentity",
            "type": "object"
          }
        ],
        "x-ms-discriminator-value": "#microsoft.graph.teamworkUserIdentity"
      },
      "microsoft.graph.identity": {
        "discriminator": {
          "mapping": {
            "#microsoft.graph.emailIdentity": "#/components/schemas/microsoft.graph.emailIdentity",
            "#microsoft.graph.initiator": "#/components/schemas/microsoft.graph.initiator",
            "#microsoft.graph.provisionedIdentity": "#/components/schemas/microsoft.graph.provisionedIdentity",
            "#microsoft.graph.provisioningServicePrincipal": "#/components/schemas/microsoft.graph.provisioningServicePrincipal",
            "#microsoft.graph.provisioningSystem": "#/components/schemas/microsoft.graph.provisioningSystem",
            "#microsoft.graph.servicePrincipalIdentity": "#/components/schemas/microsoft.graph.servicePrincipalIdentity",
            "#microsoft.graph.sharePointIdentity": "#/components/schemas/microsoft.graph.sharePointIdentity",
            "#microsoft.graph.teamworkApplicationIdentity": "#/components/schemas/microsoft.graph.teamworkApplicationIdentity",
            "#microsoft.graph.teamworkConversationIdentity": "#/components/schemas/microsoft.graph.teamworkConversationIdentity",
            "#microsoft.graph.teamworkTagIdentity": "#/components/schemas/microsoft.graph.teamworkTagIdentity",
            "#microsoft.graph.teamworkUserIdentity": "#/components/schemas/microsoft.graph.teamworkUserIdentity",
            "#microsoft.graph.userIdentity": "#/components/schemas/microsoft.graph.userIdentity"
          },
          "propertyName": "@odata.type"
        },
        "properties": {
          "@odata.type": {
            "type": "string"
          },
          "displayName": {
            "description": "The display name of the identity. Note that this might not always be available or up to date. For example, if a user changes their display name, the API might show the new value in a future response, but the items associated with the user won't show up as having changed when using delta.",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the identity.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "@odata.type"
        ],
        "title": "identity",
        "type": "object"
      },
      "microsoft.graph.teamworkUserIdentityType": {
        "enum": [
          "aadUser",
          "onPremiseAadUser",
          "anonymousGuest",
          "federatedUser",
          "personalMicrosoftAccountUser",
          "skypeUser",
          "phoneUser",
          "unknownFutureValue",
          "emailUser"
        ],
        "title": "teamworkUserIdentityType",
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://graph.microsoft.com/v1.0/users/{user-id}/chats/{chat-id}/microsoft.graph.markChatUnreadForUser"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "4XX": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**error**",
              {
                "$ul": [
                  "**code**",
                  "**details**",
                  [
                    "**innererror**",
                    {
                      "$ul": [
                        "**@odata.type**",
                        "**Date**: Date when the error occured.",
                        "**client-request-id**: Client request Id as sent by the client application.",
                        "**request-id**: Request Id as tracked internally by the service"
                      ]
                    }
                  ],
                  "**message**",
                  "**target**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "5XX": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**error**",
              {
                "$ul": [
                  "**code**",
                  "**details**",
                  [
                    "**innererror**",
                    {
                      "$ul": [
                        "**@odata.type**",
                        "**Date**: Date when the error occured.",
                        "**client-request-id**: Client request Id as sent by the client application.",
                        "**request-id**: Request Id as tracked internally by the service"
                      ]
                    }
                  ],
                  "**message**",
                  "**target**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
