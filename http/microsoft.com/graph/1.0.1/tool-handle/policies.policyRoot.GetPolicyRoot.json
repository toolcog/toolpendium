{
  "name": "policies_policyRoot_GetPolicyRoot",
  "description": "Get policies",
  "parameters": {
    "type": "object",
    "properties": {
      "$select": {
        "items": {
          "enum": [
            "id",
            "authenticationMethodsPolicy",
            "authenticationFlowsPolicy",
            "activityBasedTimeoutPolicies",
            "authorizationPolicy",
            "claimsMappingPolicies",
            "crossTenantAccessPolicy",
            "homeRealmDiscoveryPolicies",
            "permissionGrantPolicies",
            "tokenIssuancePolicies",
            "tokenLifetimePolicies",
            "featureRolloutPolicies",
            "adminConsentRequestPolicy",
            "conditionalAccessPolicies",
            "identitySecurityDefaultsEnforcementPolicy",
            "roleManagementPolicies",
            "roleManagementPolicyAssignments"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true,
        "description": "Select properties to be returned"
      },
      "$expand": {
        "items": {
          "enum": [
            "*",
            "authenticationMethodsPolicy",
            "authenticationFlowsPolicy",
            "activityBasedTimeoutPolicies",
            "authorizationPolicy",
            "claimsMappingPolicies",
            "crossTenantAccessPolicy",
            "homeRealmDiscoveryPolicies",
            "permissionGrantPolicies",
            "tokenIssuancePolicies",
            "tokenLifetimePolicies",
            "featureRolloutPolicies",
            "adminConsentRequestPolicy",
            "conditionalAccessPolicies",
            "identitySecurityDefaultsEnforcementPolicy",
            "roleManagementPolicies",
            "roleManagementPolicyAssignments"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true,
        "description": "Expand related entities"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://graph.microsoft.com/v1.0/policies{?$select,$expand}"
    }
  },
  "responses": {
    "2XX": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "entity"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**@odata.type**",
            "**id**: The unique idenfier for an entity. Read-only.",
            "**activityBasedTimeoutPolicies**: The policy that controls the idle time out for web sessions for applications.",
            "**adminConsentRequestPolicy**: The policy by which consent requests are created and managed for the entire tenant.",
            "**authenticationFlowsPolicy**: The policy configuration of the self-service sign-up experience of external users.",
            "**authenticationMethodsPolicy**: The authentication methods and the users that are allowed to use them to sign in and perform multi-factor authentication (MFA) in Azure Active Directory (Azure AD).",
            "**authorizationPolicy**: The policy that controls Azure AD authorization settings.",
            "**claimsMappingPolicies**: The claim-mapping policies for WS-Fed, SAML, OAuth 2.0, and OpenID Connect protocols, for tokens issued to a specific application.",
            "**conditionalAccessPolicies**: The custom rules that define an access scenario.",
            "**crossTenantAccessPolicy**: The custom rules that define an access scenario when interacting with external Azure AD tenants.",
            "**featureRolloutPolicies**: The feature rollout policy associated with a directory object.",
            "**homeRealmDiscoveryPolicies**: The policy to control Azure AD authentication behavior for federated users.",
            "**identitySecurityDefaultsEnforcementPolicy**: The policy that represents the security defaults that protect against common attacks.",
            "**permissionGrantPolicies**: The policy that specifies the conditions under which consent can be granted.",
            "**roleManagementPolicies**: Specifies the various policies associated with scopes and roles.",
            "**roleManagementPolicyAssignments**: The assignment of a role management policy to a role definition object.",
            "**tokenIssuancePolicies**: The policy that specifies the characteristics of SAML tokens issued by Azure AD.",
            "**tokenLifetimePolicies**: The policy that controls the lifetime of a JWT access token, an ID token, or a SAML 1.1/2.0 token issued by Azure AD."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "4XX": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**error**",
              {
                "$ul": [
                  "**code**",
                  "**details**",
                  [
                    "**innererror**",
                    {
                      "$ul": [
                        "**@odata.type**",
                        "**Date**: Date when the error occured.",
                        "**client-request-id**: Client request Id as sent by the client application.",
                        "**request-id**: Request Id as tracked internally by the service"
                      ]
                    }
                  ],
                  "**message**",
                  "**target**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "5XX": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**error**",
              {
                "$ul": [
                  "**code**",
                  "**details**",
                  [
                    "**innererror**",
                    {
                      "$ul": [
                        "**@odata.type**",
                        "**Date**: Date when the error occured.",
                        "**client-request-id**: Client request Id as sent by the client application.",
                        "**request-id**: Request Id as tracked internally by the service"
                      ]
                    }
                  ],
                  "**message**",
                  "**target**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
