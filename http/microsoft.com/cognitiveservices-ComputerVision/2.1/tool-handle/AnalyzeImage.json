{
  "name": "AnalyzeImage",
  "description": "This operation extracts a rich set of visual features based on the image content.\r\nTwo input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.\r\nA successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.",
  "parameters": {
    "type": "object",
    "properties": {
      "visualFeatures": {
        "items": {
          "enum": [
            "ImageType",
            "Faces",
            "Adult",
            "Categories",
            "Color",
            "Tags",
            "Description",
            "Objects",
            "Brands"
          ],
          "nullable": false,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "VisualFeatureTypes"
          }
        },
        "type": "array",
        "description": "A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories - categorizes image content according to a taxonomy defined in documentation. Tags - tags the image with a detailed list of words related to the image content. Description - describes the image content with a complete English sentence. Faces - detects if faces are present. If present, generate coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color - determines the accent color, dominant color, and whether an image is black&white. Adult - detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also detected. Objects - detects various objects within an image, including the approximate location. The Objects argument is only available in English. Brands - detects various brands within an image, including the approximate location. The Brands argument is only available in English."
      },
      "details": {
        "items": {
          "enum": [
            "Celebrities",
            "Landmarks"
          ],
          "nullable": false,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "Details"
          }
        },
        "type": "array",
        "description": "A string indicating which domain-specific details to return. Multiple values should be comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if detected in the image, Landmarks - identifies notable landmarks in the image."
      },
      "language": {
        "default": "en",
        "enum": [
          "en",
          "es",
          "ja",
          "pt",
          "zh"
        ],
        "type": "string",
        "description": "The desired language for output generation. If this parameter is not specified, the default value is &quot;en&quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese."
      },
      "descriptionExclude": {
        "items": {
          "enum": [
            "Celebrities",
            "Landmarks"
          ],
          "nullable": false,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "DescriptionExclude"
          }
        },
        "type": "array",
        "description": "Turn off specified domain models when generating the description."
      },
      "body": {
        "$ref": "#/components/schemas/ImageUrl",
        "description": "A JSON document with a URL pointing to the image that is to be analyzed."
      }
    },
    "required": [
      "body"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://westcentralus.api.cognitive.microsoft.com/vision/v2.1/analyze{?visualFeatures,details,language,descriptionExclude}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Result of AnalyzeImage operation.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**adult**: An object describing whether the image contains adult-oriented content and/or is racy.",
              {
                "$ul": [
                  "**adultScore**: Score from 0 to 1 that indicates how much the content is considered adult-oriented within the image.",
                  "**goreScore**: Score from 0 to 1 that indicates how gory is the image.",
                  "**isAdultContent**: A value indicating if the image contains adult-oriented content.",
                  "**isGoryContent**: A value indicating if the image is gory.",
                  "**isRacyContent**: A value indicating if the image is racy.",
                  "**racyScore**: Score from 0 to 1 that indicates how suggestive is the image."
                ]
              }
            ],
            "**brands**: Array of brands detected in the image.",
            "**categories**: An array indicating identified categories.",
            [
              "**color**: An object providing additional metadata describing color attributes.",
              {
                "$ul": [
                  "**accentColor**: Possible accent color.",
                  "**dominantColorBackground**: Possible dominant background color.",
                  "**dominantColorForeground**: Possible dominant foreground color.",
                  "**dominantColors**: An array of possible dominant colors.",
                  "**isBWImg**: A value indicating if the image is black and white."
                ]
              }
            ],
            [
              "**description**: A collection of content tags, along with a list of captions sorted by confidence level, and image metadata.",
              {
                "$ul": [
                  "**captions**: A list of captions, sorted by confidence level.",
                  "**tags**: A collection of image tags."
                ]
              }
            ],
            "**faces**: An array of possible faces within the image.",
            [
              "**imageType**: An object providing possible image types and matching confidence levels.",
              {
                "$ul": [
                  "**clipArtType**: Confidence level that the image is a clip art.",
                  "**lineDrawingType**: Confidence level that the image is a line drawing."
                ]
              }
            ],
            [
              "**metadata**: Image metadata.",
              {
                "$ul": [
                  "**format**: Image format.",
                  "**height**: Image height, in pixels.",
                  "**width**: Image width, in pixels."
                ]
              }
            ],
            "**objects**: Array of objects describing what was detected in the image.",
            "**requestId**: Id of the REST API request.",
            "**tags**: A list of tags with confidence level."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Details about the API request error.",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: The error code.",
            "**message**: A message explaining the error reported by the service.",
            "**requestId**: A unique request identifier."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
