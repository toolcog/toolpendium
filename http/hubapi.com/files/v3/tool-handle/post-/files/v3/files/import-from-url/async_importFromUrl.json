{
  "name": "post-_files_v3_files_import-from-url_async_importFromUrl",
  "description": "Asynchronously imports the file at the given URL into the file manager.",
  "parameters": {
    "type": "object",
    "properties": {
      "body": {
        "$ref": "#/$defs/ImportFromUrlInput"
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "ImportFromUrlInput": {
        "properties": {
          "access": {
            "description": "PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can't* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can't* index the file.\n",
            "enum": [
              "PUBLIC_INDEXABLE",
              "PUBLIC_NOT_INDEXABLE",
              "HIDDEN_INDEXABLE",
              "HIDDEN_NOT_INDEXABLE",
              "HIDDEN_PRIVATE",
              "PRIVATE"
            ],
            "type": "string"
          },
          "duplicateValidationScope": {
            "description": "ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder.\n",
            "enum": [
              "ENTIRE_PORTAL",
              "EXACT_FOLDER"
            ],
            "type": "string"
          },
          "duplicateValidationStrategy": {
            "description": "NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.\n",
            "enum": [
              "NONE",
              "REJECT",
              "RETURN_EXISTING"
            ],
            "type": "string"
          },
          "folderId": {
            "description": "One of folderId or folderPath is required. Destination folderId for the uploaded file.",
            "type": "string"
          },
          "folderPath": {
            "description": "One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path.",
            "type": "string"
          },
          "name": {
            "description": "Name to give the resulting file in the file manager.",
            "type": "string"
          },
          "overwrite": {
            "description": "If true, will overwrite existing file if one with the same name and extension exists in the given folder. The overwritten file will be deleted and the uploaded file will take its place with a new ID. If unset or set as false, the new file's name will be updated to prevent colliding with existing file if one exists with the same path, name, and extension",
            "type": "boolean"
          },
          "ttl": {
            "description": "Time to live. If specified the file will be deleted after the given time frame. If left unset, the file will exist indefinitely",
            "type": "string"
          },
          "url": {
            "description": "URL to download the new file from.",
            "type": "string"
          }
        },
        "required": [
          "access",
          "url"
        ],
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://api.hubapi.com/files/v3/files/import-from-url/async"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "202": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Information on the task that has been started, and where to check it's status.",
        "**Key properties:**",
        {
          "$ul": [
            "**id**: ID of the task",
            "**links**: Links for where to check information related to the task. The `status` link gives the URL for where to check the status of the task."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**category**: The error category",
            "**context**: Context about the error condition",
            "**correlationId**: A unique identifier for the request. Include this value with any error reports or support tickets",
            "**errors**: further information about the error",
            "**links**: A map of link names to associated URIs containing documentation about the error or recommended remediation steps",
            "**message**: A human readable message describing the error along with remediation steps where appropriate",
            "**subCategory**: A specific category that contains more specific detail about the error"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
