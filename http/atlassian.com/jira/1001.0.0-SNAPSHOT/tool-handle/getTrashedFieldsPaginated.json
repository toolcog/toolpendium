{
  "name": "getTrashedFieldsPaginated",
  "description": "Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.\n\nOnly custom fields can be queried, `type` must be set to `custom`.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
  "parameters": {
    "type": "object",
    "properties": {
      "startAt": {
        "default": 0,
        "format": "int64",
        "type": "integer",
        "description": "The index of the first item to return in a page of results (page offset)."
      },
      "maxResults": {
        "default": 50,
        "format": "int32",
        "type": "integer",
        "description": "The maximum number of items to return per page."
      },
      "id": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "query": {
        "type": "string",
        "description": "String used to perform a case-insensitive partial match with field names or descriptions."
      },
      "expand": {
        "enum": [
          "name",
          "-name",
          "+name",
          "trashDate",
          "-trashDate",
          "+trashDate",
          "plannedDeletionDate",
          "-plannedDeletionDate",
          "+plannedDeletionDate",
          "projectsCount",
          "-projectsCount",
          "+projectsCount"
        ],
        "type": "string"
      },
      "orderBy": {
        "type": "string",
        "description": "[Order](#ordering) the results by a field:\n\n *  `name` sorts by the field name\n *  `trashDate` sorts by the date the field was moved to the trash\n *  `plannedDeletionDate` sorts by the planned deletion date"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://your-domain.atlassian.net/rest/api/3/field/search/trashed{?startAt,maxResults,id,query,expand,orderBy}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A page of items.",
        "**Key properties:**",
        {
          "$ul": [
            "**isLast**: Whether this is the last page.",
            "**maxResults**: The maximum number of items that could be returned.",
            "**nextPage**: If there is another page of results, the URL of the next page.",
            "**self**: The URL of the page.",
            "**startAt**: The index of the first item returned.",
            "**total**: The number of items returned.",
            "**values**: The list of items."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
