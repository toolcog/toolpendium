{
  "name": "createIssueSecurityScheme",
  "description": "Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
  "parameters": {
    "type": "object",
    "properties": {
      "body": {
        "$ref": "#/$defs/CreateIssueSecuritySchemeDetails"
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "CreateIssueSecuritySchemeDetails": {
        "additionalProperties": true,
        "description": "Issue security scheme and it's details",
        "properties": {
          "description": {
            "description": "The description of the issue security scheme.",
            "maxLength": 255,
            "type": "string",
            "writeOnly": true
          },
          "levels": {
            "description": "The list of scheme levels which should be added to the security scheme.",
            "items": {
              "$ref": "#/$defs/SecuritySchemeLevelBean"
            },
            "type": "array",
            "writeOnly": true
          },
          "name": {
            "description": "The name of the issue security scheme. Must be unique (case-insensitive).",
            "maxLength": 60,
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SecuritySchemeLevelBean": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "description": "The description of the issue security scheme level.",
            "maxLength": 4000,
            "type": "string",
            "writeOnly": true
          },
          "isDefault": {
            "description": "Specifies whether the level is the default level. False by default.",
            "type": "boolean",
            "writeOnly": true
          },
          "members": {
            "description": "The list of level members which should be added to the issue security scheme level.",
            "items": {
              "$ref": "#/$defs/SecuritySchemeLevelMemberBean"
            },
            "type": "array",
            "writeOnly": true
          },
          "name": {
            "description": "The name of the issue security scheme level. Must be unique.",
            "maxLength": 255,
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "writeOnly": true
      },
      "SecuritySchemeLevelMemberBean": {
        "additionalProperties": false,
        "properties": {
          "parameter": {
            "description": "The value corresponding to the specified member type.",
            "type": "string",
            "writeOnly": true
          },
          "type": {
            "description": "The issue security level member type, e.g `reporter`, `group`, `user`.",
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "type"
        ],
        "type": "object",
        "writeOnly": true
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://your-domain.atlassian.net/rest/api/3/issuesecurityschemes"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The ID of the issue security scheme.",
        "**Key properties:**",
        {
          "$ul": [
            "**id**: The ID of the issue security scheme."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
