{
  "name": "getIssue",
  "description": "Returns the details for an issue.\n\nThe issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
  "parameters": {
    "type": "object",
    "properties": {
      "issueIdOrKey": {
        "type": "string",
        "description": "The ID or key of the issue."
      },
      "fields": {
        "items": {
          "default": "*all",
          "type": "string"
        },
        "type": "array",
        "description": "A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all (default) fields except description.\n *  `*navigable,-comment` Returns all navigable fields except comment.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.\n\nNote: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields."
      },
      "fieldsByKeys": {
        "default": false,
        "type": "boolean",
        "description": "Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID."
      },
      "expand": {
        "type": "string",
        "description": "Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored."
      },
      "properties": {
        "items": {
          "default": "null",
          "type": "string"
        },
        "type": "array",
        "description": "A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:\n\n *  `*all` Returns all issue properties.\n *  Any issue property key, prefixed with a minus to exclude.\n\nExamples:\n\n *  `*all` Returns all properties.\n *  `*all,-prop1` Returns all properties except `prop1`.\n *  `prop1,prop2` Returns `prop1` and `prop2` properties.\n\nThis parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`."
      },
      "updateHistory": {
        "default": false,
        "type": "boolean",
        "description": "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field."
      }
    },
    "required": [
      "issueIdOrKey"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://your-domain.atlassian.net/rest/api/3/issue/{issueIdOrKey}{?fields,fieldsByKeys,expand,properties,updateHistory}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Details about an issue.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**changelog**: A page of changelogs.",
              {
                "$ul": [
                  "**histories**: The list of changelogs.",
                  "**maxResults**: The maximum number of results that could be on the page.",
                  "**startAt**: The index of the first item returned on the page.",
                  "**total**: The number of results on the page."
                ]
              }
            ],
            [
              "**editmeta**: A list of editable field details.",
              {
                "$ul": [
                  "**fields**"
                ]
              }
            ],
            "**expand**: Expand options that include additional issue details in the response.",
            "**fields**",
            [
              "**fieldsToInclude**",
              {
                "$ul": [
                  "**actuallyIncluded**",
                  "**excluded**",
                  "**included**"
                ]
              }
            ],
            "**id**: The ID of the issue.",
            "**key**: The key of the issue.",
            "**names**: The ID and name of each field present on the issue.",
            [
              "**operations**: Details of the operations that can be performed on the issue.",
              {
                "$ul": [
                  "**linkGroups**: Details of the link groups defining issue operations."
                ]
              }
            ],
            "**properties**: Details of the issue properties identified in the request.",
            "**renderedFields**: The rendered value of each field present on the issue.",
            "**schema**: The schema describing each field present on the issue.",
            "**self**: The URL of the issue details.",
            "**transitions**: The transitions that can be performed on the issue.",
            "**versionedRepresentations**: The versions of each field on the issue."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
