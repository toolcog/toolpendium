{
  "name": "updateGadget",
  "description": "Changes the title, position, and color of the gadget on a dashboard.\n\n**[Permissions](#permissions) required:** None.",
  "parameters": {
    "type": "object",
    "properties": {
      "dashboardId": {
        "format": "int64",
        "type": "integer",
        "description": "The ID of the dashboard."
      },
      "gadgetId": {
        "format": "int64",
        "type": "integer",
        "description": "The ID of the gadget."
      },
      "body": {
        "$ref": "#/$defs/DashboardGadgetUpdateRequest"
      }
    },
    "required": [
      "dashboardId",
      "gadgetId",
      "body"
    ],
    "$defs": {
      "DashboardGadgetUpdateRequest": {
        "additionalProperties": false,
        "description": "The details of the gadget to update.",
        "properties": {
          "color": {
            "description": "The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.",
            "type": "string",
            "writeOnly": true
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/$defs/DashboardGadgetPosition"
              }
            ],
            "description": "The position of the gadget."
          },
          "title": {
            "description": "The title of the gadget.",
            "type": "string",
            "writeOnly": true
          }
        },
        "type": "object"
      },
      "DashboardGadgetPosition": {
        "additionalProperties": false,
        "description": "Details of a gadget position.",
        "properties": {
          "The column position of the gadget.": {
            "format": "int32",
            "type": "integer"
          },
          "The row position of the gadget.": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "The column position of the gadget.",
          "The row position of the gadget."
        ],
        "type": "object",
        "writeOnly": true
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://your-domain.atlassian.net/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "204": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
