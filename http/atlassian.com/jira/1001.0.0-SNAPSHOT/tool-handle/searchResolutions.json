{
  "name": "searchResolutions",
  "description": "Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:\n\n *  a list of resolutions IDs.\n *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.\n\n**[Permissions](#permissions) required:** Permission to access Jira.",
  "parameters": {
    "type": "object",
    "properties": {
      "startAt": {
        "default": "0",
        "type": "string",
        "description": "The index of the first item to return in a page of results (page offset)."
      },
      "maxResults": {
        "default": "50",
        "type": "string",
        "description": "The maximum number of items to return per page."
      },
      "id": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "The list of resolutions IDs to be filtered out"
      },
      "onlyDefault": {
        "default": false,
        "type": "boolean",
        "description": "When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://your-domain.atlassian.net/rest/api/3/resolution/search{?startAt,maxResults,id,onlyDefault}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A page of items.",
        "**Key properties:**",
        {
          "$ul": [
            "**isLast**: Whether this is the last page.",
            "**maxResults**: The maximum number of items that could be returned.",
            "**nextPage**: If there is another page of results, the URL of the next page.",
            "**self**: The URL of the page.",
            "**startAt**: The index of the first item returned.",
            "**total**: The number of items returned.",
            "**values**: The list of items."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
