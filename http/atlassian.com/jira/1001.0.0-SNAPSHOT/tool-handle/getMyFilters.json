{
  "name": "getMyFilters",
  "description": "Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:\n\n *  owned by the user.\n *  shared with a group that the user is a member of.\n *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  shared with a public project.\n *  shared with the public.\n\nFor example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.",
  "parameters": {
    "type": "object",
    "properties": {
      "expand": {
        "type": "string",
        "description": "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`."
      },
      "includeFavourites": {
        "default": false,
        "type": "boolean",
        "description": "Include the user's favorite filters in the response."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://your-domain.atlassian.net/rest/api/3/filter/my{?expand,includeFavourites}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "List"
        },
        "Details about a filter.",
        "**Key properties:**",
        {
          "$ul": [
            "**description**: A description of the filter.",
            "**editPermissions**: The groups and projects that can edit the filter.",
            "**favourite**: Whether the filter is selected as a favorite.",
            "**favouritedCount**: The count of how many users have selected this filter as a favorite, including the filter owner.",
            "**id**: The unique identifier for the filter.",
            "**jql**: The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.",
            "**name**: The name of the filter. Must be unique.",
            [
              "**owner**: A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:",
              {
                "$ul": [
                  "**accountId**: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.",
                  "**accountType**: The user account type. Can take the following values:",
                  "**active**: Whether the user is active.",
                  [
                    "**applicationRoles**",
                    {
                      "$ul": [
                        "**callback**",
                        "**items**",
                        "**max-results**",
                        "**pagingCallback**",
                        "**size**"
                      ]
                    }
                  ],
                  [
                    "**avatarUrls**",
                    {
                      "$ul": [
                        "**16x16**: The URL of the item's 16x16 pixel avatar.",
                        "**24x24**: The URL of the item's 24x24 pixel avatar.",
                        "**32x32**: The URL of the item's 32x32 pixel avatar.",
                        "**48x48**: The URL of the item's 48x48 pixel avatar."
                      ]
                    }
                  ],
                  "**displayName**: The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.",
                  "**emailAddress**: The email address of the user. Depending on the user’s privacy setting, this may be returned as null.",
                  "**expand**: Expand options that include additional user details in the response.",
                  [
                    "**groups**",
                    {
                      "$ul": [
                        "**callback**",
                        "**items**",
                        "**max-results**",
                        "**pagingCallback**",
                        "**size**"
                      ]
                    }
                  ],
                  "**key**: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.",
                  "**locale**: The locale of the user. Depending on the user’s privacy setting, this may be returned as null.",
                  "**name**: This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.",
                  "**self**: The URL of the user.",
                  "**timeZone**: The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null."
                ]
              }
            ],
            "**searchUrl**: A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.",
            "**self**: The URL of the filter.",
            "**sharePermissions**: The groups and projects that the filter is shared with.",
            [
              "**sharedUsers**: A paginated list of users sharing the filter. This includes users that are members of the groups or can browse the projects that the filter is shared with.",
              {
                "$ul": [
                  "**end-index**: The index of the last item returned on the page.",
                  "**items**: The list of items.",
                  "**max-results**: The maximum number of results that could be on the page.",
                  "**size**: The number of items on the page.",
                  "**start-index**: The index of the first item returned on the page."
                ]
              }
            ],
            [
              "**subscriptions**: A paginated list of subscriptions to a filter.",
              {
                "$ul": [
                  "**end-index**: The index of the last item returned on the page.",
                  "**items**: The list of items.",
                  "**max-results**: The maximum number of results that could be on the page.",
                  "**size**: The number of items on the page.",
                  "**start-index**: The index of the first item returned on the page."
                ]
              }
            ],
            "**viewUrl**: A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*."
          ]
        },
        {
          "$each": "$.body.*",
          "$as": "item",
          "$block": [
            {
              "$h2": {
                "$": "$.item.name"
              }
            },
            {
              "$lang": "json",
              "$code": {
                "$encode": "json",
                "$indent": true,
                "$content": {
                  "$": "$.item"
                }
              }
            }
          ]
        }
      ]
    }
  }
}
