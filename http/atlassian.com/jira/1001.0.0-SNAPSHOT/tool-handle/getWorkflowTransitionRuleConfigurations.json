{
  "name": "getWorkflowTransitionRuleConfigurations",
  "description": "Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:\n\n *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).\n *  matching one or more transition rule keys.\n\nOnly workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.\n\nDue to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.",
  "parameters": {
    "type": "object",
    "properties": {
      "startAt": {
        "default": 0,
        "format": "int64",
        "type": "integer",
        "description": "The index of the first item to return in a page of results (page offset)."
      },
      "maxResults": {
        "default": 10,
        "format": "int32",
        "maximum": 50,
        "type": "integer",
        "description": "The maximum number of items to return per page."
      },
      "types": {
        "items": {
          "enum": [
            "postfunction",
            "condition",
            "validator"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true,
        "description": "The types of the transition rules to return."
      },
      "keys": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true,
        "description": "The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return."
      },
      "workflowNames": {
        "items": {
          "maxLength": 50,
          "type": "string"
        },
        "maxLength": 50,
        "type": "array",
        "uniqueItems": true,
        "description": "EXPERIMENTAL: The list of workflow names to filter by."
      },
      "withTags": {
        "items": {
          "maxLength": 20,
          "type": "string"
        },
        "maxLength": 20,
        "type": "array",
        "uniqueItems": true,
        "description": "EXPERIMENTAL: The list of `tags` to filter by."
      },
      "draft": {
        "type": "boolean",
        "description": "EXPERIMENTAL: Whether draft or published workflows are returned. If not provided, both workflow types are returned."
      },
      "expand": {
        "type": "string",
        "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to."
      }
    },
    "required": [
      "types"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://your-domain.atlassian.net/rest/api/3/workflow/rule/config{?startAt,maxResults,types,keys,workflowNames,withTags,draft,expand}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A page of items.",
        "**Key properties:**",
        {
          "$ul": [
            "**isLast**: Whether this is the last page.",
            "**maxResults**: The maximum number of items that could be returned.",
            "**nextPage**: If there is another page of results, the URL of the next page.",
            "**self**: The URL of the page.",
            "**startAt**: The index of the first item returned.",
            "**total**: The number of items returned.",
            "**values**: The list of items."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
