{
  "name": "analyseExpression",
  "description": "Analyses and validates Jira expressions.\n\nAs an experimental feature, this operation can also attempt to type-check the expressions.\n\nLearn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).\n\n**[Permissions](#permissions) required**: None.",
  "parameters": {
    "type": "object",
    "properties": {
      "check": {
        "default": "syntax",
        "enum": [
          "syntax",
          "type",
          "complexity"
        ],
        "type": "string",
        "description": "The check to perform:\n\n *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.\n *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.\n *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute."
      },
      "body": {
        "$ref": "#/components/schemas/JiraExpressionForAnalysis",
        "description": "The Jira expressions to analyse."
      }
    },
    "required": [
      "body"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://your-domain.atlassian.net/rest/api/3/expression/analyse{?check}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Details about the analysed Jira expression.",
        "**Key properties:**",
        {
          "$ul": [
            "**results**: The results of Jira expressions analysis."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error messages from an operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorMessages**: The list of error messages produced by this operation. For example, \"input parameter 'key' must be provided\"",
            "**errors**: The list of errors by parameter returned by the operation. For example,\"projectKey\": \"Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters.\"",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
