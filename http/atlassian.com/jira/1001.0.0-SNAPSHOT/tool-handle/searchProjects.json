{
  "name": "searchProjects",
  "description": "Returns a [paginated](#pagination) list of projects visible to the user.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Projects are returned only where the user has one of:\n\n *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
  "parameters": {
    "type": "object",
    "properties": {
      "startAt": {
        "default": 0,
        "format": "int64",
        "type": "integer",
        "description": "The index of the first item to return in a page of results (page offset)."
      },
      "maxResults": {
        "default": 50,
        "format": "int32",
        "type": "integer",
        "description": "The maximum number of items to return per page."
      },
      "orderBy": {
        "default": "key",
        "enum": [
          "category",
          "-category",
          "+category",
          "key",
          "-key",
          "+key",
          "name",
          "-name",
          "+name",
          "owner",
          "-owner",
          "+owner",
          "issueCount",
          "-issueCount",
          "+issueCount",
          "lastIssueUpdatedDate",
          "-lastIssueUpdatedDate",
          "+lastIssueUpdatedDate",
          "archivedDate",
          "+archivedDate",
          "-archivedDate",
          "deletedDate",
          "+deletedDate",
          "-deletedDate"
        ],
        "type": "string",
        "description": "[Order](#ordering) the results by a field.\n\n *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).\n *  `issueCount` Sorts by the total number of issues in each project.\n *  `key` Sorts by project key.\n *  `lastIssueUpdatedTime` Sorts by the last issue update time.\n *  `name` Sorts by project name.\n *  `owner` Sorts by project lead.\n *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.\n *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date."
      },
      "id": {
        "items": {
          "format": "int64",
          "type": "integer"
        },
        "type": "array",
        "uniqueItems": true,
        "description": "The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided."
      },
      "keys": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true,
        "description": "The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided."
      },
      "query": {
        "type": "string",
        "description": "Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive)."
      },
      "typeKey": {
        "type": "string",
        "description": "Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`."
      },
      "categoryId": {
        "format": "int64",
        "type": "integer",
        "description": "The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation."
      },
      "action": {
        "default": "view",
        "enum": [
          "view",
          "browse",
          "edit"
        ],
        "type": "string",
        "description": "Filter results by projects for which the user can:\n\n *  `view` the project, meaning that they have one of the following permissions:\n    \n     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  `edit` the project, meaning that they have one of the following permissions:\n    \n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      },
      "expand": {
        "type": "string",
        "description": "Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project."
      },
      "status": {
        "items": {
          "default": "live",
          "enum": [
            "live",
            "archived",
            "deleted"
          ],
          "type": "string"
        },
        "type": "array",
        "description": "EXPERIMENTAL. Filter results by project status:\n\n *  `live` Search live projects.\n *  `archived` Search archived projects.\n *  `deleted` Search deleted projects, those in the recycle bin."
      },
      "properties": {
        "items": {
          "$ref": "#/$defs/StringList"
        },
        "type": "array",
        "description": "EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list."
      },
      "propertyQuery": {
        "type": "string",
        "description": "EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{\"something\":{\"nested\":1,\"other\":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`."
      }
    },
    "$defs": {
      "StringList": {
        "additionalProperties": false,
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://your-domain.atlassian.net/rest/api/3/project/search{?startAt,maxResults,orderBy,id,keys,query,typeKey,categoryId,action,expand,status,properties,propertyQuery}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A page of items.",
        "**Key properties:**",
        {
          "$ul": [
            "**isLast**: Whether this is the last page.",
            "**maxResults**: The maximum number of items that could be returned.",
            "**nextPage**: If there is another page of results, the URL of the next page.",
            "**self**: The URL of the page.",
            "**startAt**: The index of the first item returned.",
            "**total**: The number of items returned.",
            "**values**: The list of items."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
