{
  "name": "createWorkflow",
  "description": "Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used.\n\n#### Conditions ####\n\nConditions enable workflow rules that govern whether a transition can execute.\n\n##### Always false condition #####\n\nA condition that always fails.\n\n    {\n       \"type\": \"AlwaysFalseCondition\"\n     }\n\n##### Block transition until approval #####\n\nA condition that blocks issue transition if there is a pending approval.\n\n    {\n       \"type\": \"BlockInProgressApprovalCondition\"\n     }\n\n##### Compare number custom field condition #####\n\nA condition that allows transition if a comparison between a number custom field and a value is true.\n\n    {\n       \"type\": \"CompareNumberCFCondition\",\n       \"configuration\": {\n         \"comparator\": \"=\",\n         \"fieldId\": \"customfield_10029\",\n         \"fieldValue\": 2\n       }\n     }\n\n *  `comparator` One of the supported comparator: `=`, `>`, and `<`.\n *  `fieldId` The custom numeric field ID. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`\n     *  `com.pyxis.greenhopper.jira:jsw-story-points`\n *  `fieldValue` The value for comparison.\n\n##### Hide from user condition #####\n\nA condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.\n\n    {\n       \"type\": \"RemoteOnlyCondition\"\n     }\n\n##### Only assignee condition #####\n\nA condition that allows only the assignee to execute a transition.\n\n    {\n       \"type\": \"AllowOnlyAssignee\"\n     }\n\n##### Only Bamboo notifications workflow condition #####\n\nA condition that makes the transition available only to Bamboo build notifications.\n\n    {\n       \"type\": \"OnlyBambooNotificationsCondition\"\n     }\n\n##### Only reporter condition #####\n\nA condition that allows only the reporter to execute a transition.\n\n    {\n       \"type\": \"AllowOnlyReporter\"\n     }\n\n##### Permission condition #####\n\nA condition that allows only users with a permission to execute a transition.\n\n    {\n       \"type\": \"PermissionCondition\",\n       \"configuration\": {\n           \"permissionKey\": \"BROWSE_PROJECTS\"\n       }\n     }\n\n *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.\n\n##### Previous status condition #####\n\nA condition that allows a transition based on whether an issue has or has not transitioned through a status.\n\n    {\n       \"type\": \"PreviousStatusCondition\",\n       \"configuration\": {\n         \"ignoreLoopTransitions\": true,\n         \"includeCurrentStatus\": true,\n         \"mostRecentStatusOnly\": true,\n         \"reverseCondition\": true,\n         \"previousStatus\": {\n           \"id\": \"5\"\n         }\n       }\n     }\n\nBy default this condition allows the transition if the status, as defined by its ID in the `previousStatus` object, matches any previous issue status, unless:\n\n *  `ignoreLoopTransitions` is `true`, then loop transitions (from and to the same status) are ignored.\n *  `includeCurrentStatus` is `true`, then the current issue status is also checked.\n *  `mostRecentStatusOnly` is `true`, then only the issue's preceding status (the one immediately before the current status) is checked.\n *  `reverseCondition` is `true`, then the status must not be present.\n\n##### Separation of duties condition #####\n\nA condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.\n\n    {\n       \"type\": \"SeparationOfDutiesCondition\",\n       \"configuration\": {\n         \"fromStatus\": {\n           \"id\": \"5\"\n         },\n         \"toStatus\": {\n           \"id\": \"6\"\n         }\n       }\n     }\n\n *  `fromStatus` OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to `toStatus` is blocked.\n *  `toStatus` An object containing the ID of the target status of the transition that is blocked.\n\n##### Subtask blocking condition #####\n\nA condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.\n\n    {\n       \"type\": \"SubTaskBlockingCondition\",\n       \"configuration\": {\n         \"statuses\": [\n           {\n             \"id\": \"1\"\n           },\n           {\n             \"id\": \"3\"\n           }\n         ]\n       }\n     }\n\n *  `statuses` A list of objects containing status IDs.\n\n##### User is in any group condition #####\n\nA condition that allows users belonging to any group from a list of groups to execute a transition.\n\n    {\n       \"type\": \"UserInAnyGroupCondition\",\n       \"configuration\": {\n         \"groups\": [\n           \"administrators\",\n           \"atlassian-addons-admin\"\n         ]\n       }\n     }\n\n *  `groups` A list of group names.\n\n##### User is in any project role condition #####\n\nA condition that allows only users with at least one project roles from a list of project roles to execute a transition.\n\n    {\n       \"type\": \"InAnyProjectRoleCondition\",\n       \"configuration\": {\n         \"projectRoles\": [\n           {\n             \"id\": \"10002\"\n           },\n           {\n             \"id\": \"10003\"\n           },\n           {\n             \"id\": \"10012\"\n           },\n           {\n             \"id\": \"10013\"\n           }\n         ]\n       }\n     }\n\n *  `projectRoles` A list of objects containing project role IDs.\n\n##### User is in custom field condition #####\n\nA condition that allows only users listed in a given custom field to execute the transition.\n\n    {\n       \"type\": \"UserIsInCustomFieldCondition\",\n       \"configuration\": {\n         \"allowUserInField\": false,\n         \"fieldId\": \"customfield_10010\"\n       }\n     }\n\n *  `allowUserInField` If `true` only a user who is listed in `fieldId` can perform the transition, otherwise, only a user who is not listed in `fieldId` can perform the transition.\n *  `fieldId` The ID of the field containing the list of users.\n\n##### User is in group condition #####\n\nA condition that allows users belonging to a group to execute a transition.\n\n    {\n       \"type\": \"UserInGroupCondition\",\n       \"configuration\": {\n         \"group\": \"administrators\"\n       }\n     }\n\n *  `group` The name of the group.\n\n##### User is in group custom field condition #####\n\nA condition that allows users belonging to a group specified in a custom field to execute a transition.\n\n    {\n       \"type\": \"InGroupCFCondition\",\n       \"configuration\": {\n         \"fieldId\": \"customfield_10012\"\n       }\n     }\n\n *  `fieldId` The ID of the field. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`\n     *  `com.pyxis.greenhopper.jira:gh-epic-status`\n\n##### User is in project role condition #####\n\nA condition that allows users with a project role to execute a transition.\n\n    {\n       \"type\": \"InProjectRoleCondition\",\n       \"configuration\": {\n         \"projectRole\": {\n           \"id\": \"10002\"\n         }\n       }\n     }\n\n *  `projectRole` An object containing the ID of a project role.\n\n##### Value field condition #####\n\nA conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.\n\n    {\n       \"type\": \"ValueFieldCondition\",\n       \"configuration\": {\n         \"fieldId\": \"assignee\",\n         \"fieldValue\": \"qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f\",\n         \"comparisonType\": \"NUMBER\",\n         \"comparator\": \"=\"\n       }\n     }\n\n *  `fieldId` The ID of a field used in the comparison.\n *  `fieldValue` The expected value of the field.\n *  `comparisonType` The type of the comparison. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, or `OPTIONID`.\n *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, `!=`.\n\n**Notes:**\n\n *  If you choose the comparison type `STRING`, only `=` and `!=` are valid options.\n *  You may leave `fieldValue` empty when comparison type is `!=` to indicate that a value is required in the field.\n *  For date fields without time format values as `yyyy-MM-dd`, and for those with time as `yyyy-MM-dd HH:mm`. For example, for July 16 2021 use `2021-07-16`, for 8:05 AM use `2021-07-16 08:05`, and for 4 PM: `2021-07-16 16:00`.\n\n#### Validators ####\n\nValidators check that any input made to the transition is valid before the transition is performed.\n\n##### Date field validator #####\n\nA validator that compares two dates.\n\n    {\n       \"type\": \"DateFieldValidator\",\n       \"configuration\": {\n           \"comparator\": \">\",\n           \"date1\": \"updated\",\n           \"date2\": \"created\",\n           \"expression\": \"1d\",\n           \"includeTime\": true\n         }\n     }\n\n *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, or `!=`.\n *  `date1` The date field to validate. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `date2` The second date field. Required, if `expression` is not passed. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `expression` An expression specifying an offset. Required, if `date2` is not passed. Offsets are built with a number, with `-` as prefix for the past, and one of these time units: `d` for day, `w` for week, `m` for month, or `y` for year. For example, -2d means two days into the past and 1w means one week into the future. The `now` keyword enables a comparison with the current date.\n *  `includeTime` If `true`, then the time part of the data is included for the comparison. If the field doesn't have a time part, 00:00:00 is used.\n\n##### Windows date validator #####\n\nA validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.\n\n    {\n       \"type\": \"WindowsDateValidator\",\n       \"configuration\": {\n           \"date1\": \"customfield_10009\",\n           \"date2\": \"created\",\n           \"windowsDays\": 5\n         }\n     }\n\n *  `date1` The date field to validate. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `date2` The reference date. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `windowsDays` A positive integer indicating a number of days.\n\n##### Field required validator #####\n\nA validator that checks fields are not empty. By default, if a field is not included in the current context it's ignored and not validated.\n\n    {\n         \"type\": \"FieldRequiredValidator\",\n         \"configuration\": {\n             \"ignoreContext\": true,\n             \"errorMessage\": \"Hey\",\n             \"fieldIds\": [\n                 \"versions\",\n                 \"customfield_10037\",\n                 \"customfield_10003\"\n             ]\n         }\n     }\n\n *  `ignoreContext` If `true`, then the context is ignored and all the fields are validated.\n *  `errorMessage` OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.\n *  `fieldIds` The list of fields to validate.\n\n##### Field changed validator #####\n\nA validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.\n\n    {\n         \"type\": \"FieldChangedValidator\",\n         \"configuration\": {\n             \"fieldId\": \"comment\",\n             \"errorMessage\": \"Hey\",\n             \"exemptedGroups\": [\n                 \"administrators\",\n                 \"atlassian-addons-admin\"\n             ]\n         }\n     }\n\n *  `fieldId` The ID of a field.\n *  `errorMessage` OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.\n *  `exemptedGroups` OPTIONAL. The list of groups.\n\n##### Field has single value validator #####\n\nA validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.\n\n    {\n         \"type\": \"FieldHasSingleValueValidator\",\n         \"configuration\": {\n             \"fieldId\": \"attachment,\n             \"excludeSubtasks\": true\n         }\n     }\n\n *  `fieldId` The ID of a field.\n *  `excludeSubtasks` If `true`, then values copied from subtasks are ignored.\n\n##### Parent status validator #####\n\nA validator that checks the status of the parent issue of a subtask. Ìf the issue is not a subtask, no validation is performed.\n\n    {\n         \"type\": \"ParentStatusValidator\",\n         \"configuration\": {\n             \"parentStatuses\": [\n                 {\n                   \"id\":\"1\"\n                 },\n                 {\n                   \"id\":\"2\"\n                 }\n             ]\n         }\n     }\n\n *  `parentStatus` The list of required parent issue statuses.\n\n##### Permission validator #####\n\nA validator that checks the user has a permission.\n\n    {\n       \"type\": \"PermissionValidator\",\n       \"configuration\": {\n           \"permissionKey\": \"ADMINISTER_PROJECTS\"\n       }\n     }\n\n *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.\n\n##### Previous status validator #####\n\nA validator that checks if the issue has held a status.\n\n    {\n       \"type\": \"PreviousStatusValidator\",\n       \"configuration\": {\n           \"mostRecentStatusOnly\": false,\n           \"previousStatus\": {\n               \"id\": \"15\"\n           }\n       }\n     }\n\n *  `mostRecentStatusOnly` If `true`, then only the issue's preceding status (the one immediately before the current status) is checked.\n *  `previousStatus` An object containing the ID of an issue status.\n\n##### Regular expression validator #####\n\nA validator that checks the content of a field against a regular expression.\n\n    {\n       \"type\": \"RegexpFieldValidator\",\n       \"configuration\": {\n           \"regExp\": \"[0-9]\",\n           \"fieldId\": \"customfield_10029\"\n       }\n     }\n\n *  `regExp`A regular expression.\n *  `fieldId` The ID of a field. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:textarea`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:textfield`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:url`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`\n     *  `com.pyxis.greenhopper.jira:jsw-story-points`\n     *  `com.pyxis.greenhopper.jira:gh-epic-status`\n     *  `description`\n     *  `summary`\n\n##### User permission validator #####\n\nA validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.\n\n    {\n         \"type\": \"UserPermissionValidator\",\n         \"configuration\": {\n             \"permissionKey\": \"BROWSE_PROJECTS\",\n             \"nullAllowed\": false,\n             \"username\": \"TestUser\"\n         }\n     }\n\n *  `permissionKey` The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.\n *  `nullAllowed` If `true`, allows the transition when `username` is empty.\n *  `username` The username to validate against the `permissionKey`.\n\n#### Post functions ####\n\nPost functions carry out any additional processing required after a Jira workflow transition is executed.\n\n##### Fire issue event function #####\n\nA post function that fires an event that is processed by the listeners.\n\n    {\n       \"type\": \"FireIssueEventFunction\",\n       \"configuration\": {\n         \"event\": {\n           \"id\":\"1\"\n         }\n       }\n     }\n\n**Note:** If provided, this post function overrides the default `FireIssueEventFunction`. Can be included once in a transition.\n\n *  `event` An object containing the ID of the issue event.\n\n##### Update issue status #####\n\nA post function that sets issue status to the linked status of the destination workflow status.\n\n    {\n       \"type\": \"UpdateIssueStatusFunction\"\n     }\n\n**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.\n\n##### Create comment #####\n\nA post function that adds a comment entered during the transition to an issue.\n\n    {\n       \"type\": \"CreateCommentFunction\"\n     }\n\n**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.\n\n##### Store issue #####\n\nA post function that stores updates to an issue.\n\n    {\n       \"type\": \"IssueStoreFunction\"\n     }\n\n**Note:** This post function can only be added to the initial transition and can only be added once.\n\n##### Assign to current user function #####\n\nA post function that assigns the issue to the current user if the current user has the `ASSIGNABLE_USER` permission.\n\n    {\n         \"type\": \"AssignToCurrentUserFunction\"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Assign to lead function #####\n\nA post function that assigns the issue to the project or component lead developer.\n\n    {\n         \"type\": \"AssignToLeadFunction\"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Assign to reporter function #####\n\nA post function that assigns the issue to the reporter.\n\n    {\n         \"type\": \"AssignToReporterFunction\"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Clear field value function #####\n\nA post function that clears the value from a field.\n\n    {\n       \"type\": \"ClearFieldValuePostFunction\",\n       \"configuration\": {\n         \"fieldId\": \"assignee\"\n       }\n     }\n\n *  `fieldId` The ID of the field.\n\n##### Copy value from other field function #####\n\nA post function that copies the value of one field to another, either within an issue or from parent to subtask.\n\n    {\n       \"type\": \"CopyValueFromOtherFieldPostFunction\",\n       \"configuration\": {\n         \"sourceFieldId\": \"assignee\",\n         \"destinationFieldId\": \"creator\",\n         \"copyType\": \"same\"\n       }\n     }\n\n *  `sourceFieldId` The ID of the source field.\n *  `destinationFieldId` The ID of the destination field.\n *  `copyType` Use `same` to copy the value from a field inside the issue, or `parent` to copy the value from the parent issue.\n\n##### Create Crucible review workflow function #####\n\nA post function that creates a Crucible review for all unreviewed code for the issue.\n\n    {\n         \"type\": \"CreateCrucibleReviewWorkflowFunction\"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Set issue security level based on user's project role function #####\n\nA post function that sets the issue's security level if the current user has a project role.\n\n    {\n       \"type\": \"SetIssueSecurityFromRoleFunction\",\n       \"configuration\": {\n         \"projectRole\": {\n             \"id\":\"10002\"\n         },\n         \"issueSecurityLevel\": {\n             \"id\":\"10000\"\n         }\n       }\n     }\n\n *  `projectRole` An object containing the ID of the project role.\n *  `issueSecurityLevel` OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to `none`.\n\n##### Trigger a webhook function #####\n\nA post function that triggers a webhook.\n\n    {\n       \"type\": \"TriggerWebhookFunction\",\n       \"configuration\": {\n         \"webhook\": {\n           \"id\": \"1\"\n         }\n       }\n     }\n\n *  `webhook` An object containing the ID of the webhook listener to trigger.\n\n##### Update issue custom field function #####\n\nA post function that updates the content of an issue custom field.\n\n    {\n       \"type\": \"UpdateIssueCustomFieldPostFunction\",\n       \"configuration\": {\n         \"mode\": \"append\",\n         \"fieldId\": \"customfield_10003\",\n         \"fieldValue\": \"yikes\"\n       }\n     }\n\n *  `mode` Use `replace` to override the field content with `fieldValue` or `append` to add `fieldValue` to the end of the field content.\n *  `fieldId` The ID of the field.\n *  `fieldValue` The update content.\n\n##### Update issue field function #####\n\nA post function that updates a simple issue field.\n\n    {\n       \"type\": \"UpdateIssueFieldFunction\",\n       \"configuration\": {\n         \"fieldId\": \"assignee\",\n         \"fieldValue\": \"5f0c277e70b8a90025a00776\"\n       }\n     }\n\n *  `fieldId` The ID of the field. Allowed field types:\n    \n     *  `assignee`\n     *  `description`\n     *  `environment`\n     *  `priority`\n     *  `resolution`\n     *  `summary`\n     *  `timeoriginalestimate`\n     *  `timeestimate`\n     *  `timespent`\n *  `fieldValue` The update value.\n *  If the `fieldId` is `assignee`, the `fieldValue` should be one of these values:\n    \n     *  an account ID.\n     *  `automatic`.\n     *  a blank string, which sets the value to `unassigned`.\n\n#### Connect rules ####\n\nConnect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule's module must exist.\n\n    {\n       \"type\": \"appKey__moduleKey\",\n       \"configuration\": {\n         \"value\":\"{\\\"isValid\\\":\\\"true\\\"}\"\n       }\n     }\n\n *  `type` A Connect rule key in a form of `appKey__moduleKey`.\n *  `value` The stringified JSON configuration of a Connect rule.\n\n#### Forge rules ####\n\nForge transition rules are not yet supported.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
  "parameters": {
    "type": "object",
    "properties": {
      "body": {
        "$ref": "#/components/schemas/CreateWorkflowDetails",
        "description": "The workflow details."
      }
    },
    "required": [
      "body"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://your-domain.atlassian.net/rest/api/3/workflow"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The classic workflow identifiers.",
        "**Key properties:**",
        {
          "$ul": [
            "**entityId**: The entity ID of the workflow.",
            "**name**: The name of the workflow."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
