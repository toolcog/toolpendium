{
  "name": "CreateProjectEmployee",
  "description": "Use this endpoint to create a single Project employee.",
  "parameters": {
    "type": "object",
    "properties": {
      "body": {
        "allOf": [
          {
            "$ref": "#/$defs/ProjectEmployee"
          }
        ],
        "example": {
          "Description": "An awesome project employee",
          "Id": 1
        }
      }
    },
    "$defs": {
      "ProjectEmployee": {
        "additionalProperties": false,
        "example": {
          "Description": "An awesome project employee",
          "Id": 1
        },
        "properties": {
          "address": {
            "description": "Employee's home address.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "maxLength": 100,
            "minLength": 0,
            "nullable": true,
            "type": "string",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "canApprove": {
            "description": "Shows if the employee can approve for example time entries.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "type": "boolean",
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "canInvoice": {
            "description": "Shows if the employee can take for example a time entry to the invoice process.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "type": "boolean",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "city": {
            "description": "Employee's city of residence.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true,
            "type": "string",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "costPriceAfter": {
            "description": "The cost after the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "double",
            "nullable": true,
            "type": "number",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "costPriceBefore": {
            "description": "The cost before the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "double",
            "nullable": true,
            "type": "number",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "cutOffDate": {
            "description": "By default, salesPriceBefore is used, unless a cutoffDate and salesPriceAfter is determined. The cutoffDate serves the purpose of choosing which date the salesPriceAfter shall apply from. It can be null if only salesPriceBefore should apply.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: true</p>",
            "format": "date",
            "nullable": true,
            "type": "string",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": true
          },
          "employeeType": {
            "allOf": [
              {
                "$ref": "#/$defs/EmployeeType"
              }
            ],
            "description": "Employee types: \n- 0: No user in e-conomic \n- 1: Time Logger \n- 2: Project Manager \n- 3: Mobile Time Logger<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: false</p>",
            "readOnly": true,
            "x-filterable": "eq, ne",
            "x-sortable": false
          },
          "groupNumber": {
            "description": "The number of the employee group that this employee belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "format": "int32",
            "type": "integer",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "isBarred": {
            "description": "Shows if the employee can be registered on or is barred.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "type": "boolean",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "isUser": {
            "description": "Shows if the employee is also a user.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>",
            "readOnly": true,
            "type": "boolean",
            "x-filterable": "eq, ne, lt, lte, gt, gte",
            "x-sortable": false
          },
          "name": {
            "description": "Name of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>",
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin, like",
            "x-sortable": false
          },
          "number": {
            "description": "The unique number of the project employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "int32",
            "maximum": 999999,
            "minimum": 1,
            "type": "integer",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "objectVersion": {
            "description": "The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "type": "string",
            "x-filterable": "not filterable",
            "x-sortable": false
          },
          "salesPriceAfter": {
            "description": "The sale price after the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "double",
            "nullable": true,
            "type": "number",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "salesPriceBefore": {
            "description": "The sale price before the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>",
            "format": "double",
            "nullable": true,
            "type": "number",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": true
          },
          "userId": {
            "description": "User id of the employee if it's a user.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "nullable": true,
            "readOnly": true,
            "type": "string",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          },
          "zipCode": {
            "description": "Employee's zip code.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true,
            "type": "string",
            "x-filterable": "eq, ne, lt, lte, gt, gte, in, nin",
            "x-sortable": false
          }
        },
        "required": [
          "canApprove",
          "canInvoice",
          "groupNumber",
          "isBarred",
          "name",
          "number"
        ],
        "type": "object"
      },
      "EmployeeType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "format": "int32",
        "type": "integer"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://apis.e-conomic.com/api/v20.0.0//project-employees"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**number**: The identifier of the newly created entity<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**developerHint**: Some hints for the developer that might help avoid the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**errorCode**: The error code.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**logId**: The unique log identifier of the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**logTimeUtc**: The UTC time of the error being logged.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**message**: Short description about the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**property**: The property name in case of validation logic issue.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**developerHint**: Some hints for the developer that might help avoid the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**errorCode**: The error code.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**logId**: The unique log identifier of the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**logTimeUtc**: The UTC time of the error being logged.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**message**: Short description about the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**property**: The property name in case of validation logic issue.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**developerHint**: Some hints for the developer that might help avoid the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**errorCode**: The error code.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**logId**: The unique log identifier of the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**logTimeUtc**: The UTC time of the error being logged.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**message**: Short description about the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**property**: The property name in case of validation logic issue.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "429": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**developerHint**: Some hints for the developer that might help avoid the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**errorCode**: The error code.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**logId**: The unique log identifier of the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**logTimeUtc**: The UTC time of the error being logged.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**message**: Short description about the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**property**: The property name in case of validation logic issue.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**developerHint**: Some hints for the developer that might help avoid the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**errorCode**: The error code.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**logId**: The unique log identifier of the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**logTimeUtc**: The UTC time of the error being logged.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**message**: Short description about the error.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>",
            "**property**: The property name in case of validation logic issue.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
