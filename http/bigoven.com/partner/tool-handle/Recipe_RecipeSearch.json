{
  "name": "Recipe_RecipeSearch",
  "description": "Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.\r\n            Use any_kw to search across the entire recipe.\r\n            If you'd like to limit by course, set the parameter \"include_primarycat\" to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).\r\n            If you'd like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.\r\n            If you'd like to include a category, set include_cat to one or more (comma-separated) of those categories to include.\r\n            To explicitly include an ingredient in your search, set the parameter \"include_ing\" to a CSV of up to three ingredients, e.g.:include_ing=mustard,chicken,beef%20tips\r\n            To explicitly exclude an ingredient in your search, set the parameter \"exclude_ing\" to a CSV of up to three ingredients.\r\n            All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).\r\n            So, to get the third page of a result set paged with 25 recipes per page, you'd pass pg=3&amp;rpp=25\r\n            If you'd like to target searches to just a single target user's recipes, set userId=the target userId (number).\r\n            Or, you can set username=theirusername\r\n            vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps\r\n            cuisine\r\n            photos\r\n            filter=added,try,favorites,myrecipes\\r\\n\\r\\n\r\n            folder=FolderNameCaseSensitive\r\n            coll=ID of Collection",
  "parameters": {
    "type": "object",
    "properties": {
      "any_kw": {
        "type": "string",
        "description": "Search anywhere in the recipe for the keyword"
      },
      "folder": {
        "type": "string",
        "description": "Search in a specific folder name for the authenticated user"
      },
      "coll": {
        "format": "int32",
        "type": "integer",
        "description": "Limit to a collection ID number"
      },
      "filter": {
        "type": "string",
        "description": "optionally set to either \"myrecipes\", \"try\", \"favorites\",\"added\" to filter to just the authenticated user's recipe set"
      },
      "title_kw": {
        "type": "string",
        "description": "Search just in the recipe title for the keyword"
      },
      "userId": {
        "format": "int32",
        "type": "integer",
        "description": "Set the target userid to search their public recipes"
      },
      "username": {
        "type": "string",
        "description": "Set the target username to search their public recipes"
      },
      "token": {
        "type": "string",
        "description": ""
      },
      "photos": {
        "type": "boolean",
        "description": "if set to true, limit search results to photos only"
      },
      "boostmine": {
        "type": "boolean",
        "description": "if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders)"
      },
      "include_cat": {
        "type": "string",
        "description": "integer of the subcategory you'd like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is \"Main Dish &gt; Casseroles\"."
      },
      "exclude_cat": {
        "type": "string",
        "description": "like include_cat, set this to an integer to exclude a specific category"
      },
      "include_primarycat": {
        "type": "string",
        "description": "csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]"
      },
      "exclude_primarycat": {
        "type": "string",
        "description": "csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]"
      },
      "include_ing": {
        "type": "string",
        "description": "A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken"
      },
      "exclude_ing": {
        "type": "string",
        "description": "A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required)"
      },
      "cuisine": {
        "type": "string",
        "description": "Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese"
      },
      "db": {
        "type": "string",
        "description": ""
      },
      "userset": {
        "type": "string",
        "description": "If set to a given username, it'll force the search to filter to just that username"
      },
      "servingsMin": {
        "format": "double",
        "type": "number",
        "description": "Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by \"dozen\", etc. This parameter simply specifies the minimum number for that value entered in \"yield.\""
      },
      "totalMins": {
        "format": "int32",
        "type": "integer",
        "description": "Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert \"1 hour, 15 minutes\" to 75 before passing in.)"
      },
      "maxIngredients": {
        "format": "int32",
        "type": "integer",
        "description": "Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less"
      },
      "minIngredients": {
        "format": "int32",
        "type": "integer",
        "description": "Optional. If supplied, will restrict results to recipes that have at least {minIngredients}"
      },
      "rpp": {
        "format": "int32",
        "type": "integer",
        "description": "integer; results per page"
      },
      "pg": {
        "format": "int32",
        "type": "integer",
        "description": "integer: the page number"
      },
      "vtn": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, limit to vegetarian (Powersearch-capable plan required)"
      },
      "vgn": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, limit to vegan (Powersearch-capable plan required)"
      },
      "chs": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, limit to contains-cheese (Powersearch-capable plan required)"
      },
      "glf": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, limit to gluten-free (Powersearch-capable plan required)"
      },
      "ntf": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, limit to nut-free (Powersearch-capable plan required)"
      },
      "dyf": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, limit to dairy-free (Powersearch-capable plan required)"
      },
      "sff": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, limit to seafood-free (Powersearch-capable plan required)"
      },
      "slf": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, limit to shellfish-free (Powersearch-capable plan required)"
      },
      "tnf": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, limit to tree-nut free (Powersearch-capable plan required)"
      },
      "wmf": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, limit to white-meat free (Powersearch-capable plan required)"
      },
      "rmf": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, limit to red-meat free (Powersearch-capable plan required)"
      },
      "cps": {
        "format": "int32",
        "type": "integer",
        "description": "when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required)"
      },
      "champion": {
        "format": "int32",
        "type": "integer",
        "description": "optional. When set to 1, this will limit search results to \"best of\" recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don't include this parameter."
      },
      "synonyms": {
        "type": "boolean",
        "description": "optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon)"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api2.bigoven.com/recipes{?any_kw,folder,coll,filter,title_kw,userId,username,token,photos,boostmine,include_cat,exclude_cat,include_primarycat,exclude_primarycat,include_ing,exclude_ing,cuisine,db,userset,servingsMin,totalMins,maxIngredients,minIngredients,rpp,pg,vtn,vgn,chs,glf,ntf,dyf,sff,slf,tnf,wmf,rmf,cps,champion,synonyms}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**ResultCount**",
            "**Results**",
            "**SpellSuggest**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
