openapi: 3.1.0
servers:
  - url: https://balanceplatform-api-test.adyen.com/bcl/v1
info:
  contact:
    email: developer-experience@adyen.com
    name: Adyen Developer Experience team
    url: https://www.adyen.help/hc/en-us/community/topics
    x-twitter: Adyen
  description: |-
    The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.

    ## Authentication
    Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:

     ```
    curl
    -H "Content-Type: application/json" \
    -H "X-API-Key: YOUR_API_KEY" \
    ...
    ```

    Alternatively, you can use the username and password to connect to the API using basic authentication. For example:

    ```
    curl
    -H "Content-Type: application/json" \
    -U "ws@BalancePlatform.YOUR_BALANCE_PLATFORM":"YOUR_WS_PASSWORD" \
    ...
    ```
    ## Versioning
    The Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.

    For example:
    ```
    https://balanceplatform-api-test.adyen.com/bcl/v1/accountHolders
    ```
    ## Going live
    When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v1`.
  termsOfService: https://www.adyen.com/legal/terms-and-conditions
  title: Configuration API
  version: "1"
  x-apisguru-categories:
    - payment
  x-logo:
    url: https://adyen.com/.resources/adyen-website/themes/images/apple-icon-180x180.png
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/Adyen/adyen-openapi/main/json/BalancePlatformService-v1.json
      version: "3.1"
  x-preferred: false
  x-providerName: adyen.com
  x-publicVersion: true
  x-serviceName: BalancePlatformService
  x-timestamp: 2023-03-29T11:22:17Z
tags:
  - name: Platform
  - name: Payment instrument groups
  - name: Account holders
  - name: Payment instruments
  - name: Bank account validation
  - name: Balance accounts
  - name: Transaction rules
  - name: Legal entities
  - name: Documents
  - name: Transfer instruments
paths:
  /accountHolders:
    post:
      description: |+
        Creates an account holder linked to a [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities).

      operationId: post-accountHolders
      requestBody:
        content:
          application/json:
            examples:
              createAccountHolder:
                $ref: "#/components/examples/post-accountHolders-createAccountHolder"
            schema:
              $ref: "#/components/schemas/AccountHolderInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHolder"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create an account holder
      tags:
        - Account holders
      x-addedInVersion: "1"
      x-groupName: Account holders
      x-methodName: createAccountHolder
      x-sortIndex: 1
  /accountHolders/{id}:
    get:
      description: Returns an account holder.
      operationId: get-accountHolders-id
      parameters:
        - description: The unique identifier of the account holder.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-accountHolders-id-success-200"
              schema:
                $ref: "#/components/schemas/AccountHolder"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get an account holder
      tags:
        - Account holders
      x-addedInVersion: "1"
      x-groupName: Account holders
      x-methodName: getAccountHolder
      x-sortIndex: 3
    patch:
      description: Updates an account holder. When updating an account holder resource, if a parameter is not provided in the request, it is left unchanged.
      operationId: patch-accountHolders-id
      parameters:
        - description: The unique identifier of the account holder.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              requestAccountHolderCapability:
                $ref: "#/components/examples/patch-accountHolders-id-requestAccountHolderCapability"
              updateAccountHolderStatus:
                $ref: "#/components/examples/patch-accountHolders-id-updateAccountHolderStatus"
            schema:
              $ref: "#/components/schemas/AccountHolder"
      responses:
        "200":
          content:
            application/json:
              examples:
                requestAccountHolderCapability:
                  $ref: "#/components/examples/patch-accountHolders-id-requestAccountHolderCapability-200"
                updateAccountHolderStatus:
                  $ref: "#/components/examples/patch-accountHolders-id-updateAccountHolderStatus-200"
              schema:
                $ref: "#/components/schemas/AccountHolder"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update an account holder
      tags:
        - Account holders
      x-addedInVersion: "1"
      x-groupName: Account holders
      x-methodName: updateAccountHolder
      x-sortIndex: 2
  /accountHolders/{id}/balanceAccounts:
    get:
      description: |-
        Returns a paginated list of the balance accounts associated with an account holder. To fetch multiple pages, use the query parameters. 

        For example, to limit the page to 5 balance accounts and skip the first 10, use `/accountHolders/{id}/balanceAccounts?limit=5&offset=10`.
      operationId: get-accountHolders-id-balanceAccounts
      parameters:
        - description: The unique identifier of the account holder.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The number of items that you want to skip.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-accountHolders-id-balanceAccounts-success-200"
              schema:
                $ref: "#/components/schemas/PaginatedBalanceAccountsResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get all balance accounts of an account holder
      tags:
        - Account holders
      x-addedInVersion: "1"
      x-groupName: Account holders
      x-methodName: getAllBalanceAccountsOfAccountHolder
      x-sortIndex: 4
  /balanceAccounts:
    post:
      description: Creates a balance account that holds the funds of the associated account holder.
      operationId: post-balanceAccounts
      requestBody:
        content:
          application/json:
            examples:
              createBalanceAccount:
                $ref: "#/components/examples/post-balanceAccounts-createBalanceAccount"
            schema:
              $ref: "#/components/schemas/BalanceAccountInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BalanceAccount"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a balance account
      tags:
        - Balance accounts
      x-addedInVersion: "1"
      x-groupName: Balance accounts
      x-methodName: createBalanceAccount
      x-sortIndex: 1
  /balanceAccounts/{id}:
    get:
      description: Returns a balance account and its balances for the default currency and other currencies with a non-zero balance.
      operationId: get-balanceAccounts-id
      parameters:
        - description: The unique identifier of the balance account.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-balanceAccounts-id-success-200"
              schema:
                $ref: "#/components/schemas/BalanceAccount"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get a balance account
      tags:
        - Balance accounts
      x-addedInVersion: "1"
      x-groupName: Balance accounts
      x-methodName: getBalanceAccount
      x-sortIndex: 3
    patch:
      description: Updates a balance account.
      operationId: patch-balanceAccounts-id
      parameters:
        - description: The unique identifier of the balance account.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BalanceAccountUpdateRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BalanceAccount"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a balance account
      tags:
        - Balance accounts
      x-addedInVersion: "1"
      x-groupName: Balance accounts
      x-methodName: updateBalanceAccount
      x-sortIndex: 2
  /balanceAccounts/{id}/paymentInstruments:
    get:
      description: |-
        Returns a paginated list of the payment instruments associated with a balance account. 

        To fetch multiple pages, use the query parameters.For example, to limit the page to 3 payment instruments and to skip the first 6, use `/balanceAccounts/{id}/paymentInstruments?limit=3&offset=6`.
      operationId: get-balanceAccounts-id-paymentInstruments
      parameters:
        - description: The unique identifier of the balance account.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The number of items that you want to skip.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-balanceAccounts-id-paymentInstruments-success-200"
              schema:
                $ref: "#/components/schemas/PaginatedPaymentInstrumentsResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get all payment instruments for a balance account
      tags:
        - Balance accounts
      x-addedInVersion: "1"
      x-groupName: Balance accounts
      x-methodName: getAllPaymentInstrumentsForBalanceAccount
      x-sortIndex: 4
  /balancePlatforms/{id}:
    get:
      description: Returns a balance platform.
      operationId: get-balancePlatforms-id
      parameters:
        - description: The unique identifier of the balance platform.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-balancePlatforms-id-success-200"
              schema:
                $ref: "#/components/schemas/BalancePlatform"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get a balance platform
      tags:
        - Platform
      x-addedInVersion: "1"
      x-groupName: Platform
      x-methodName: getBalancePlatform
      x-sortIndex: 1
  /balancePlatforms/{id}/accountHolders:
    get:
      description: |-
        Returns a paginated list of all the account holders that belong to the balance platform. To fetch multiple pages, use the query parameters. 

        For example, to limit the page to 5 account holders and to skip the first 20, use `/balancePlatforms/{id}/accountHolders?limit=5&offset=20`.
      operationId: get-balancePlatforms-id-accountHolders
      parameters:
        - description: The unique identifier of the balance platform.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The number of items that you want to skip.
          in: query
          name: offset
          required: false
          schema:
            format: int32
            type: integer
        - description: The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-balancePlatforms-id-accountHolders-success-200"
              schema:
                $ref: "#/components/schemas/PaginatedAccountHoldersResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get all account holders under a balance platform
      tags:
        - Platform
      x-addedInVersion: "1"
      x-groupName: Platform
      x-methodName: getAllAccountHoldersUnderBalancePlatform
      x-sortIndex: 2
  /documents:
    post:
      description: |-
        Uploads a document for verification checks.

         Adyen uses the information from the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities) to run automated verification checks. If these checks fail, you will be notified to provide additional documents.

         You should only upload documents when Adyen requests additional information for the legal entity. 
      operationId: post-documents
      requestBody:
        content:
          application/json:
            examples:
              uploadDocument:
                $ref: "#/components/examples/post-documents-uploadDocument"
            schema:
              $ref: "#/components/schemas/Document"
      responses:
        "200":
          content:
            application/json:
              examples:
                uploadDocument:
                  $ref: "#/components/examples/post-documents-uploadDocument-200"
              schema:
                $ref: "#/components/schemas/Document"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Upload a document for verification checks
      tags:
        - Documents
      x-addedInVersion: "1"
      x-groupName: Documents
      x-methodName: uploadDocumentForVerificationChecks
      x-sortIndex: 4
  /documents/{id}:
    delete:
      description: Deletes a document.
      operationId: delete-documents-id
      parameters:
        - description: The unique identifier of the document to be deleted.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoidResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Delete a document
      tags:
        - Documents
      x-addedInVersion: "1"
      x-groupName: Documents
      x-methodName: deleteDocument
      x-sortIndex: 7
    get:
      description: Returns a document.
      operationId: get-documents-id
      parameters:
        - description: The unique identifier of the document.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-documents-id-success-200"
              schema:
                $ref: "#/components/schemas/Document"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get a document
      tags:
        - Documents
      x-addedInVersion: "1"
      x-groupName: Documents
      x-methodName: getDocument
      x-sortIndex: 5
    patch:
      description: Updates a document.
      operationId: patch-documents-id
      parameters:
        - description: The unique identifier of the document to be updated.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              updateDocument:
                $ref: "#/components/examples/patch-documents-id-updateDocument"
            schema:
              $ref: "#/components/schemas/Document"
      responses:
        "200":
          content:
            application/json:
              examples:
                uploadDocument:
                  $ref: "#/components/examples/patch-documents-id-uploadDocument-200"
              schema:
                $ref: "#/components/schemas/Document"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a document
      tags:
        - Documents
      x-addedInVersion: "1"
      x-groupName: Documents
      x-methodName: updateDocument
      x-sortIndex: 6
  /legalEntities:
    post:
      description: |+
        Creates a legal entity. 

        This resource contains information about the user that will be onboarded in your platform. Adyen uses this information to perform verification checks as required by payment industry regulations. Adyen informs you of the verification results through webhooks or API responses. 

      operationId: post-legalEntities
      requestBody:
        content:
          application/json:
            examples:
              createLegalEntityIndividualNL:
                $ref: "#/components/examples/post-legalEntities-createLegalEntityIndividualNL"
              createLegalEntityIndividualUS:
                $ref: "#/components/examples/post-legalEntities-createLegalEntityIndividualUS"
              createLegalEntityOrganizationNL:
                $ref: "#/components/examples/post-legalEntities-createLegalEntityOrganizationNL"
              createLegalEntityOrganizationUS:
                $ref: "#/components/examples/post-legalEntities-createLegalEntityOrganizationUS"
            schema:
              $ref: "#/components/schemas/LegalEntityInfoRequiredType"
      responses:
        "200":
          content:
            application/json:
              examples:
                createLegalEntityIndividualNL:
                  $ref: "#/components/examples/post-legalEntities-createLegalEntityIndividualNL-200"
                createLegalEntityIndividualUS:
                  $ref: "#/components/examples/post-legalEntities-createLegalEntityIndividualUS-200"
                createLegalEntityOrganizationNL:
                  $ref: "#/components/examples/post-legalEntities-createLegalEntityOrganizationNL-200"
                createLegalEntityOrganizationUS:
                  $ref: "#/components/examples/post-legalEntities-createLegalEntityOrganizationUS-200"
              schema:
                $ref: "#/components/schemas/LegalEntity"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a legal entity
      tags:
        - Legal entities
      x-addedInVersion: "1"
      x-groupName: Legal entities
      x-methodName: createLegalEntity
      x-sortIndex: 1
  /legalEntities/{id}:
    get:
      description: Returns a legal entity.
      operationId: get-legalEntities-id
      parameters:
        - description: The unique identifier of the legal entity.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-legalEntities-id-success-200"
              schema:
                $ref: "#/components/schemas/LegalEntity"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get a legal entity
      tags:
        - Legal entities
      x-addedInVersion: "1"
      x-groupName: Legal entities
      x-methodName: getLegalEntity
      x-sortIndex: 2
    patch:
      description: |-
        Updates a legal entity.

         >To change the legal entity type, include only the new `type` in your request. To update the `entityAssociations` array, you need to replace the entire array. For example, if the array has 3 entries and you want to remove 1 entry, you need to PATCH the resource with the remaining 2 entries.
      operationId: patch-legalEntities-id
      parameters:
        - description: The unique identifier of the legal entity.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              changeLegalEntityType:
                $ref: "#/components/examples/patch-legalEntities-id-changeLegalEntityType"
              updateLegalEntityOrganization:
                $ref: "#/components/examples/patch-legalEntities-id-updateLegalEntityOrganization"
            schema:
              $ref: "#/components/schemas/LegalEntityInfo"
      responses:
        "200":
          content:
            application/json:
              examples:
                changeLegalEntityType:
                  $ref: "#/components/examples/patch-legalEntities-id-changeLegalEntityType-200"
                updateLegalEntityOrganization:
                  $ref: "#/components/examples/patch-legalEntities-id-updateLegalEntityOrganization-200"
              schema:
                $ref: "#/components/schemas/LegalEntity"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a legal entity
      tags:
        - Legal entities
      x-addedInVersion: "1"
      x-groupName: Legal entities
      x-methodName: updateLegalEntity
      x-sortIndex: 3
  /paymentInstrumentGroups:
    post:
      description: Creates a payment instrument group to associate and group payment instrument resources together. You can apply a transaction rule to a payment instrument group.
      operationId: post-paymentInstrumentGroups
      requestBody:
        content:
          application/json:
            examples:
              createPaymentInstrumentGroups:
                $ref: "#/components/examples/post-paymentInstrumentGroups-createPaymentInstrumentGroups"
            schema:
              $ref: "#/components/schemas/PaymentInstrumentGroupInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentInstrumentGroup"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a payment instrument group
      tags:
        - Payment instrument groups
      x-addedInVersion: "1"
      x-groupName: Payment instrument groups
      x-methodName: createPaymentInstrumentGroup
      x-sortIndex: 1
  /paymentInstrumentGroups/{id}:
    get:
      description: Returns the details of a payment instrument group.
      operationId: get-paymentInstrumentGroups-id
      parameters:
        - description: The unique identifier of the payment instrument group.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-paymentInstrumentGroups-id-success-200"
              schema:
                $ref: "#/components/schemas/PaymentInstrumentGroup"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get a payment instrument group
      tags:
        - Payment instrument groups
      x-addedInVersion: "1"
      x-groupName: Payment instrument groups
      x-methodName: getPaymentInstrumentGroup
      x-sortIndex: 2
  /paymentInstrumentGroups/{id}/transactionRules:
    get:
      description: Returns a list of all the transaction rules associated with a payment instrument group.
      operationId: get-paymentInstrumentGroups-id-transactionRules
      parameters:
        - description: The unique identifier of the payment instrument group.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-paymentInstrumentGroups-id-transactionRules-success-200"
              schema:
                $ref: "#/components/schemas/TransactionRulesResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get all transaction rules for a payment instrument group
      tags:
        - Payment instrument groups
      x-addedInVersion: "1"
      x-groupName: Payment instrument groups
      x-methodName: getAllTransactionRulesForPaymentInstrumentGroup
      x-sortIndex: 3
  /paymentInstruments:
    post:
      description: |-
        Creates a payment instrument to issue a physical card, a virtual card, or a business account to your user.

         For more information, refer to [Issue cards](https://docs.adyen.com/issuing/create-cards) or [Issue business accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts).
      operationId: post-paymentInstruments
      requestBody:
        content:
          application/json:
            examples:
              createBusinessAccountNL:
                $ref: "#/components/examples/post-paymentInstruments-createBusinessAccountNL"
              createBusinessAccountUS:
                $ref: "#/components/examples/post-paymentInstruments-createBusinessAccountUS"
              createPhysicalCard:
                $ref: "#/components/examples/post-paymentInstruments-createPhysicalCard"
              createVirtualCard:
                $ref: "#/components/examples/post-paymentInstruments-createVirtualCard"
            schema:
              $ref: "#/components/schemas/PaymentInstrumentInfo"
      responses:
        "200":
          content:
            application/json:
              examples:
                createBusinessAccountNL:
                  $ref: "#/components/examples/post-paymentInstruments-createBusinessAccountNL-200"
                createBusinessAccountUS:
                  $ref: "#/components/examples/post-paymentInstruments-createBusinessAccountUS-200"
                createPhysicalCard:
                  $ref: "#/components/examples/post-paymentInstruments-createPhysicalCard-200"
                createVirtualCard:
                  $ref: "#/components/examples/post-paymentInstruments-createVirtualCard-200"
              schema:
                $ref: "#/components/schemas/PaymentInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a payment instrument
      tags:
        - Payment instruments
      x-addedInVersion: "1"
      x-groupName: Payment instruments
      x-methodName: createPaymentInstrument
      x-sortIndex: 11
  /paymentInstruments/{id}:
    get:
      description: Returns the details of a payment instrument.
      operationId: get-paymentInstruments-id
      parameters:
        - description: The unique identifier of the payment instrument.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-paymentInstruments-id-success-200"
              schema:
                $ref: "#/components/schemas/PaymentInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get a payment instrument
      tags:
        - Payment instruments
      x-addedInVersion: "1"
      x-groupName: Payment instruments
      x-methodName: getPaymentInstrument
      x-sortIndex: 13
    patch:
      description: Updates a payment instrument. Once a payment instrument is already active, you can only update its status. However, for cards created with **inactive** status, you can still update the balance account associated with the card.
      operationId: patch-paymentInstruments-id
      parameters:
        - description: The unique identifier of the payment instrument.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              updatePaymentInstrumentBalanceAccount:
                $ref: "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount"
              updatePaymentInstrumentStatus:
                $ref: "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentStatus"
            schema:
              $ref: "#/components/schemas/PaymentInstrumentUpdateRequest"
      responses:
        "200":
          content:
            application/json:
              examples:
                updatePaymentInstrumentBalanceAccount:
                  $ref: "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount-200"
                updatePaymentInstrumentStatus:
                  $ref: "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentStatus-200"
              schema:
                $ref: "#/components/schemas/UpdatePaymentInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a payment instrument
      tags:
        - Payment instruments
      x-addedInVersion: "1"
      x-groupName: Payment instruments
      x-methodName: updatePaymentInstrument
      x-sortIndex: 12
  /paymentInstruments/{id}/reveal:
    get:
      description: |-
        Returns the primary account number (PAN) of a payment instrument.

        To make this request, your API credential must have the following [role](https://docs.adyen.com/issuing/manage-access/api-credentials-web-service#api-permissions):

        * Balance Platform BCL PCI role
      operationId: get-paymentInstruments-id-reveal
      parameters:
        - description: The unique identifier of the payment instrument.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentInstrumentRevealInfo"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get the PAN of a payment instrument
      tags:
        - Payment instruments
      x-addedInVersion: "1"
      x-groupName: Payment instruments
      x-methodName: getPanOfPaymentInstrument
      x-sortIndex: 14
  /paymentInstruments/{id}/transactionRules:
    get:
      description: Returns a list of transaction rules associated with a payment instrument.
      operationId: get-paymentInstruments-id-transactionRules
      parameters:
        - description: The unique identifier of the payment instrument.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-paymentInstruments-id-transactionRules-success-200"
              schema:
                $ref: "#/components/schemas/TransactionRulesResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get all transaction rules for a payment instrument
      tags:
        - Payment instruments
      x-addedInVersion: "1"
      x-groupName: Payment instruments
      x-methodName: getAllTransactionRulesForPaymentInstrument
      x-sortIndex: 14
  /transactionRules:
    post:
      description: Creates a [transaction rule](https://docs.adyen.com/issuing/transaction-rules). When your user makes a transaction with their Adyen-issued card, the transaction is allowed or declined based on the conditions and outcome defined in the transaction rule. You can apply the transaction rule to several cards, such as all the cards in your platform, or to a specific card. For use cases, see [examples](https://docs.adyen.com/issuing/transaction-rules/examples).
      operationId: post-transactionRules
      requestBody:
        content:
          application/json:
            examples:
              createTransactionRule:
                $ref: "#/components/examples/post-transactionRules-createTransactionRule"
            schema:
              $ref: "#/components/schemas/TransactionRuleInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionRule"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a transaction rule
      tags:
        - Transaction rules
      x-addedInVersion: "1"
      x-groupName: Transaction rules
      x-methodName: createTransactionRule
      x-sortIndex: 1
  /transactionRules/{transactionRuleId}:
    delete:
      description: Deletes a transaction rule.
      operationId: delete-transactionRules-transactionRuleId
      parameters:
        - description: The unique identifier of the transaction rule.
          in: path
          name: transactionRuleId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/delete-transactionRules-transactionRuleId-success-200"
              schema:
                $ref: "#/components/schemas/TransactionRule"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Delete a transaction rule
      tags:
        - Transaction rules
      x-addedInVersion: "1"
      x-groupName: Transaction rules
      x-methodName: deleteTransactionRule
      x-sortIndex: 5
    get:
      description: Returns the details of a transaction rule.
      operationId: get-transactionRules-transactionRuleId
      parameters:
        - description: The unique identifier of the transaction rule.
          in: path
          name: transactionRuleId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-transactionRules-transactionRuleId-success-200"
              schema:
                $ref: "#/components/schemas/TransactionRuleResponse"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get a transaction rule
      tags:
        - Transaction rules
      x-addedInVersion: "1"
      x-groupName: Transaction rules
      x-methodName: getTransactionRule
      x-sortIndex: 2
    patch:
      description: |-
        Updates a transaction rule. 

        * To update only the status of a transaction rule, send only the `status` parameter. All other parameters not provided in the request are left unchanged.

        * When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, that parameter is removed from the resource.
      operationId: patch-transactionRules-transactionRuleId
      parameters:
        - description: The unique identifier of the transaction rule.
          in: path
          name: transactionRuleId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              updateTransactionRuleStatus:
                $ref: "#/components/examples/patch-transactionRules-transactionRuleId-updateTransactionRuleStatus"
            schema:
              $ref: "#/components/schemas/TransactionRuleInfo"
      responses:
        "200":
          content:
            application/json:
              examples:
                updateTransactionRuleStatus:
                  $ref: "#/components/examples/patch-transactionRules-transactionRuleId-updateTransactionRuleStatus-200"
              schema:
                $ref: "#/components/schemas/TransactionRule"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-400"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a transaction rule
      tags:
        - Transaction rules
      x-addedInVersion: "1"
      x-groupName: Transaction rules
      x-methodName: updateTransactionRule
      x-sortIndex: 3
  /transferInstruments:
    post:
      description: |-
        Creates a transfer instrument. 

        A transfer instrument is a bank account that a legal entity owns. Adyen performs verification checks on the transfer instrument as required by payment industry regulations. We inform you of the verification results through webhooks or API responses.

        When the transfer instrument passes the verification checks, you can start sending funds from the balance platform to the transfer instrument (such as payouts).
      operationId: post-transferInstruments
      requestBody:
        content:
          application/json:
            examples:
              createTransferInstrumentEUR:
                $ref: "#/components/examples/post-transferInstruments-createTransferInstrumentEUR"
              createTransferInstrumentUSD:
                $ref: "#/components/examples/post-transferInstruments-createTransferInstrumentUSD"
            schema:
              $ref: "#/components/schemas/TransferInstrumentInfo"
      responses:
        "200":
          content:
            application/json:
              examples:
                createTransferInstrumentEUR:
                  $ref: "#/components/examples/post-transferInstruments-createTransferInstrumentEUR-200"
                createTransferInstrumentUSD:
                  $ref: "#/components/examples/post-transferInstruments-createTransferInstrumentUSD-200"
              schema:
                $ref: "#/components/schemas/TransferInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Create a transfer instrument
      tags:
        - Transfer instruments
      x-addedInVersion: "1"
      x-groupName: Transfer instruments
      x-methodName: createTransferInstrument
      x-sortIndex: 8
  /transferInstruments/{id}:
    delete:
      description: Deletes a transfer instrument.
      operationId: delete-transferInstruments-id
      parameters:
        - description: The unique identifier of the transfer instrument to be deleted.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content - the request has been successfully processed, but there is no additional content.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Delete a transfer instrument
      tags:
        - Transfer instruments
      x-addedInVersion: "1"
      x-groupName: Transfer instruments
      x-methodName: deleteTransferInstrument
      x-sortIndex: 11
    get:
      description: Returns the details of a transfer instrument.
      operationId: get-transferInstruments-id
      parameters:
        - description: The unique identifier of the transfer instrument.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: "#/components/examples/get-transferInstruments-id-success-200"
              schema:
                $ref: "#/components/schemas/TransferInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Get a transfer instrument
      tags:
        - Transfer instruments
      x-addedInVersion: "1"
      x-groupName: Transfer instruments
      x-methodName: getTransferInstrument
      x-sortIndex: 9
    patch:
      description: Updates a transfer instrument.
      operationId: patch-transferInstruments-id
      parameters:
        - description: The unique identifier of the transfer instrument.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferInstrumentInfo"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransferInstrument"
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Update a transfer instrument
      tags:
        - Transfer instruments
      x-addedInVersion: "1"
      x-groupName: Transfer instruments
      x-methodName: updateTransferInstrument
      x-sortIndex: 10
  /validateBankAccountIdentification:
    post:
      description: Validates bank account identification details. You can use this endpoint to validate bank account details before you [make a transfer](https://docs.adyen.com/api-explorer/transfers/latest/post/transfers) or [create a transfer instrument](https://docs.adyen.com/api-explorer/legalentity/latest/post/transferInstruments).
      operationId: post-validateBankAccountIdentification
      requestBody:
        content:
          application/json:
            examples:
              validateBankAccountIdentificationIban:
                $ref: "#/components/examples/post-validateBankAccountIdentification-validateBankAccountIdentificationIban"
              validateBankAccountIdentificationUs:
                $ref: "#/components/examples/post-validateBankAccountIdentification-validateBankAccountIdentificationUs"
            schema:
              $ref: "#/components/schemas/BankAccountIdentificationValidationRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Void"
          description: OK - the request has succeeded.
        "401":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-401"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-403"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-422"
                validateBankAccountIdentificationIban:
                  $ref: "#/components/examples/post-validateBankAccountIdentification-validateBankAccountIdentificationIban-422"
                validateBankAccountIdentificationUs:
                  $ref: "#/components/examples/post-validateBankAccountIdentification-validateBankAccountIdentificationUs-422"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              examples:
                generic:
                  $ref: "#/components/examples/generic-500"
              schema:
                $ref: "#/components/schemas/RestServiceError"
          description: Internal Server Error - the server could not process the request.
      security:
        - BasicAuth: []
        - ApiKeyAuth: []
      summary: Validate a bank account
      tags:
        - Bank account validation
      x-addedInVersion: "1"
      x-groupName: Bank account validation
      x-methodName: validateBankAccountIdentification
      x-sortIndex: 1
components:
  examples:
    delete-transactionRules-transactionRuleId-success-200:
      description: Example response for successfully deleting a transaction rule
      summary: Transaction rule deleted
      value:
        amount:
          currency: EUR
          value: 10000
        description: Allow up to 100 EUR per month
        id: TR3227C223222B5CMDKQTBQ5M
        interval:
          type: monthly
        paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ
        reference: myRule16378
        startDate: 2021-01-25T12:46:35
        type: velocity
    generic-400:
      summary: Response code - 400 Bad request
      value:
        detail: Empty input which would have resulted in a null result.
        errorCode: 00_400
        status: 400
        title: Bad request
        type: https://docs.adyen.com/errors/general/bad-request
    generic-401:
      summary: Response code - 401 Unauthorized
      value:
        detail: Not authorized to access this service.
        errorCode: 00_401
        status: 401
        title: Unauthorized
        type: https://docs.adyen.com/errors/security/unauthorized
    generic-403:
      summary: Response code - 403 Forbidden.
      value:
        detail: Not the right permission to access this service.
        errorCode: 00_403
        status: 403
        title: Forbidden
        type: https://docs.adyen.com/errors/security/unauthorized
    generic-404:
      summary: Response code 404 - Not found
      value:
        detail: Service not found.
        errorCode: 00_404
        status: 404
        title: Not found
        type: https://docs.adyen.com/errors/general/not-found
    generic-422:
      summary: Response code - 422 Unprocessable Entity.
      value:
        detail: The balanceAccountId can only be changed when the status is Inactive or Requested
        errorCode: 30_031
        requestId: 1W1UI15PLVGC9V8O
        status: 422
        title: Invalid Payment Instrument information provided
        type: https://docs.adyen.com/errors/general/invalid-field-value
    generic-500:
      summary: Response code - 500 Internal Server Error
      value:
        detail: Unrecoverable error while trying to create payment instrument
        errorCode: 00_500
        requestId: 1WAF555PLWNTLYOQ
        status: 500
        title: An internal error happened
        type: https://docs.adyen.com/errors/general/internal
    generic-503:
      summary: Response code - 503 Internal Server Error
      value:
        detail: Error while determining the payment instrument workflow
        errorCode: 99_500
        requestId: 1W1UHY5O2CONU4R7
        status: 500
        title: Error processing request
        type: https://docs.adyen.com/errors/general/processing-error
    get-accountHolders-id-balanceAccounts-success-200:
      description: Example response when retrieving a list of balance accounts under an account holder
      summary: List of balance accounts retrieved
      value:
        balanceAccounts:
          - accountHolderId: AH32272223222B59K6ZKBBFNQ
            defaultCurrencyCode: EUR
            id: BA32272223222B59K6ZXHBFN6
            status: Active
            timeZone: Europe/Amsterdam
          - accountHolderId: AH32272223222B59K6ZKBBFNQ
            defaultCurrencyCode: EUR
            id: BA32272223222B59K72CKBFNJ
            status: Active
            timeZone: Europe/Amsterdam
          - accountHolderId: AH32272223222B59K6ZKBBFNQ
            defaultCurrencyCode: EUR
            id: BA32272223222B5BRR27B2M7G
            status: Active
            timeZone: Europe/Amsterdam
        hasNext: true
        hasPrevious: false
    get-accountHolders-id-success-200:
      description: Example response when retrieving an account holder
      summary: Account holder retrieved
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        capabilities:
          receiveFromBalanceAccount:
            allowed: false
            enabled: true
            requested: true
            verificationStatus: pending
          receiveFromPlatformPayments:
            allowed: false
            enabled: true
            requested: true
            verificationStatus: pending
          sendToBalanceAccount:
            allowed: false
            enabled: true
            requested: true
            verificationStatus: pending
          sendToTransferInstrument:
            allowed: false
            enabled: true
            requested: true
            verificationStatus: pending
        description: Liable account holder used for international payments and payouts
        id: AH3227C223222C5GXQXF658WB
        legalEntityId: LE322JV223222D5GG42KN6869
        reference: S.Eller-001
        status: Active
    get-balanceAccounts-id-paymentInstruments-success-200:
      description: Example response when retrieving a list of payment instruments under a balance account
      summary: List of payment instruments retrieved
      value:
        hasNext: true
        hasPrevious: false
        paymentInstruments:
          - balanceAccountId: BA32272223222B59CZ3T52DKZ
            card:
              bin: "555544"
              brand: mc
              brandVariant: mc
              cardholderName: name
              expiration:
                month: "12"
                year: "2022"
              formFactor: virtual
              lastFour: "2357"
              number: "************2357"
            id: PI32272223222B59M5TM658DT
            issuingCountryCode: GB
            status: Active
            type: card
          - balanceAccountId: BA32272223222B59CZ3T52DKZ
            card:
              bin: "555544"
              brand: mc
              brandVariant: mc
              cardholderName: name
              expiration:
                month: "01"
                year: "2023"
              formFactor: virtual
              lastFour: "8331"
              number: "************8331"
            id: PI32272223222B59PXDGQDLSF
            issuingCountryCode: GB
            status: Active
            type: card
    get-balanceAccounts-id-success-200:
      description: Example response for retrieving a balance account
      summary: Balance account details retrieved
      value:
        accountHolderId: AH32272223222B59K6RTQBFNZ
        balances:
          - available: 0
            balance: 0
            currency: EUR
            reserved: 0
        defaultCurrencyCode: EUR
        id: BA3227C223222B5BLP6JQC3FD
        paymentInstruments:
          - id: PI32272223222B5BRM4FZ7J9J
        status: Active
    get-balancePlatforms-id-accountHolders-success-200:
      description: Example response when retrieving a list of account holders under a balance platform
      summary: List of account holders retrieved
      value:
        accountHolders:
          - description: Test-305
            id: AH32272223222B5GFSNSXFFL9
            legalEntityId: LE3227C223222D5D8S5S33M4M
            reference: LegalEntity internal error test
            status: Active
          - description: Test-751
            id: AH32272223222B5GFSNVGFFM7
            legalEntityId: LE3227C223222D5D8S5TT3SRX
            reference: LegalEntity internal error test
            status: Active
          - description: Explorer Holder
            id: AH32272223222B5GFWNRFFVR6
            legalEntityId: LE3227C223222D5D8S5TT3SRX
            reference: Account from the Explorer Holder
            status: Active
        hasNext: true
        hasPrevious: true
    get-balancePlatforms-id-success-200:
      description: Example response when retrieving a balance platform
      summary: Balance platform retrieved
      value:
        id: YOUR_BALANCE_PLATFORM
        status: Active
    get-documents-id-success-200:
      description: Example response when getting document details
      summary: Details of a document
      value:
        attachments:
          - content: JVBERi0xLjQKJcOkw7zDtsOfCjIgMCBv+f/ub0j6JPRX+E3EmC...==
        description: Registration doc for Example Company
        fileName: Registration doc for Example Company
        id: SE322JV223222F5GV2N9L8GDK
        owner:
          id: LE322KH223222D5GG4C9J83RN
          type: legalEntity
        type: registrationDocument
    get-legalEntities-id-success-200:
      description: Example response when getting the details of a legal entity
      summary: Details of a legal entity
      value:
        capabilities:
          receiveFromBalanceAccount:
            allowed: "false"
            requested: "true"
            verificationStatus: pending
          receiveFromPlatformPayments:
            allowed: "false"
            requested: "true"
            verificationStatus: pending
          receivePayments:
            allowed: "false"
            requested: "true"
            verificationStatus: pending
          sendToBalanceAccount:
            allowed: "false"
            requested: "true"
            verificationStatus: pending
          sendToTransferInstrument:
            allowed: "false"
            requested: "true"
            verificationStatus: pending
        id: LE322JV223222D5GG42KN6869
        individual:
          birthData:
            dateOfBirth: 1990-06-21
          email: s.hopper@example.com
          name:
            firstName: Simone
            lastName: Hopper
          residentialAddress:
            city: Amsterdam
            country: NL
            postalCode: 1011DJ
            street: Simon Carmiggeltstraat 6 - 50
            street2: "274"
        type: individual
    get-paymentInstrumentGroups-id-success-200:
      description: Example response when retrieving a payment instrument group
      summary: Payment instrument group retrieved
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        id: PG3227C223222B5CMD3FJFKGZ
        txVariant: mc
    get-paymentInstrumentGroups-id-transactionRules-success-200:
      description: Example response when retrieving a list of transaction rules applied to a payment instrument group
      summary: Transaction rules for a payment instrument group retrieved
      value:
        transactionRules:
          - amount:
              currency: EUR
              value: 100000
            description: Up to 1000 EUR per card for the last 12 hours
            id: TR3227C223222C5GXR3XP596N
            interval:
              type: perTransaction
            paymentInstrumentGroupId: PG3227C223222C5GXR3M5592Q
            reference: YOUR_REFERENCE_2918A
            status: inactive
            type: velocity
          - amount:
              currency: EUR
              value: 100000
            description: NL only
            id: TR3227C223222C5GXR3WC595H
            interval:
              type: daily
            paymentInstrumentGroupId: PG3227C223222C5GXR3M5592Q
            reference: myRule12345
            status: inactive
            type: velocity
    get-paymentInstruments-id-success-200:
      description: Example response for retrieving payment instruments associated with a balance account
      summary: Payment instruments retrieved
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        card:
          bin: "555544"
          brand: mc
          brandVariant: mcdebit
          cardholderName: Simon Hopper
          expiration:
            month: "01"
            year: "2024"
          formFactor: virtual
          lastFour: "3548"
          number: "************3548"
        description: S. Hopper - Main card
        id: PI32272223222B5CMD3MQ3HXX
        issuingCountryCode: GB
        status: Active
        type: card
    get-paymentInstruments-id-transactionRules-success-200:
      description: Example response when retrieving a list of transaction rules applied to a payment instrument
      summary: Transaction rules for a payment instrument retrieved
      value:
        transactionRules:
          - description: Only allow point-of-sale transactions
            id: TR32272223222B5GFSGFLFCHM
            interval:
              type: perTransaction
            paymentInstrumentId: PI3227C223222B5FN65FN5NS9
            reference: YOUR_REFERENCE_4F7346
            startDate: 2022-08-02T16:07:00.851374+02:00
            status: active
            type: blockList
          - description: Set the maximum number of active network tokens to one for this card
            id: TR32272223222C5GQJ93L7J8Z
            interval:
              type: perTransaction
            paymentInstrumentId: PI3227C223222B5FN65FN5NS9
            reference: myRule123
            startDate: 2022-10-03T14:48:28.999314+02:00
            status: active
            type: blockList
    get-transactionRules-transactionRuleId-success-200:
      description: Example response when retrieving a transaction rule
      summary: Transaction rules retrieved
      value:
        transactionRule:
          description: Only allow point-of-sale transactions
          id: TR32272223222B5GFSGFLFCHM
          interval:
            type: perTransaction
          paymentInstrumentId: PI3227C223222B5FN65FN5NS9
          reference: YOUR_REFERENCE_4F7346
          startDate: 2022-08-02T16:07:00.851374+02:00
          status: active
          type: blockList
    get-transferInstruments-id-success-200:
      description: Example response when getting the details of a transfer instrument
      summary: Details of a transfer instrument
      value:
        bankAccount:
          countryCode: NL
          currencyCode: EUR
          iban: NL62ABNA0000000123
        id: SE322JV223222F5GNXSR89TMW
        legalEntityId: LE322JV223222D5G2SPGL59KT
        type: bankAccount
    patch-accountHolders-id-requestAccountHolderCapability:
      description: Example request for the `receivePayments` capability for an account holder
      summary: Request account holder capability
      value:
        capabilities:
          receivePayments:
            requested: true
        description: Liable account holder used for international payments and payouts
        legalEntityId: LE322JV223222D5GG42KN6869
        reference: S.Eller-001
    patch-accountHolders-id-requestAccountHolderCapability-200:
      description: Example response for requesting the `receivePayments` capability for an account holder
      summary: Account holder capability requested
      value:
        balancePlatform: APIExplorer
        capabilities:
          receivePayments:
            allowed: false
            enabled: false
            requested: true
            verificationStatus: pending
        description: Liable account holder used for international payments and payouts
        id: AH3227C223222C5GKR23686TF
        legalEntityId: LE322JV223222F5GKQZZ9DS99
        reference: S.Eller-001
        status: Active
    patch-accountHolders-id-updateAccountHolderStatus:
      description: Example request for permanently deactivating an account holder
      summary: Deactivate account holder
      value:
        status: Closed
    patch-accountHolders-id-updateAccountHolderStatus-200:
      description: Example response for permanently deactivating an account holder
      summary: Account holder deactivated
      value:
        balancePlatform: APIExplorer
        description: Liable account holder used for international payments and payouts
        id: AH3227C223222C5GKR23686TF
        legalEntityId: LE322JV223222F5GKQZZ9DS99
        reference: S.Eller-001
        status: Closed
    patch-documents-id-updateDocument:
      description: Example request for updating a document
      summary: Update a document
      value:
        description: Proof of industry doc for Example Company
        type: proofOfIndustry
    patch-documents-id-uploadDocument-200:
      description: Example response when a document is updated
      summary: Document updated
      value:
        attachments:
          - content: JVBERi0xLjQKJcOkw7zDtsOfCjIgMCBv+f/ub0j6JPRX+E3EmC...==
        description: Proof of industry for Example Company
        fileName: Proof of industry for Example Company
        id: SE322JV223222F5GV2N9L8GDK
        owner:
          id: LE322KH223222D5GG4C9J83RN
          type: legalEntity
        type: proofOfIndustry
    patch-legalEntities-id-changeLegalEntityType:
      description: Example request when changing the legal entity type
      summary: Change a legal entity from an organization to an individual
      value:
        type: individual
    patch-legalEntities-id-changeLegalEntityType-200:
      description: Example response when changing the legal entity type
      summary: Legal entity type changed
      value:
        id: LE322JV223222J5HD8HZS2C8B
        individual:
          name:
            firstName: Explorer
            lastName: Company based in US
          residentialAddress:
            country: US
        type: individual
    patch-legalEntities-id-updateLegalEntityOrganization:
      description: Example request adding entity associations to a legal entity
      summary: Add entity associations to an organization
      value:
        entityAssociations:
          - jobTitle: CEO
            legalEntityId: LE322KH223222F5GV2SL953Z3
            type: uboThroughControl
    patch-legalEntities-id-updateLegalEntityOrganization-200:
      description: Example response for adding an entity association to an organization
      summary: Entity associations added
      value:
        entityAssociations:
          - associatorId: LE322KH223222F5GVGNMJ3XC5
            entityType: individual
            jobTitle: CEO
            legalEntityId: LE322KH223222F5GV2SL953Z3
            name: Simone Hopper
            type: uboThroughControl
        id: LE322KH223222F5GVGNMJ3XC5
        organization:
          description: FinTech
          doingBusinessAs: Adyen BV
          email: john.doe@adyen.com
          legalName: Adyen BV
          phone:
            countryCode: NL
            number: "646467363"
            type: mobile
          registeredAddress:
            city: AMS
            country: NL
            postalCode: 1234EE
            stateOrProvince: NH
            street: Simon Carmiggeltstraat 6 - 50
          registrationNumber: ""
          stockData:
            marketIdentifier: ADYN
            stockNumber: NL012345ABC4
            tickerSymbol: ADYN.M
          taxExempt: "false"
          type: listedPublicCompany
        type: organization
    patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount:
      description: Example request for updating the balance account of a payment instrument
      summary: Update the balance account linked to a payment instrument
      value:
        balanceAccountId: BA32272223222B5CM82WL892M
    patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount-200:
      description: Example response for updating the balance account linked to a payment instrument
      summary: Balance account updated
      value:
        balanceAccountId: BA32272223222B5CM82WL892M
        card:
          bin: "555544"
          brand: mc
          brandVariant: mcdebit
          cardholderName: Simon Hopper
          expiration:
            month: "01"
            year: "2024"
          formFactor: virtual
          lastFour: "5785"
          number: "************5785"
        description: S. Hopper - Main card
        id: PI3227C223222B5CMD278FKGS
        issuingCountryCode: GB
        status: Inactive
        type: card
    patch-paymentInstruments-id-updatePaymentInstrumentStatus:
      description: Example request for updating the status of a payment instrument
      summary: Update the status of a payment instrument
      value:
        status: Suspended
    patch-paymentInstruments-id-updatePaymentInstrumentStatus-200:
      description: Example response for updating the status of a payment instrument
      summary: Payment instrument status updated
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        card:
          bin: "555544"
          brand: mc
          brandVariant: mcdebit
          cardholderName: Simon Hopper
          expiration:
            month: "01"
            year: "2024"
          formFactor: virtual
          lastFour: "5785"
          number: "************5785"
        description: S. Hopper - Main card
        id: PI3227C223222B5CMD278FKGS
        issuingCountryCode: GB
        status: Suspended
        type: card
    patch-transactionRules-transactionRuleId-updateTransactionRuleStatus:
      description: Example request for updating the status of a transaction rule
      summary: Update the status of transaction rule
      value:
        status: inactive
    patch-transactionRules-transactionRuleId-updateTransactionRuleStatus-200:
      description: Example response for successfully updating the status of a transaction rule
      summary: Transaction rule status updated
      value:
        description: Allow 5 transactions per month
        id: TR3227C223222B5B85CDV4DRS
        interval:
          type: monthly
        maxTransactions: 5
        paymentInstrumentId: PI3227C223222B59KGTXP884R
        reference: myRule12345
        startDate: 2021-01-21T12:46:35
        status: inactive
        type: velocity
    post-accountHolders-createAccountHolder:
      description: Example request for creating an account holder
      summary: Create an account holder
      value:
        description: Liable account holder used for international payments and payouts
        legalEntityId: LE322JV223222D5GG42KN6869
        reference: S.Eller-001
    post-balanceAccounts-createBalanceAccount:
      description: Example request for creating a balance account
      summary: Create a balance account
      value:
        accountHolderId: AH32272223222C5GXTD343TKP
        description: S.Hopper - Main balance account
    post-documents-uploadDocument:
      description: Example request for uploading a document
      summary: Upload a document
      value:
        attachments:
          - content: JVBERi0xLjQKJcOkw7zDtsOfCjIgMCBv+f/ub0j6JPRX+E3EmC...==
        description: Registration doc for Example Company
        owner:
          id: LE322KH223222D5GG4C9J83RN
          type: legalEntity
        type: registrationDocument
    post-documents-uploadDocument-200:
      description: Example response when a document is uploaded
      summary: Document uploaded
      value:
        attachments:
          - content: JVBERi0xLjQKJcOkw7zDtsOfCjIgMCBv+f/ub0j6JPRX+E3EmC...==
        description: Registration doc for Example Company
        fileName: Registration doc for Example Company
        id: SE322JV223222F5GV2N9L8GDK
        owner:
          id: LE322KH223222D5GG4C9J83RN
          type: legalEntity
        type: registrationDocument
    post-legalEntities-createLegalEntityIndividualNL:
      description: Example request for creating a legal entity for an individual residing in the Netherlands
      summary: Create a legal entity for an individual residing in the Netherlands
      value:
        individual:
          birthData:
            dateOfBirth: 1990-06-21
          email: s.eller@example.com
          name:
            firstName: Shelly
            lastName: Eller
          residentialAddress:
            city: Amsterdam
            country: NL
            postalCode: 1011DJ
            street: Simon Carmiggeltstraat 6 - 50
        type: individual
    post-legalEntities-createLegalEntityIndividualNL-200:
      description: Example response for creating a legal entity for an individual residing in the Netherlands
      summary: Individual legal entity created
      value:
        id: LE322JV223222D5GG42KN6869
        individual:
          birthData:
            dateOfBirth: 1990-06-21
          email: s.eller@example.com
          name:
            firstName: Shelly
            lastName: Eller
          residentialAddress:
            city: Amsterdam
            country: NL
            postalCode: 1011DJ
            street: Simon Carmiggeltstraat 6 - 50
        type: individual
    post-legalEntities-createLegalEntityIndividualUS:
      description: Example request for creating a legal entity for an individual residing in the US
      summary: Create a legal entity for an individual residing in the US
      value:
        individual:
          birthData:
            dateOfBirth: 1990-06-21
          email: s.eller@example.com
          name:
            firstName: Shelly
            lastName: Eller
          phone:
            number: "+14153671502"
            type: mobile
          residentialAddress:
            city: New York
            country: US
            postalCode: "10003"
            stateOrProvince: NY
            street: 71 5th Avenue
            street2: 11th floor
        type: individual
    post-legalEntities-createLegalEntityIndividualUS-200:
      description: Example response for creating a legal entity for an individual residing in the US
      summary: Individual legal entity created
      value:
        id: LE322JV223222D5GGMHPC2FPL
        individual:
          birthData:
            dateOfBirth: 1990-06-21
          email: s.eller@example.com
          name:
            firstName: Shelly
            lastName: Eller
          phone:
            number: "+14153671502"
            type: mobile
          residentialAddress:
            city: New York
            country: US
            postalCode: "10003"
            stateOrProvince: NY
            street: 71 5th Avenue
            street2: 11th floor
        type: individual
    post-legalEntities-createLegalEntityOrganizationNL:
      description: Example request for creating a legal entity for an organization operating in the Netherlands
      summary: Create a legal entity for a Dutch organization
      value:
        entityAssociations:
          - jobTitle: CEO
            legalEntityId: LE322JV223222D5GG42KN6869
            type: signatory
        organization:
          doingBusinessAs: API Company Trading
          email: organization@example.com
          legalName: Explorer Company based in NL
          registeredAddress:
            city: Amsterdam
            country: NL
            postalCode: 1011DJ
            street: Simon Carmiggeltstraat 6 - 50
          registrationNumber: "34179503"
          type: privateCompany
        type: organization
    post-legalEntities-createLegalEntityOrganizationNL-200:
      description: Example response for creating a legal entity for an organization operating in the Netherlands
      summary: Organization legal entity created
      value:
        id: LE322JV223222D5FZ9N74BSGM
        organization:
          doingBusinessAs: API Company Trading
          email: organization@example.com
          legalName: Explorer Company based in NL
          registeredAddress:
            city: Amsterdam
            country: NL
            postalCode: 1011DJ
            street: Simon Carmiggeltstraat 6 - 50
          registrationNumber: "34179503"
          taxExempt: false
          type: privateCompany
        type: organization
    post-legalEntities-createLegalEntityOrganizationUS:
      description: Example request for creating a legal entity for an organization operating in the US
      summary: Create a legal entity for an organization in the US
      value:
        organization:
          legalName: Explorer Company based in US
          registeredAddress:
            city: New York
            country: US
            postalCode: "10003"
            stateOrProvince: NY
            street: 71 5th Avenue
            street2: 11th floor
          registrationNumber: "101002749"
          type: privateCompany
        type: organization
    post-legalEntities-createLegalEntityOrganizationUS-200:
      description: Example response for creating a legal entity for an organization operating in the US
      summary: Organization legal entity created
      value:
        id: LE322JV223222D5FZ9N74BSGM
        organization:
          legalName: Explorer Company based in US
          registeredAddress:
            city: New York
            country: US
            postalCode: "10003"
            stateOrProvince: NY
            street: 71 5th Avenue
            street2: 11th floor
          registrationNumber: "101002749"
          taxExempt: false
          type: privateCompany
        type: organization
    post-paymentInstrumentGroups-createPaymentInstrumentGroups:
      description: Example request for creating a payment instrument group
      summary: Create a payment instrument group
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        txVariant: mc
    post-paymentInstruments-createBusinessAccountNL:
      description: Example request for creating a business account in NL
      summary: Create a business account in NL
      value:
        balanceAccountId: BA3227C223222B5CTBLR8BWJB
        description: YOUR_DESCRIPTION
        issuingCountryCode: NL
        type: bankAccount
    post-paymentInstruments-createBusinessAccountNL-200:
      description: Example response for creating a business account in NL
      summary: Business account in NL created
      value:
        balanceAccountId: BA3227C223222B5CTBLR8BWJB
        bankAccount:
          iban: NL20ADYB2017000035
        description: YOUR_DESCRIPTION
        id: PI322LJ223222B5DJS7CD9LWL
        issuingCountryCode: NL
        status: Active
        type: bankAccount
    post-paymentInstruments-createBusinessAccountUS:
      description: Example request for creating a business account in the US
      summary: Create a business account in the US
      value:
        balanceAccountId: BA3227C223222B5CTBLR8BWJB
        description: YOUR_DESCRIPTION
        issuingCountryCode: US
        type: bankAccount
    post-paymentInstruments-createBusinessAccountUS-200:
      description: Example response for creating a business account in the US
      summary: Business account in the US created
      value:
        balanceAccountId: BA3227C223222B5CTBLR8BWJB
        bankAccount:
          accountNumber: "333720756"
          accountType: checking
          routingNumber: "21000021"
        description: YOUR_DESCRIPTION
        id: PI322LJ223222B5DJS7CD9LWL
        issuingCountryCode: US
        status: Active
        type: bankAccount
    post-paymentInstruments-createPhysicalCard:
      description: Example request for creating a physical card
      summary: Create a physical card
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        card:
          brand: mc
          brandVariant: mcdebit
          cardholderName: Sam Hopper
          configuration:
            configurationProfileId: CP123AB45678C91ABCD2ABCDE
          deliveryContact:
            address:
              city: Amsterdam
              country: NL
              houseNumberOrName: "64"
              postalCode: 1020CD
              street: Brannan Street
            name:
              firstName: Sam
              lastName: Hopper
          formFactor: physical
        description: S.Hopper - Main card
        issuingCountryCode: NL
        status: Inactive
        type: card
    post-paymentInstruments-createPhysicalCard-200:
      description: Example response for creating a physical card
      summary: Physical card created
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        card:
          authentication:
            password: "******"
            phone:
              number: "+123456789"
              type: mobile
          bin: "555544"
          brand: mc
          brandVariant: mcdebit
          cardholderName: Sam Hopper
          configuration:
            configurationProfileId: CP123AB45678C91ABCD2ABCDE
          deliveryContact:
            address:
              city: Amsterdam
              country: NL
              houseNumberOrName: "64"
              postalCode: 1020CD
              street: Brannan Street
            name:
              firstName: Sam
              lastName: Hopper
          expiration:
            month: "08"
            year: "2024"
          formFactor: physical
          lastFour: "2765"
          number: "************5785"
        description: S. Hopper - Main card
        id: PI3227C223222B5BPCMFXD2XG
        issuingCountryCode: NL
        status: Inactive
        type: card
    post-paymentInstruments-createVirtualCard:
      description: Example request for creating a virtual card
      summary: Create a virtual card
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        card:
          brand: mc
          brandVariant: mcdebit
          cardholderName: Sam Hopper
          formFactor: virtual
        description: S. Hopper - Main card
        issuingCountryCode: NL
        type: card
    post-paymentInstruments-createVirtualCard-200:
      description: Example response for creating a virtual card
      summary: Virtual card created
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        card:
          bin: "555544"
          brand: mc
          brandVariant: mcdebit
          cardholderName: Sam Hopper
          cvc: "613"
          expiration:
            month: "03"
            year: "2025"
          formFactor: virtual
          lastFour: "9883"
          number: "5555444411209883"
        description: S.Hopper - Virtual card
        id: PI32272223222B5FR7Z5CFDW4
        issuingCountryCode: NL
        status: Active
        type: card
    post-transactionRules-createTransactionRule:
      summary: Create a transaction rule
      value:
        countries:
          - NL
        description: Allow transactions only from NL
        interval:
          type: perTransaction
        paymentInstrumentId: PI32272223222B5FN64HK3KLM
        reference: YOUR_REFERENCE_1738A
        status: active
        type: allowList
    post-transferInstruments-createTransferInstrumentEUR:
      description: Example request for creating a transfer instrument for EUR
      summary: Add a EUR bank account
      value:
        bankAccount:
          countryCode: NL
          currencyCode: EUR
          iban: NL62ABNA0000000123
        legalEntityId: LE322KH223222D5GG4C9J83RN
        type: bankAccount
    post-transferInstruments-createTransferInstrumentEUR-200:
      description: Example response for adding a bank account as a transfer instrument of a legal entity
      summary: Bank account added
      value:
        bankAccount:
          countryCode: NL
          currencyCode: EUR
          iban: NL62ABNA0000000123
        id: SE576BH223222F5GJVKHH6BDT
        legalEntityId: LE322KH223222D5GG4C9J83RN
        type: bankAccount
    post-transferInstruments-createTransferInstrumentUSD:
      description: Example request for creating a transfer instrument for USD
      summary: Add a USD bank account
      value:
        bankAccount:
          accountNumber: "0000000123"
          accountType: checking
          branchCode: "121202211"
          countryCode: US
          currencyCode: USD
        legalEntityId: LE322JV223222D5GGMHPC2FPL
        type: bankAccount
    post-transferInstruments-createTransferInstrumentUSD-200:
      description: Example response for adding a bank account as a transfer instrument of a legal entity
      summary: Bank account added
      value:
        bankAccount:
          accountNumber: "0000000123"
          accountType: checking
          branchCode: "121202211"
          countryCode: US
          currencyCode: USD
        id: SE322JV223222F5GJVKHH8DTC
        legalEntityId: LE322JV223222D5GGMHPC2FPL
        type: bankAccount
    post-validateBankAccountIdentification-validateBankAccountIdentificationIban:
      summary: Validate an IBAN
      value:
        accountIdentification:
          iban: "1001001234"
          type: iban
    post-validateBankAccountIdentification-validateBankAccountIdentificationIban-422:
      summary: Invalid IBAN details
      value:
        errorCode: 33_01
        invalidFields:
          - message: Invalid IBAN.
            name: iban
        status: 422
        title: Invalid bank account identification details provided
        type: https://docs.adyen.com/errors/validation
    post-validateBankAccountIdentification-validateBankAccountIdentificationUs:
      summary: Validate a US bank account
      value:
        accountIdentification:
          accountNumber: 12345JHDhjkf67890
          routingNumber: 121000cxhgjhzxg248
          type: usLocal
    post-validateBankAccountIdentification-validateBankAccountIdentificationUs-422:
      summary: Invalid US bank account details
      value:
        errorCode: 33_01
        invalidFields:
          - message: Invalid account number.
            name: accountNumber
          - message: Invalid routing number.
            name: routingNumber
        status: 422
        title: Invalid bank account identification details provided
        type: https://docs.adyen.com/errors/validation
  schemas:
    AULocalAccountIdentification:
      additionalProperties: false
      properties:
        accountNumber:
          description: The bank account number, without separators or whitespace.
          maxLength: 9
          minLength: 5
          type: string
        bsbCode:
          description: The 6-digit [Bank State Branch (BSB) code](https://en.wikipedia.org/wiki/Bank_state_branch), without separators or whitespace.
          maxLength: 6
          minLength: 6
          type: string
        type:
          default: auLocal
          description: "**auLocal**"
          enum:
            - auLocal
          type: string
      required:
        - type
        - accountNumber
        - bsbCode
      type: object
    AccountHolder:
      properties:
        balancePlatform:
          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.
          type: string
        capabilities:
          additionalProperties:
            $ref: "#/components/schemas/AccountHolderCapability"
          description: Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.
          type: object
        contactDetails:
          $ref: "#/components/schemas/ContactDetails"
          description: Contact details of the account holder.
        description:
          description: Your description for the account holder, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: The unique identifier of the account holder.
          readOnly: true
          type: string
        legalEntityId:
          description: The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.
          type: string
        primaryBalanceAccount:
          description: The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.
          type: string
        reference:
          description: Your reference for the account holder, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: |-
            The status of the account holder.

            Possible values: 

             * **Active**: The account holder is active. This is the default status when creating an account holder. 

             * **Inactive**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details. 

             * **Suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone. 

            * **Closed**: The account holder is permanently deactivated by you. This action cannot be undone.
          enum:
            - Active
            - Closed
            - Inactive
            - Suspended
          type: string
        timeZone:
          description: |-
            The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.
            Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
          type: string
      required:
        - legalEntityId
        - id
      type: object
    AccountHolderCapability:
      properties:
        allowed:
          description: Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
          readOnly: true
          type: boolean
        allowedLevel:
          description: |-
            The capability level that is allowed for the account holder.

            Possible values: **notApplicable**, **low**, **medium**, **high**.
          enum:
            - high
            - low
            - medium
            - notApplicable
          readOnly: true
          type: string
        allowedSettings:
          $ref: "#/components/schemas/JSONObject"
          description: A JSON object containing the settings that are allowed for the account holder.
          readOnly: true
        enabled:
          description: Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
          type: boolean
        problems:
          description: Contains verification errors and the actions that you can take to resolve them.
          items:
            $ref: "#/components/schemas/CapabilityProblem"
          readOnly: true
          type: array
        requested:
          description: Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
          type: boolean
        requestedLevel:
          description: |-
            The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.

            Possible values: **notApplicable**, **low**, **medium**, **high**.
          enum:
            - high
            - low
            - medium
            - notApplicable
          type: string
        requestedSettings:
          $ref: "#/components/schemas/JSONObject"
          description: A JSON object containing the settings that were requested for the account holder.
          readOnly: true
        transferInstruments:
          description: "Contains the status of the transfer instruments associated with this capability. "
          items:
            $ref: "#/components/schemas/AccountSupportingEntityCapability"
          type: array
        verificationStatus:
          description: |
            The status of the verification checks for the capability.

            Possible values:

            * **pending**: Adyen is running the verification.

            * **invalid**: The verification failed. Check if the `errors` array contains more information.

            * **valid**: The verification has been successfully completed.

            * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
          enum:
            - invalid
            - pending
            - rejected
            - valid
          readOnly: true
          type: string
      type: object
    AccountHolderInfo:
      properties:
        balancePlatform:
          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.
          type: string
        capabilities:
          additionalProperties:
            $ref: "#/components/schemas/AccountHolderCapability"
          description: Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.
          type: object
        contactDetails:
          $ref: "#/components/schemas/ContactDetails"
          description: Contact details of the account holder.
        description:
          description: Your description for the account holder, maximum 300 characters.
          maxLength: 300
          type: string
        legalEntityId:
          description: The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.
          type: string
        reference:
          description: Your reference for the account holder, maximum 150 characters.
          maxLength: 150
          type: string
        timeZone:
          description: |-
            The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.
            Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
          type: string
      required:
        - legalEntityId
      type: object
    AccountSupportingEntityCapability:
      properties:
        allowed:
          description: Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
          readOnly: true
          type: boolean
        allowedLevel:
          description: |-
            The capability level that is allowed for the account holder.

            Possible values: **notApplicable**, **low**, **medium**, **high**.
          enum:
            - high
            - low
            - medium
            - notApplicable
          readOnly: true
          type: string
        enabled:
          description: Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
          type: boolean
        id:
          description: The ID of the supporting entity.
          readOnly: true
          type: string
        requested:
          description: Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
          type: boolean
        requestedLevel:
          description: |-
            The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.

            Possible values: **notApplicable**, **low**, **medium**, **high**.
          enum:
            - high
            - low
            - medium
            - notApplicable
          type: string
        verificationStatus:
          description: |
            The status of the verification checks for the supporting entity capability.

            Possible values:

            * **pending**: Adyen is running the verification.

            * **invalid**: The verification failed. Check if the `errors` array contains more information.

            * **valid**: The verification has been successfully completed.

            * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
          enum:
            - invalid
            - pending
            - rejected
            - valid
          readOnly: true
          type: string
      type: object
    AdditionalBankIdentification:
      properties:
        code:
          description: The value of the additional bank identification.
          type: string
        type:
          description: |-
            The type of additional bank identification, depending on the country.

            Possible values:

             * **gbSortCode**: The 6-digit [UK sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or spaces
             * **usRoutingNumber**: The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or spaces.
          enum:
            - gbSortCode
            - usRoutingNumber
          type: string
      type: object
    Address:
      properties:
        city:
          description: "The name of the city. Maximum length: 3000 characters."
          maxLength: 3000
          type: string
        country:
          description: |-
            The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
            > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
          type: string
        houseNumberOrName:
          description: "The number or name of the house. Maximum length: 3000 characters."
          maxLength: 3000
          type: string
        postalCode:
          description: A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
          type: string
        stateOrProvince:
          description: |-
            The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
            > Required for the US and Canada.
          type: string
        street:
          description: |-
            The name of the street. Maximum length: 3000 characters.
            > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
          maxLength: 3000
          type: string
      required:
        - street
        - houseNumberOrName
        - city
        - postalCode
        - country
      type: object
    Address-3:
      properties:
        city:
          description: |-
            The name of the city. Required if `stateOrProvince` is provided.

            If you specify the city, you must also send `postalCode` and `street`.
          type: string
        country:
          description: The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.
          type: string
        postalCode:
          description: Postal code. Required if `stateOrProvince` and/or `city` is provided.
          type: string
        stateOrProvince:
          description: |-
            The two-letter ISO 3166-2 state or province code. For example, **CA** in the US. 

            If you specify the state or province, you must also send `city`, `postalCode`, and `street`.
          type: string
        street:
          description: The name of the street, and the house or building number. Required if `stateOrProvince` and/or `city` is provided.
          type: string
        street2:
          description: The apartment, unit, or suite number.
          type: string
      required:
        - country
    Amount:
      properties:
        currency:
          description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
          maxLength: 3
          minLength: 3
          type: string
        value:
          description: The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
          format: int64
          type: integer
      required:
        - value
        - currency
      type: object
    Attachment:
      properties:
        content:
          contentEncoding: base64
          description: The document in Base64-encoded string format.
          type: string
        contentType:
          deprecated: true
          description: |-
            The file format.

             Possible values: **application/pdf**, **image/jpg**, **image/jpeg**, **image/png**. 
          type: string
          x-deprecatedInVersion: "1"
        filename:
          deprecated: true
          description: The name of the file including the file extension.
          type: string
          x-deprecatedInVersion: "1"
        pageType:
          description: |-
            Specifies which side of the ID card is uploaded.

            * When `type` is **driversLicense** or **identityCard**, set this to **front** or **back**.

            * When omitted, we infer the page number based on the order of attachments.
          type: string
      required:
        - content
      type: object
    Authentication:
      properties:
        email:
          description: The email address where the one-time password (OTP) is sent.
          type: string
        password:
          description: |-
            The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.

            * Characters between **a-z**, **A-Z**, and **0-9**

            * Special characters: **äöüßÄÖÜ+-*/ç%()=?!~#'",;:$&àùòâôûáúó**
          maxLength: 30
          minLength: 1
          type: string
        phone:
          $ref: "#/components/schemas/Phone"
          description: |-
            The phone number where the one-time password (OTP) is sent.

            This object must have:

            * A `type` set to **mobile**.

            * A `number` with a valid country code.

            * A `number` with more than 4 digits, excluding the country code.

            >Make sure to verify that the card user owns the phone number.
      type: object
    Balance:
      properties:
        available:
          description: The remaining amount available for spending.
          format: int64
          type: integer
        balance:
          description: The total amount in the balance.
          format: int64
          type: integer
        currency:
          description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.
          type: string
        reserved:
          description: The amount reserved for payments that have been authorised, but have not been captured yet.
          format: int64
          type: integer
      required:
        - currency
        - balance
        - reserved
        - available
      type: object
    BalanceAccount:
      properties:
        accountHolderId:
          description: The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.
          type: string
        balances:
          description: List of balances with the amount and currency.
          items:
            $ref: "#/components/schemas/Balance"
          type: array
        defaultCurrencyCode:
          description: |-
            The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.
            The default value is **EUR**.
          type: string
        description:
          description: A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.
          maxLength: 300
          type: string
        id:
          description: The unique identifier of the balance account.
          type: string
        paymentInstruments:
          description: List of [payment instruments](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments) associated with the balance account.
          items:
            $ref: "#/components/schemas/PaymentInstrumentReference"
          type: array
        reference:
          description: Your reference for the balance account, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: |
            The status of the balance account, set to **Active** by default. 
          enum:
            - Active
            - Closed
            - Inactive
            - Suspended
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: "#/components/schemas/SweepConfiguration"
          description: |-
            Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).

            The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.
          type: object
        timeZone:
          description: |-
            The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.
            Defaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
          type: string
      required:
        - accountHolderId
        - id
      type: object
    BalanceAccountInfo:
      properties:
        accountHolderId:
          description: The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.
          type: string
        defaultCurrencyCode:
          description: |-
            The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.
            The default value is **EUR**.
          type: string
        description:
          description: A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.
          maxLength: 300
          type: string
        reference:
          description: Your reference for the balance account, maximum 150 characters.
          maxLength: 150
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: "#/components/schemas/SweepConfiguration"
          description: |-
            Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).

            The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.
          type: object
        timeZone:
          description: |-
            The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.
            Defaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
          type: string
      required:
        - accountHolderId
      type: object
    BalanceAccountUpdateRequest:
      properties:
        accountHolderId:
          description: The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.
          type: string
        defaultCurrencyCode:
          description: |-
            The default currency code of this balance account, in three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) format. 
            The default value is **EUR**.
          type: string
        description:
          description: A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.
          maxLength: 300
          type: string
        reference:
          description: Your reference to the balance account, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: |-
            The status of the balance account. Payment instruments linked to the balance account can only be used if the balance account status is **Active**.

            Possible values: **Active**, **Inactive**, **Closed**, **Suspended**.
          enum:
            - Active
            - Closed
            - Inactive
            - Suspended
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: "#/components/schemas/SweepConfiguration"
          description: |-
            Contains key-value pairs that specify [balance sweep per currency code](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__reqParam_sweepConfigurations).

            You can update the balance account to add, update, or delete sweeps.

            * To add a sweep, send the currency code as a key and the configuration as the object.

             * To update a sweep, send the whole configuration with your updates.

            * To delete a sweep, set the value to **null**. For example, `"EUR": null`.
          type: object
        timeZone:
          description: |-
            The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.
            Defaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
          type: string
      type: object
    BalancePlatform:
      properties:
        description:
          description: Your description of the balance platform, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: The unique identifier of the balance platform.
          type: string
        status:
          description: |-
            The status of the balance platform.

            Possible values: **Active**, **Inactive**, **Closed**, **Suspended**.
          type: string
      required:
        - id
      type: object
    BankAccountIdentificationValidationRequest:
      properties:
        accountIdentification:
          description: Bank account identification.
          oneOf:
            - $ref: "#/components/schemas/AULocalAccountIdentification"
            - $ref: "#/components/schemas/CALocalAccountIdentification"
            - $ref: "#/components/schemas/CZLocalAccountIdentification"
            - $ref: "#/components/schemas/HULocalAccountIdentification"
            - $ref: "#/components/schemas/IbanAccountIdentification"
            - $ref: "#/components/schemas/NOLocalAccountIdentification"
            - $ref: "#/components/schemas/NumberAndBicAccountIdentification"
            - $ref: "#/components/schemas/PLLocalAccountIdentification"
            - $ref: "#/components/schemas/SELocalAccountIdentification"
            - $ref: "#/components/schemas/SGLocalAccountIdentification"
            - $ref: "#/components/schemas/UKLocalAccountIdentification"
            - $ref: "#/components/schemas/USLocalAccountIdentification"
      required:
        - accountIdentification
      type: object
    BankAccountInfo:
      properties:
        accountNumber:
          description: |-
            The bank account number (without separators).

             When this is provided, the `branchCode` is also required.
          type: string
        accountType:
          description: The type of bank account.
          type: string
        bankBicSwift:
          description: The bank's BIC or SWIFT code.
          type: string
        bankCity:
          description: The city where the bank is located.
          type: string
        bankCode:
          description: The bank code of the banking institution with which the bank account is registered.
          type: string
        bankName:
          description: The name of the banking institution where the bank account is held.
          type: string
        branchCode:
          description: |-
            The branch code of the branch under which the bank account is registered.

            Required when you provide an `accountNumber`.

             In the following countries, this value corresponds to:


            * United States: routing number
            * United Kingdom: sort code
            * Germany: Bankleitzahl
          type: string
        checkCode:
          description: The check code of the bank account.
          type: string
        countryCode:
          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.
          type: string
        currencyCode:
          description: The account's three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **EUR**.
          type: string
        iban:
          description: The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
          type: string
      required:
        - currencyCode
      type: object
    BirthData:
      properties:
        dateOfBirth:
          description: The individual's date of birth, in YYYY-MM-DD format.
          type: string
      type: object
    BulkAddress:
      properties:
        city:
          description: The name of the city.
          type: string
        company:
          description: The name of the company.
          type: string
        country:
          description: The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
          type: string
        email:
          description: The email address.
          type: string
        houseNumberOrName:
          description: The house number or name.
          type: string
        mobile:
          description: The full telephone number.
          type: string
        postalCode:
          description: |-
            The postal code.

            Maximum length:

            * 5 digits for addresses in the US.

            * 10 characters for all other countries.
          type: string
        stateOrProvince:
          description: |-
            The two-letter ISO 3166-2 state or province code.

            Maximum length: 2 characters for addresses in the US.
          type: string
        street:
          description: The streetname of the house.
          type: string
      required:
        - country
      type: object
    CALocalAccountIdentification:
      additionalProperties: false
      properties:
        accountNumber:
          description: The 5- to 12-digit bank account number, without separators or whitespace.
          maxLength: 12
          minLength: 5
          type: string
        institutionNumber:
          description: The 3-digit institution number, without separators or whitespace.
          maxLength: 3
          minLength: 3
          type: string
        transitNumber:
          description: The 5-digit transit number, without separators or whitespace.
          maxLength: 5
          minLength: 5
          type: string
        type:
          default: caLocal
          description: "**caLocal**"
          enum:
            - caLocal
          type: string
      required:
        - type
        - accountNumber
        - institutionNumber
        - transitNumber
      type: object
    CZLocalAccountIdentification:
      additionalProperties: false
      properties:
        accountNumber:
          description: |-
            The 2- to 16-digit bank account number (Číslo účtu) in the following format:

            - The optional prefix (předčíslí).

            - The required second part (základní část) which must be at least two non-zero digits.

            Examples:

            - **19-123457** (with prefix)

            - **123457** (without prefix)

            - **000019-0000123457** (with prefix, normalized)

            - **000000-0000123457** (without prefix, normalized)
          maxLength: 17
          minLength: 2
          type: string
        bankCode:
          description: The 4-digit bank code (Kód banky), without separators or whitespace.
          maxLength: 4
          minLength: 4
          type: string
        type:
          default: czLocal
          description: "**czLocal**"
          enum:
            - czLocal
          type: string
      required:
        - type
        - accountNumber
        - bankCode
      type: object
    CapabilityProblem:
      type: object
    CapabilityProblemEntity:
      properties:
        id:
          type: string
        owner:
          $ref: "#/components/schemas/CapabilityProblemEntity-recursive"
        type:
          enum:
            - BankAccount
            - Document
            - LegalEntity
          type: string
      type: object
    CapabilityProblemEntity-recursive:
      properties:
        id:
          type: string
        type:
          enum:
            - BankAccount
            - Document
            - LegalEntity
          type: string
      type: object
    CapabilitySettings:
      properties:
        amountPerIndustry:
          additionalProperties:
            $ref: "#/components/schemas/Amount"
          description: The maximum amount a card holder can spend per industry.
          type: object
        authorizedCardUsers:
          description: The number of card holders who can use the card.
          type: boolean
        fundingSource:
          description: The funding source of the card, for example **debit**.
          items:
            enum:
              - credit
              - debit
              - prepaid
            type: string
          type: array
        interval:
          description: The period when the rule conditions apply.
          enum:
            - daily
            - monthly
            - weekly
          type: string
        maxAmount:
          $ref: "#/components/schemas/Amount"
          description: The maximum amount a card holder can withdraw per day.
      type: object
    Card:
      properties:
        authentication:
          $ref: "#/components/schemas/Authentication"
          description: Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.
        bin:
          description: The bank identification number (BIN) of the card number.
          type: string
        brand:
          description: |-
            The brand of the physical or the virtual card.
            Possible values: **visa**, **mc**.
          type: string
        brandVariant:
          description: |-
            The brand variant of the physical or the virtual card.
            >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
          type: string
        cardholderName:
          description: |-
            The name of the cardholder.
             Maximum length: 26 characters.
          maxLength: 26
          type: string
        configuration:
          $ref: "#/components/schemas/CardConfiguration"
          description: |-
            Settings required when creating a physical or a virtual card. 

            Reach out to your Adyen contact to get the values that you can send in this object.
        cvc:
          description: |-
            The CVC2 value of the card.
            > The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.
          type: string
        deliveryContact:
          $ref: "#/components/schemas/Contact"
          description: The delivery contact (name and address) for physical card delivery.
        expiration:
          $ref: "#/components/schemas/Expiry"
          description: The expiration date of the card.
        formFactor:
          description: |-
            The form factor of the card.
            Possible values: **virtual**, **physical**.
          enum:
            - physical
            - unknown
            - virtual
          type: string
        lastFour:
          description: Last last four digits of the card number.
          type: string
        number:
          description: |-
            The primary account number (PAN) of the card.
            > The PAN is masked by default and returned only for single-use virtual cards.
          readOnly: true
          type: string
      required:
        - formFactor
        - cardholderName
        - brand
        - brandVariant
        - number
      type: object
    CardConfiguration:
      properties:
        activation:
          description: Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.
          type: string
        activationUrl:
          description: |-
            Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process. 

            Maximum length: 255 characters.
          maxLength: 255
          type: string
        bulkAddress:
          $ref: "#/components/schemas/BulkAddress"
          description: Overrides the shipment bulk address defined in the `configurationProfileId`.
        cardImageId:
          description: The ID of the card image. This is the image that will be printed on the full front of the card.
          type: string
        carrier:
          description: Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
          type: string
        carrierImageId:
          description: The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
          type: string
        configurationProfileId:
          description: |-
            The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.

            For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
          type: string
        currency:
          description: The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.
          type: string
        envelope:
          description: "Overrides the envelope design ID defined in the `configurationProfileId`. "
          type: string
        insert:
          description: Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
          type: string
        language:
          description: The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.
          type: string
        logoImageId:
          description: The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
          type: string
        pinMailer:
          description: Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
          type: string
        shipmentMethod:
          description: Overrides the logistics company defined in the `configurationProfileId`.
          type: string
      required:
        - configurationProfileId
      type: object
    CardInfo:
      properties:
        authentication:
          $ref: "#/components/schemas/Authentication"
          description: Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.
        brand:
          description: |-
            The brand of the physical or the virtual card.
            Possible values: **visa**, **mc**.
          type: string
        brandVariant:
          description: |-
            The brand variant of the physical or the virtual card.
            >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
          type: string
        cardholderName:
          description: |-
            The name of the cardholder.
             Maximum length: 26 characters.
          maxLength: 26
          type: string
        configuration:
          $ref: "#/components/schemas/CardConfiguration"
          description: |-
            Settings required when creating a physical or a virtual card. 

            Reach out to your Adyen contact to get the values that you can send in this object.
        deliveryContact:
          $ref: "#/components/schemas/Contact"
          description: The delivery contact (name and address) for physical card delivery.
        formFactor:
          description: |-
            The form factor of the card.
            Possible values: **virtual**, **physical**.
          enum:
            - physical
            - unknown
            - virtual
          type: string
      required:
        - formFactor
        - cardholderName
        - brand
        - brandVariant
      type: object
    Contact:
      properties:
        address:
          $ref: "#/components/schemas/Address"
          description: The address of the contact.
        email:
          description: The e-mail address of the contact.
          type: string
        fullPhoneNumber:
          description: |-
            The phone number of the contact provided as a single string.  It will be handled as a landline phone.
            **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
          type: string
        name:
          $ref: "#/components/schemas/Name"
          description: The name of the contact.
        personalData:
          $ref: "#/components/schemas/PersonalData"
          description: Personal data of the contact.
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
          description: The phone number of the contact.
        webAddress:
          description: The URL of the website of the contact.
          type: string
      type: object
    ContactDetails:
      properties:
        address:
          $ref: "#/components/schemas/Address"
          description: The address of the account holder.
        email:
          description: The email address of the account holder.
          type: string
        phone:
          $ref: "#/components/schemas/Phone"
          description: The phone number of the account holder.
        webAddress:
          description: The URL of the account holder's website.
          type: string
      required:
        - email
        - phone
        - address
      type: object
    CronSweepSchedule:
      additionalProperties: false
      properties:
        cronExpression:
          description: |-
            A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.

            The expression must have five values separated by a single space in the following order:

            * Minute: **0-59**

            * Hour: **0-23**

            * Day of the month: **1-31**

            * Month: **1-12** or **JAN-DEC**

            * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.

            The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and **/**. See [crontab guru](https://crontab.guru/) for more examples.
          type: string
        type:
          description: |-
            The schedule type.

            Possible values:

            * **cron**: push out funds based on a cron expression.

            * **daily**: push out funds daily at 07:00 AM CET.

            * **weekly**: push out funds every Monday at 07:00 AM CET.

            * **monthly**: push out funds every first of the month at 07:00 AM CET.

            * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
          enum:
            - daily
            - weekly
            - monthly
            - balance
            - cron
          type: string
      required:
        - cronExpression
      type: object
    Document:
      properties:
        attachment:
          $ref: "#/components/schemas/Attachment"
          deprecated: true
          description: Object that contains the document.
          x-deprecatedInVersion: "1"
          x-deprecatedMessage: Use the `attachments` array instead.
        attachments:
          description: Array that contains the document. The array supports multiple attachments for uploading different sides or pages of a document.
          items:
            $ref: "#/components/schemas/Attachment"
          type: array
        creationDate:
          description: The creation date of the document.
          format: date-time
          readOnly: true
          type: string
        description:
          description: Your description for the document.
          type: string
        expiryDate:
          deprecated: true
          description: The expiry date of the document, in YYYY-MM-DD format.
          type: string
          x-deprecatedInVersion: "1"
        fileName:
          description: The filename of the document.
          type: string
        id:
          description: The unique identifier of the document.
          readOnly: true
          type: string
        issuerCountry:
          deprecated: true
          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.
          type: string
          x-deprecatedInVersion: "1"
        issuerState:
          deprecated: true
          description: The state or province where the document was issued (AU only).
          type: string
          x-deprecatedInVersion: "1"
        modificationDate:
          description: The modification date of the document.
          format: date-time
          readOnly: true
          type: string
        number:
          description: The number in the document.
          type: string
        owner:
          $ref: "#/components/schemas/OwnerEntity"
          description: Contains information about the resource that owns the document.
        type:
          description: |-
            Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.

            When providing ID numbers:
            * For **individual**, the `type` values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.

            When uploading documents:
            * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **taxDocument**, **proofOfOwnership**, or **proofOfIndustry**. 

            * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**, **proofOfResidency**, or **proofOfIndustry**.

            * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).
          enum:
            - bankStatement
            - driversLicense
            - identityCard
            - nationalIdNumber
            - passport
            - proofOfAddress
            - proofOfNationalIdNumber
            - proofOfResidency
            - registrationDocument
            - taxDocument
            - proofOfIndustry
          type: string
      required:
        - type
        - description
        - owner
        - attachments
        - id
      type: object
    EntityReference:
      properties:
        id:
          description: The unique identifier of the resource.
          type: string
      type: object
    Expiry:
      properties:
        month:
          description: The month in which the card will expire.
          type: string
        year:
          description: The year in which the card will expire.
          type: string
      type: object
    HULocalAccountIdentification:
      additionalProperties: false
      properties:
        accountNumber:
          description: The 24-digit bank account number, without separators or whitespace.
          maxLength: 24
          minLength: 24
          type: string
        type:
          default: huLocal
          description: "**huLocal**"
          enum:
            - huLocal
          type: string
      required:
        - type
        - accountNumber
      type: object
    IbanAccountIdentification:
      additionalProperties: false
      properties:
        iban:
          description: The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
          type: string
        type:
          default: iban
          description: "**iban**"
          enum:
            - iban
          type: string
      required:
        - type
        - iban
      type: object
    IdentificationData:
      properties:
        cardNumber:
          description: The card number of the document that was issued (AU only).
          type: string
        expiryDate:
          deprecated: true
          description: The expiry date of the document, in YYYY-MM-DD format.
          type: string
          x-deprecatedInVersion: "1"
        issuerCountry:
          deprecated: true
          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.
          type: string
          x-deprecatedInVersion: "1"
        issuerState:
          description: The state or province where the document was issued (AU only).
          type: string
        nationalIdExempt:
          description: Applies only to individuals in the US. Set to **true** if the individual does not have an SSN. To verify their identity, Adyen will require them to upload an ID document.
          type: boolean
        number:
          description: The number in the document.
          type: string
        type:
          description: |-
            Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.

            When providing ID numbers:
            * For **individual**, the `type` values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.

            When uploading documents:
            * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **taxDocument**, **proofOfOwnership**, or **proofOfIndustry**. 

            * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**, **proofOfResidency**, or **proofOfIndustry**.

            * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).
          enum:
            - bankStatement
            - driversLicense
            - identityCard
            - nationalIdNumber
            - passport
            - proofOfAddress
            - proofOfNationalIdNumber
            - proofOfResidency
            - registrationDocument
            - taxDocument
            - proofOfIndustry
          type: string
      required:
        - type
      type: object
    Individual:
      properties:
        birthData:
          $ref: "#/components/schemas/BirthData"
          description: The individual's birth information.
        email:
          description: The email address of the legal entity.
          type: string
        identificationData:
          $ref: "#/components/schemas/IdentificationData"
          description: Information about the individual's identification document.
        name:
          $ref: "#/components/schemas/Name-3"
          description: The individual's name.
        nationality:
          description: The individual's nationality.
          type: string
        phone:
          $ref: "#/components/schemas/PhoneNumber-2"
          description: The phone number of the legal entity.
        residentialAddress:
          $ref: "#/components/schemas/Address-3"
          description: The residential address of the individual.
        webData:
          $ref: "#/components/schemas/WebData"
          deprecated: true
          description: The website and app URL of the legal entity.
          x-deprecatedInVersion: "1"
      required:
        - name
        - residentialAddress
      type: object
    InvalidField:
      properties:
        message:
          description: Description of the validation error.
          type: string
        name:
          description: The field that has an invalid value.
          type: string
        value:
          description: The invalid value.
          type: string
      required:
        - name
        - value
        - message
      type: object
    JSONObject:
      properties:
        paths:
          items:
            $ref: "#/components/schemas/JSONPath"
          type: array
        rootPath:
          $ref: "#/components/schemas/JSONPath"
      type: object
    JSONPath:
      properties:
        content:
          items:
            type: string
          type: array
      type: object
    LegalEntity:
      properties:
        capabilities:
          additionalProperties:
            $ref: "#/components/schemas/LegalEntityCapability"
          description: Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.
          readOnly: true
          type: object
        documents:
          deprecated: true
          description: List of documents uploaded for the legal entity.
          items:
            $ref: "#/components/schemas/EntityReference"
          type: array
          x-deprecatedInVersion: "1"
          x-deprecatedMessage: Use the `documentDetails` array instead.
        entityAssociations:
          description: |-
            List of legal entities associated with the current legal entity.
            For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.
          items:
            $ref: "#/components/schemas/LegalEntityAssociation"
          type: array
        id:
          description: The unique identifier of the legal entity.
          readOnly: true
          type: string
        individual:
          $ref: "#/components/schemas/Individual"
          description: Information about the individual. Required if `type` is **individual**.
        organization:
          $ref: "#/components/schemas/Organization"
          description: Information about the organization. Required if `type` is **organization**.
        reference:
          description: Your reference for the legal entity, maximum 150 characters.
          maxLength: 150
          type: string
        transferInstruments:
          description: List of transfer instruments that the legal entity owns.
          items:
            $ref: "#/components/schemas/TransferInstrumentReference"
          readOnly: true
          type: array
        type:
          description: |-
            The type of legal entity.

             Possible values: **individual** or **organization**
          enum:
            - individual
            - organization
          type: string
      required:
        - id
      type: object
    LegalEntityAssociation:
      properties:
        associatorId:
          description: The unique identifier of another legal entity with which the `legalEntityId` is associated. When the `legalEntityId` is associated to legal entities other than the current one, the response returns all the associations.
          readOnly: true
          type: string
        entityType:
          description: |-
            The legal entity type of associated legal entity. 

            For example, **organization**, **soleProprietorship** or **individual**. 
          readOnly: true
          type: string
        jobTitle:
          description: The individual's job title if the `type` is **uboThroughControl** or **signatory**.
          type: string
        legalEntityId:
          description: The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id).
          type: string
        name:
          description: |-
            The name of the associated [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id).

            - For **individual**, `name.firstName` and `name.lastName`.
            - For **organization**, `legalName`.
            - For **soleProprietorship**, `name`.
          readOnly: true
          type: string
        type:
          description: |-
            Defines the relationship of the legal entity to the current legal entity. 

            For example, **uboThroughOwnership**, **uboThroughControl**, **signatory**, or **soleProprietorship**. 
          enum:
            - signatory
            - uboThroughControl
            - uboThroughOwnership
          type: string
      required:
        - legalEntityId
        - type
      type: object
    LegalEntityCapability:
      properties:
        allowed:
          description: "Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful "
          readOnly: true
          type: boolean
        allowedLevel:
          description: |-
            The capability level that is allowed for the legal entity.

            Possible values: **notApplicable**, **low**, **medium**, **high**.
          enum:
            - high
            - low
            - medium
            - notApplicable
          readOnly: true
          type: string
        allowedSettings:
          $ref: "#/components/schemas/CapabilitySettings"
          description: The settings that were allowed for the Legal Entity.
          readOnly: true
        problems:
          description: Contains verification errors and the actions that you can take to resolve them.
          items:
            $ref: "#/components/schemas/CapabilityProblem"
          readOnly: true
          type: array
        requested:
          description: "Indicates whether the capability is requested. To check whether the Legal Entity is permitted to use the capability, "
          readOnly: true
          type: boolean
        requestedLevel:
          description: |-
            The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.

            Possible values: **notApplicable**, **low**, **medium**, **high**.
          enum:
            - high
            - low
            - medium
            - notApplicable
          readOnly: true
          type: string
        requestedSettings:
          $ref: "#/components/schemas/CapabilitySettings"
          description: The settings that are requested for the Legal Entity.
          readOnly: true
        transferInstruments:
          description: Capability status for transfer instruments associated with legal entity
          items:
            $ref: "#/components/schemas/SupportingEntityCapability"
          readOnly: true
          type: array
        verificationStatus:
          description: |
            The status of the verification checks for the capability.

            Possible values:

            * **pending**: Adyen is running the verification.

            * **invalid**: The verification failed. Check if the `errors` array contains more information.

            * **valid**: The verification has been successfully completed.

            * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
          readOnly: true
          type: string
      type: object
    LegalEntityInfo:
      properties:
        capabilities:
          additionalProperties:
            $ref: "#/components/schemas/LegalEntityCapability"
          description: Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.
          readOnly: true
          type: object
        entityAssociations:
          description: |-
            List of legal entities associated with the current legal entity.
            For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.
          items:
            $ref: "#/components/schemas/LegalEntityAssociation"
          type: array
        individual:
          $ref: "#/components/schemas/Individual"
          description: Information about the individual. Required if `type` is **individual**.
        organization:
          $ref: "#/components/schemas/Organization"
          description: Information about the organization. Required if `type` is **organization**.
        reference:
          description: Your reference for the legal entity, maximum 150 characters.
          maxLength: 150
          type: string
        type:
          description: |-
            The type of legal entity.

             Possible values: **individual** or **organization**
          enum:
            - individual
            - organization
          type: string
      type: object
    LegalEntityInfoRequiredType:
      properties:
        capabilities:
          additionalProperties:
            $ref: "#/components/schemas/LegalEntityCapability"
          description: Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.
          readOnly: true
          type: object
        entityAssociations:
          description: |-
            List of legal entities associated with the current legal entity.
            For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.
          items:
            $ref: "#/components/schemas/LegalEntityAssociation"
          type: array
        individual:
          $ref: "#/components/schemas/Individual"
          description: Information about the individual. Required if `type` is **individual**.
        organization:
          $ref: "#/components/schemas/Organization"
          description: Information about the organization. Required if `type` is **organization**.
        reference:
          description: Your reference for the legal entity, maximum 150 characters.
          maxLength: 150
          type: string
        type:
          description: |-
            The type of legal entity.

             Possible values: **individual** or **organization**
          enum:
            - individual
            - organization
          type: string
      required:
        - type
      type: object
    NOLocalAccountIdentification:
      additionalProperties: false
      properties:
        accountNumber:
          description: The 11-digit bank account number, without separators or whitespace.
          maxLength: 11
          minLength: 11
          type: string
        type:
          default: noLocal
          description: "**noLocal**"
          enum:
            - noLocal
          type: string
      required:
        - type
        - accountNumber
      type: object
    Name:
      properties:
        firstName:
          description: The first name.
          type: string
        lastName:
          description: The last name.
          type: string
      required:
        - firstName
        - lastName
      type: object
    Name-3:
      properties:
        firstName:
          description: The individual's first name.
          type: string
        infix:
          description: The infix in the individual's name, if any.
          type: string
        lastName:
          description: The individual's last name.
          type: string
      required:
        - firstName
        - lastName
    NumberAndBicAccountIdentification:
      additionalProperties: false
      properties:
        accountNumber:
          description: The bank account number, without separators or whitespace. The length and format depends on the bank or country.
          maxLength: 34
          type: string
        additionalBankIdentification:
          $ref: "#/components/schemas/AdditionalBankIdentification"
          description: Additional identification codes of the bank. Some banks may require these identifiers for cross-border transfers.
        bic:
          description: The bank's 8- or 11-character BIC or SWIFT code.
          maxLength: 11
          minLength: 8
          type: string
        type:
          default: numberAndBic
          description: "**numberAndBic**"
          enum:
            - numberAndBic
          type: string
      required:
        - type
        - accountNumber
        - bic
      type: object
    Organization:
      properties:
        description:
          description: Your description for the organization.
          type: string
        doingBusinessAs:
          description: The organization's trading name, if different from the registered legal name.
          type: string
        email:
          description: The email address of the legal entity.
          type: string
        legalName:
          description: The organization's legal name.
          type: string
        phone:
          $ref: "#/components/schemas/PhoneNumber-2"
          description: The phone number of the legal entity.
        principalPlaceOfBusiness:
          $ref: "#/components/schemas/Address-3"
          description: The address where the organization operates from. Provide this if the principal place of business is different from the `registeredAddress`.
        registeredAddress:
          $ref: "#/components/schemas/Address-3"
          description: The address of the organization registered at their registrar (such as the Chamber of Commerce).
        registrationNumber:
          description: The organization's registration number.
          type: string
        stockData:
          $ref: "#/components/schemas/StockData"
          description: Information about the organization's publicly traded stock. Provide this object only if `type` is **listedPublicCompany**.
        taxExempt:
          description: |+
            Indicates whether the legal entity is exempt from tax. When **true**, the `taxIdAbsenceReason` must be provided.

          type: boolean
        taxId:
          description: The organization's tax identifier.
          type: string
        taxIdAbsenceReason:
          description: |-
            The reason the organization has not provided a tax identifier.

            Possible values: **industryExemption**, **belowTaxThreshold**.
          enum:
            - industryExemption
            - belowTaxThreshold
          type: string
        type:
          description: |-
            Type of organization. 

            Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.
          enum:
            - associationIncorporated
            - governmentalOrganization
            - listedPublicCompany
            - nonProfit
            - partnershipIncorporated
            - privateCompany
          type: string
        webData:
          $ref: "#/components/schemas/WebData"
          deprecated: true
          description: The website and app URL of the legal entity.
          x-deprecatedInVersion: "1"
      required:
        - legalName
        - registeredAddress
      type: object
    OwnerEntity:
      properties:
        id:
          description: Unique identifier of the resource that owns the document. For `type` **legalEntity**, this value is the unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id). For `type` **bankAccount**, this value is the unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).
          type: string
        type:
          description: |-
            Type of resource that owns the document.

            Possible values: **legalEntity**, **bankAccount**.
          type: string
      required:
        - id
        - type
      type: object
    PLLocalAccountIdentification:
      additionalProperties: false
      properties:
        accountNumber:
          description: The 26-digit bank account number ([Numer rachunku](https://pl.wikipedia.org/wiki/Numer_Rachunku_Bankowego)), without separators or whitespace.
          maxLength: 26
          minLength: 26
          type: string
        type:
          default: plLocal
          description: "**plLocal**"
          enum:
            - plLocal
          type: string
      required:
        - type
        - accountNumber
      type: object
    PaginatedAccountHoldersResponse:
      properties:
        accountHolders:
          description: List of account holders.
          items:
            $ref: "#/components/schemas/AccountHolder"
          type: array
        hasNext:
          description: Indicates whether there are more items on the next page.
          type: boolean
        hasPrevious:
          description: Indicates whether there are more items on the previous page.
          type: boolean
      required:
        - accountHolders
        - hasPrevious
        - hasNext
      type: object
    PaginatedBalanceAccountsResponse:
      properties:
        balanceAccounts:
          description: List of balance accounts.
          items:
            $ref: "#/components/schemas/BalanceAccount"
          type: array
        hasNext:
          description: Indicates whether there are more items on the next page.
          type: boolean
        hasPrevious:
          description: Indicates whether there are more items on the previous page.
          type: boolean
      required:
        - balanceAccounts
        - hasPrevious
        - hasNext
      type: object
    PaginatedPaymentInstrumentsResponse:
      properties:
        hasNext:
          description: Indicates whether there are more items on the next page.
          type: boolean
        hasPrevious:
          description: Indicates whether there are more items on the previous page.
          type: boolean
        paymentInstruments:
          description: List of payment instruments associated with the balance account.
          items:
            $ref: "#/components/schemas/PaymentInstrument"
          type: array
      required:
        - paymentInstruments
        - hasPrevious
        - hasNext
      type: object
    PaymentInstrument:
      properties:
        balanceAccountId:
          description: The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
          type: string
        bankAccount:
          description: Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.
          oneOf:
            - $ref: "#/components/schemas/IbanAccountIdentification"
            - $ref: "#/components/schemas/USLocalAccountIdentification"
        card:
          $ref: "#/components/schemas/Card"
          description: Contains information about the card payment instrument. Returned when you create a payment instrument with `type` **card**.
        description:
          description: Your description for the payment instrument, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: The unique identifier of the payment instrument.
          type: string
        issuingCountryCode:
          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
          type: string
        paymentInstrumentGroupId:
          description: The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
          type: string
        reference:
          description: Your reference for the payment instrument, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: "The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.


            Possible values:\ 


            \ * **Active**:  The payment instrument is active and can be used to make payments.\ 


            \ * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.\ 


            * **Inactive**: The payment instrument is inactive and cannot be used to make payments.\ 


            \ * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.\ 


            \ * **Closed**: The payment instrument is permanently closed. This action cannot be undone.\ 


            * **Stolen**\ 


            \ * **Lost**


            \ "
          enum:
            - Active
            - Closed
            - Inactive
            - Lost
            - Requested
            - Stolen
            - Suspended
            - blocked
            - discarded
          type: string
          x-enum:
            - description: The payment instrument has been requested. This state is applicable when creating physical cards.
              value: Requested
            - description: The payment instrument is active and can be used to make payments.
              value: Active
            - description: The payment instrument is inactive and cannot be used to make payments.
              value: Inactive
            - description: The payment instrument is temporarily suspended and cannot be used to make payments.
              value: Suspended
            - description: The payment instrument is permanently closed. This action cannot be undone.
              value: Closed
            - description: The payment instrument is suspended. Either because it was stolen or lost.
              value: blocked
            - description: The payment instrument is permanently closed. This action cannot be undone.
              value: discarded
        type:
          description: |-
            Type of payment instrument.

            Possible value: **card**, **bankAccount**. 
          enum:
            - bankAccount
            - card
          type: string
      required:
        - balanceAccountId
        - issuingCountryCode
        - type
        - id
      type: object
    PaymentInstrumentGroup:
      properties:
        balancePlatform:
          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the payment instrument group belongs.
          type: string
        description:
          description: Your description for the payment instrument group, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: The unique identifier of the payment instrument group.
          type: string
        properties:
          additionalProperties:
            type: string
          description: Properties of the payment instrument group.
          type: object
        reference:
          description: Your reference for the payment instrument group, maximum 150 characters.
          maxLength: 150
          type: string
        txVariant:
          description: The tx variant of the payment instrument group.
          type: string
      required:
        - balancePlatform
        - txVariant
      type: object
    PaymentInstrumentGroupInfo:
      properties:
        balancePlatform:
          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the payment instrument group belongs.
          type: string
        description:
          description: Your description for the payment instrument group, maximum 300 characters.
          maxLength: 300
          type: string
        properties:
          additionalProperties:
            type: string
          description: Properties of the payment instrument group.
          type: object
        reference:
          description: Your reference for the payment instrument group, maximum 150 characters.
          maxLength: 150
          type: string
        txVariant:
          description: The tx variant of the payment instrument group.
          type: string
      required:
        - balancePlatform
        - txVariant
      type: object
    PaymentInstrumentInfo:
      properties:
        balanceAccountId:
          description: The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
          type: string
        card:
          $ref: "#/components/schemas/CardInfo"
          description: Contains information about the card. Required when you create a payment instrument of `type` **card**.
        description:
          description: Your description for the payment instrument, maximum 300 characters.
          maxLength: 300
          type: string
        issuingCountryCode:
          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
          type: string
        paymentInstrumentGroupId:
          description: The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
          type: string
        reference:
          description: Your reference for the payment instrument, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: "The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.


            Possible values:\ 


            \ * **Active**:  The payment instrument is active and can be used to make payments.\ 


            \ * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.\ 


            * **Inactive**: The payment instrument is inactive and cannot be used to make payments.\ 


            \ * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.\ 


            \ * **Closed**: The payment instrument is permanently closed. This action cannot be undone.\ 


            * **Stolen**\ 


            \ * **Lost**


            \ "
          enum:
            - Active
            - Closed
            - Inactive
            - Lost
            - Requested
            - Stolen
            - Suspended
            - blocked
            - discarded
          type: string
          x-enum:
            - description: The payment instrument has been requested. This state is applicable when creating physical cards.
              value: Requested
            - description: The payment instrument is active and can be used to make payments.
              value: Active
            - description: The payment instrument is inactive and cannot be used to make payments.
              value: Inactive
            - description: The payment instrument is temporarily suspended and cannot be used to make payments.
              value: Suspended
            - description: The payment instrument is permanently closed. This action cannot be undone.
              value: Closed
            - description: The payment instrument is suspended. Either because it was stolen or lost.
              value: blocked
            - description: The payment instrument is permanently closed. This action cannot be undone.
              value: discarded
        type:
          description: |-
            Type of payment instrument.

            Possible value: **card**, **bankAccount**. 
          enum:
            - bankAccount
            - card
          type: string
      required:
        - balanceAccountId
        - issuingCountryCode
        - type
      type: object
    PaymentInstrumentReference:
      properties:
        id:
          description: The unique identifier of the payment instrument.
          type: string
      required:
        - id
      type: object
    PaymentInstrumentRevealInfo:
      properties:
        cvc:
          description: The CVC2 value of the card.
          type: string
        expiration:
          $ref: "#/components/schemas/Expiry"
          description: The expiration date of the card.
        pan:
          description: The primary account number (PAN) of the card.
          type: string
      required:
        - pan
        - expiration
        - cvc
      type: object
    PaymentInstrumentUpdateRequest:
      properties:
        balanceAccountId:
          description: |-
            The unique identifier of the balance account associated with this payment instrument.
            >You can only change the balance account ID if the payment instrument has **Requested** or **Inactive** status.
          type: string
        card:
          $ref: "#/components/schemas/CardInfo"
          description: Object that contains information about the card payment instrument.
        status:
          description: "The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.


            Possible values:\ 


            \ * **Active**:  The payment instrument is active and can be used to make payments.\ 


            \ * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.\ 


            * **Inactive**: The payment instrument is inactive and cannot be used to make payments.\ 


            \ * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.\ 


            \ * **Closed**: The payment instrument is permanently closed. This action cannot be undone.\ 


            * **Stolen**\ 


            \ * **Lost**


            \ "
          enum:
            - Active
            - Closed
            - Inactive
            - Lost
            - Requested
            - Stolen
            - Suspended
            - blocked
            - discarded
          type: string
          x-enum:
            - description: The payment instrument has been requested. This state is applicable when creating physical cards.
              value: Requested
            - description: The payment instrument is active and can be used to make payments.
              value: Active
            - description: The payment instrument is inactive and cannot be used to make payments.
              value: Inactive
            - description: The payment instrument is temporarily suspended and cannot be used to make payments.
              value: Suspended
            - description: The payment instrument is permanently closed. This action cannot be undone.
              value: Closed
            - description: The payment instrument is suspended. Either because it was stolen or lost.
              value: blocked
            - description: The payment instrument is permanently closed. This action cannot be undone.
              value: discarded
        statusComment:
          description: Comment for the status of the payment instrument.
          type: string
      type: object
    PersonalData:
      properties:
        dateOfBirth:
          description: |-
            The date of birth of the person.
            The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
          type: string
        idNumber:
          description: An ID number of the person.
          type: string
        nationality:
          description: |-
            The nationality of the person represented by a two-character country code.
            >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
          maxLength: 2
          minLength: 2
          type: string
      type: object
    Phone:
      properties:
        number:
          description: |-
            The full phone number provided as a single string. 
            For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**, 

             or **"(0031) 611223344"**.
          type: string
        type:
          description: |
            Type of phone number.
            Possible values: 
            **Landline**, **Mobile**.
          enum:
            - Landline
            - Mobile
          type: string
      required:
        - number
        - type
      type: object
    PhoneNumber:
      properties:
        phoneCountryCode:
          description: |-
            The two-character ISO-3166-1 alpha-2 country code of the phone number.
            For example, **US** or **NL**.
          type: string
        phoneNumber:
          description: |-
            The phone number.
            The inclusion of the phone number country code is not necessary.
          type: string
        phoneType:
          description: |-
            The type of the phone number.
            Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.
          enum:
            - Fax
            - Landline
            - Mobile
            - SIP
          type: string
      type: object
    PhoneNumber-2:
      properties:
        countryCode:
          description: The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code. For example, **US** or **NL**.
          type: string
        number:
          description: The phone number.
          type: string
        type:
          description: |-
            The type of phone number.
             Possible values: **mobile**, **landline**, **sip**, **fax.** 
          type: string
      required:
        - type
        - number
    RemediatingAction:
      properties:
        code:
          type: string
        message:
          type: string
      type: object
    RestServiceError:
      properties:
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
        errorCode:
          description: A code that identifies the problem type.
          type: string
        instance:
          description: A unique URI that identifies the specific occurrence of the problem.
          type: string
        invalidFields:
          description: Detailed explanation of each validation error, when applicable.
          items:
            $ref: "#/components/schemas/InvalidField"
          type: array
        requestId:
          description: A unique reference for the request, essentially the same as `pspReference`.
          type: string
        response:
          $ref: "#/components/schemas/JSONObject"
          description: JSON response payload.
        status:
          description: The HTTP status code.
          format: int32
          type: integer
        title:
          description: A short, human-readable summary of the problem type.
          type: string
        type:
          description: A URI that identifies the problem type, pointing to human-readable documentation on this problem type.
          type: string
      required:
        - type
        - errorCode
        - title
        - detail
        - status
      type: object
    SELocalAccountIdentification:
      additionalProperties: false
      properties:
        accountNumber:
          description: The 7- to 10-digit bank account number ([Bankkontonummer](https://sv.wikipedia.org/wiki/Bankkonto)), without the clearing number, separators, or whitespace.
          maxLength: 10
          minLength: 7
          type: string
        clearingNumber:
          description: The 4- to 5-digit clearing number ([Clearingnummer](https://sv.wikipedia.org/wiki/Clearingnummer)), without separators or whitespace.
          maxLength: 5
          minLength: 4
          type: string
        type:
          default: seLocal
          description: "**seLocal**"
          enum:
            - seLocal
          type: string
      required:
        - type
        - accountNumber
        - clearingNumber
      type: object
    SGLocalAccountIdentification:
      additionalProperties: false
      properties:
        accountNumber:
          description: The 4- to 19-digit bank account number, without separators or whitespace.
          maxLength: 19
          minLength: 4
          type: string
        bic:
          description: The bank's 8- or 11-character BIC or SWIFT code.
          maxLength: 11
          minLength: 8
          type: string
        type:
          default: sgLocal
          description: "**sgLocal**"
          enum:
            - sgLocal
          type: string
      required:
        - accountNumber
        - bic
      type: object
    ServiceError:
      properties:
        errorCode:
          description: The error code mapped to the error message.
          type: string
        errorType:
          description: The category of the error.
          type: string
        message:
          description: A short explanation of the issue.
          type: string
        pspReference:
          description: The PSP reference of the payment.
          type: string
        status:
          description: The HTTP response status.
          format: int32
          type: integer
      type: object
    StockData:
      properties:
        marketIdentifier:
          description: The four-digit [Market Identifier Code](https://en.wikipedia.org/wiki/Market_Identifier_Code) of the stock market where the organization's stocks are traded.
          type: string
        stockNumber:
          description: The 12-digit International Securities Identification Number (ISIN) of the company, without dashes (-).
          type: string
        tickerSymbol:
          description: The stock ticker symbol.
          type: string
      type: object
    SupportingEntityCapability:
      properties:
        allowed:
          description: |-
            Indicates whether the supporting entity capability is allowed.

            If a supporting entity is allowed but its parent legal entity is not, it means there are other supporting entities that failed validation.

            **The allowed supporting entity can still be used**
          readOnly: true
          type: boolean
        id:
          description: "Supporting entity reference "
          readOnly: true
          type: string
        requested:
          description: "Indicates whether the supporting entity capability is requested. "
          readOnly: true
          type: boolean
        verificationStatus:
          description: |
            The status of the verification checks for the supporting entity capability.

            Possible values:

            * **pending**: Adyen is running the verification.

            * **invalid**: The verification failed. Check if the `errors` array contains more information.

            * **valid**: The verification has been successfully completed.

            * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
          readOnly: true
          type: string
      type: object
    SweepConfiguration:
      properties:
        balanceAccountId:
          description: |-
            The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).

             You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
          type: string
        id:
          description: The unique identifier of the sweep.
          readOnly: true
          type: string
        merchantAccount:
          description: The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.
          type: string
        schedule:
          description: The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
          oneOf:
            - $ref: "#/components/schemas/CronSweepSchedule"
            - $ref: "#/components/schemas/SweepSchedule"
        status:
          description: |+
            The status of the sweep. If not provided, by default, this is set to **active**.

            Possible values: 

             * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration. 

             * **inactive**: the sweep is disabled and cannot be triggered. 

          enum:
            - active
            - inactive
          type: string
          x-enum:
            - description: The sweep is enabled and funds will be pulled in or pushed out based on the defined configuration
              value: active
            - description: The sweep is disabled and cannot be triggered.
              value: inactive
        sweepAmount:
          $ref: "#/components/schemas/Amount"
          description: The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both.
        targetAmount:
          $ref: "#/components/schemas/Amount"
          description: The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both.
        transferInstrumentId:
          description: |-
            The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).

            You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
          type: string
        triggerAmount:
          $ref: "#/components/schemas/Amount"
          description: |-
            The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.

            * For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.

            * For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account.
        type:
          default: push
          description: |-
            The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.

            Possible values:

             * **push**: _push out funds_ to a destination balance account or transfer instrument.

             * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
          enum:
            - pull
            - push
          type: string
      required:
        - id
        - schedule
      type: object
    SweepSchedule:
      additionalProperties: false
      properties:
        type:
          description: |-
            The schedule type.

            Possible values:

            * **cron**: push out funds based on a cron expression.

            * **daily**: push out funds daily at 07:00 AM CET.

            * **weekly**: push out funds every Monday at 07:00 AM CET.

            * **monthly**: push out funds every first of the month at 07:00 AM CET.

            * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
          enum:
            - daily
            - weekly
            - monthly
            - balance
            - cron
          type: string
      type: object
    TransactionRule:
      properties:
        amount:
          $ref: "#/components/schemas/Amount"
          description: The maximum amount that a payment instrument can be used for in the period specified in the `interval.type`.
        balancePlatformId:
          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/get/balancePlatforms/{id}__queryParam_id) to which the rule applies.
          type: string
        countries:
          description: 'List of countries to which the rule applies. For example: **["NL","US"]**.'
          items:
            type: string
          type: array
        description:
          description: Your description for the transaction rule, maximum 300 characters.
          maxLength: 300
          type: string
        endDate:
          description: |-
            The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.

            If not provided, the rule will be evaluated until the rule status is set to **inactive**.
          type: string
        entryModes:
          description: |-
            List of point-of-sale entry modes to which the rule applies.

            Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **token**, **server**, **barcode**, **ocr**.
          items:
            enum:
              - barcode
              - chip
              - cof
              - contactless
              - magstripe
              - manual
              - ocr
              - server
              - unknown
            type: string
          type: array
        id:
          description: The unique identifier of the transaction rule.
          type: string
        interval:
          $ref: "#/components/schemas/TransactionRuleInterval"
          description: The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) when the rule conditions apply.
        maxTransactions:
          description: The maximum number of transactions that a payment instrument can be used for in the period specified in the `interval.type`.
          format: int32
          type: integer
        mccs:
          description: List of Merchant Category Codes (MCCs) to which the rule applies.
          items:
            type: string
          type: array
        paymentInstrumentGroupId:
          description: The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstrumentGroups__resParam_id) to which the rule applies.
          type: string
        paymentInstrumentId:
          description: The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id) to which the rule applies.
          type: string
        processingTypes:
          description: |-
            List of processing types to which the rule applies.

            Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**, **balanceInquiry**.
          items:
            enum:
              - atmWithdraw
              - balanceInquiry
              - ecommerce
              - moto
              - pos
              - recurring
              - token
              - unknown
            type: string
          type: array
        reference:
          description: Your reference for the transaction rule, maximum 150 characters.
          maxLength: 150
          type: string
        startDate:
          description: |+
            The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.

            If not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**. 

          type: string
        status:
          description: |-
            The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created 
            with an **active** status. 

            Possible values: **active**, **inactive**.
          enum:
            - active
            - inactive
          type: string
        type:
          description: |
            Type of conditions provided in the rule.

            Possible values:
              * **allowList**: The rule provides categories (such as country and MCC) where payments must be allowed.
             * **blockList**: The rule provides categories (such as country and MCC) where payments must be blocked.
             * **maxUsage**: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.
             * **velocity**: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
          enum:
            - allowList
            - blockList
            - maxUsage
            - velocity
          type: string
          x-enum:
            - description: The rule provides categories (such as country and MCC) where payments must be allowed.
              value: allowList
            - description: The rule provides categories (such as country and MCC) where payments must be blocked.
              value: blockList
            - description: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
              value: velocity
            - description: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.
              value: maxUsage
      required:
        - type
        - description
        - reference
        - interval
      type: object
    TransactionRuleInfo:
      properties:
        amount:
          $ref: "#/components/schemas/Amount"
          description: The maximum amount that a payment instrument can be used for in the period specified in the `interval.type`.
        balancePlatformId:
          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/get/balancePlatforms/{id}__queryParam_id) to which the rule applies.
          type: string
        countries:
          description: 'List of countries to which the rule applies. For example: **["NL","US"]**.'
          items:
            type: string
          type: array
        description:
          description: Your description for the transaction rule, maximum 300 characters.
          maxLength: 300
          type: string
        endDate:
          description: |-
            The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.

            If not provided, the rule will be evaluated until the rule status is set to **inactive**.
          type: string
        entryModes:
          description: |-
            List of point-of-sale entry modes to which the rule applies.

            Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **token**, **server**, **barcode**, **ocr**.
          items:
            enum:
              - barcode
              - chip
              - cof
              - contactless
              - magstripe
              - manual
              - ocr
              - server
              - unknown
            type: string
          type: array
        interval:
          $ref: "#/components/schemas/TransactionRuleInterval"
          description: The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) when the rule conditions apply.
        maxTransactions:
          description: The maximum number of transactions that a payment instrument can be used for in the period specified in the `interval.type`.
          format: int32
          type: integer
        mccs:
          description: List of Merchant Category Codes (MCCs) to which the rule applies.
          items:
            type: string
          type: array
        paymentInstrumentGroupId:
          description: The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstrumentGroups__resParam_id) to which the rule applies.
          type: string
        paymentInstrumentId:
          description: The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id) to which the rule applies.
          type: string
        processingTypes:
          description: |-
            List of processing types to which the rule applies.

            Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**, **balanceInquiry**.
          items:
            enum:
              - atmWithdraw
              - balanceInquiry
              - ecommerce
              - moto
              - pos
              - recurring
              - token
              - unknown
            type: string
          type: array
        reference:
          description: Your reference for the transaction rule, maximum 150 characters.
          maxLength: 150
          type: string
        startDate:
          description: |+
            The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.

            If not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**. 

          type: string
        status:
          description: |-
            The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created 
            with an **active** status. 

            Possible values: **active**, **inactive**.
          enum:
            - active
            - inactive
          type: string
        type:
          description: |
            Type of conditions provided in the rule.

            Possible values:
              * **allowList**: The rule provides categories (such as country and MCC) where payments must be allowed.
             * **blockList**: The rule provides categories (such as country and MCC) where payments must be blocked.
             * **maxUsage**: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.
             * **velocity**: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
          enum:
            - allowList
            - blockList
            - maxUsage
            - velocity
          type: string
          x-enum:
            - description: The rule provides categories (such as country and MCC) where payments must be allowed.
              value: allowList
            - description: The rule provides categories (such as country and MCC) where payments must be blocked.
              value: blockList
            - description: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
              value: velocity
            - description: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.
              value: maxUsage
      required:
        - type
        - description
        - reference
        - interval
      type: object
    TransactionRuleInterval:
      properties:
        type:
          description: |
            The [type of interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) during which the rule conditions and limits apply, and how often counters are reset.

            Possible values:
              * **perTransaction**: conditions are evaluated and the counters are reset for every transaction.
             * **daily**: the counters are reset daily at 00:00:00 UTC.
             * **weekly**: the counters are reset every Monday at 00:00:00 UTC. 
             * **monthly**: the counters reset every first day of the month at 00:00:00 UTC. 
             * **lifetime**: conditions are applied to the lifetime of the payment instrument.
          enum:
            - daily
            - lifetime
            - monthly
            - perTransaction
            - weekly
          type: string
      required:
        - type
      type: object
    TransactionRuleResponse:
      properties:
        transactionRule:
          $ref: "#/components/schemas/TransactionRule"
          description: The transaction rule.
      type: object
    TransactionRulesResponse:
      properties:
        transactionRules:
          description: List of transaction rules.
          items:
            $ref: "#/components/schemas/TransactionRule"
          type: array
      type: object
    TransferInstrument:
      properties:
        bankAccount:
          $ref: "#/components/schemas/BankAccountInfo"
          description: Contains information about the legal entity's bank account.
        documents:
          deprecated: true
          description: List of documents uploaded for the transfer instrument.
          items:
            $ref: "#/components/schemas/EntityReference"
          type: array
          x-deprecatedInVersion: "1"
        id:
          description: The unique identifier of the transfer instrument.
          readOnly: true
          type: string
        legalEntityId:
          description: The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the transfer instrument.
          type: string
        type:
          description: |-
            The type of transfer instrument.

            Possible value: **bankAccount**.
          enum:
            - bankAccount
            - recurringDetail
          type: string
      required:
        - legalEntityId
        - type
        - bankAccount
        - id
      type: object
    TransferInstrumentInfo:
      properties:
        bankAccount:
          $ref: "#/components/schemas/BankAccountInfo"
          description: Contains information about the legal entity's bank account.
        legalEntityId:
          description: The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the transfer instrument.
          type: string
        type:
          description: |-
            The type of transfer instrument.

            Possible value: **bankAccount**.
          enum:
            - bankAccount
            - recurringDetail
          type: string
      required:
        - legalEntityId
        - type
        - bankAccount
      type: object
    TransferInstrumentReference:
      properties:
        accountIdentifier:
          description: The masked IBAN or bank account number.
          type: string
        id:
          description: The unique identifier of the resource.
          type: string
      required:
        - id
        - accountIdentifier
      type: object
    UKLocalAccountIdentification:
      additionalProperties: false
      properties:
        accountNumber:
          description: The 8-digit bank account number, without separators or whitespace.
          maxLength: 8
          minLength: 8
          type: string
        sortCode:
          description: The 6-digit [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace.
          maxLength: 6
          minLength: 6
          type: string
        type:
          default: ukLocal
          description: "**ukLocal**"
          enum:
            - ukLocal
          type: string
      required:
        - type
        - accountNumber
        - sortCode
      type: object
    USLocalAccountIdentification:
      additionalProperties: false
      properties:
        accountNumber:
          description: The bank account number, without separators or whitespace.
          maxLength: 18
          minLength: 2
          type: string
        accountType:
          default: checking
          description: |-
            The bank account type.

            Possible values: **checking** or **savings**. Defaults to **checking**.
          enum:
            - checking
            - savings
          type: string
        routingNumber:
          description: The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.
          maxLength: 9
          minLength: 9
          type: string
        type:
          default: usLocal
          description: "**usLocal**"
          enum:
            - usLocal
          type: string
      required:
        - type
        - accountNumber
        - routingNumber
      type: object
    UpdatePaymentInstrument:
      properties:
        balanceAccountId:
          description: The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
          type: string
        bankAccount:
          description: Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.
          oneOf:
            - $ref: "#/components/schemas/IbanAccountIdentification"
            - $ref: "#/components/schemas/USLocalAccountIdentification"
        card:
          $ref: "#/components/schemas/Card"
          description: Contains information about the card payment instrument. Returned when you create a payment instrument with `type` **card**.
        description:
          description: Your description for the payment instrument, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: The unique identifier of the payment instrument.
          type: string
        issuingCountryCode:
          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
          type: string
        paymentInstrumentGroupId:
          description: The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
          type: string
        reference:
          description: Your reference for the payment instrument, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: "The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.


            Possible values:\ 


            \ * **Active**:  The payment instrument is active and can be used to make payments.\ 


            \ * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.\ 


            * **Inactive**: The payment instrument is inactive and cannot be used to make payments.\ 


            \ * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.\ 


            \ * **Closed**: The payment instrument is permanently closed. This action cannot be undone.\ 


            * **Stolen**\ 


            \ * **Lost**


            \ "
          enum:
            - Active
            - Closed
            - Inactive
            - Lost
            - Requested
            - Stolen
            - Suspended
            - blocked
            - discarded
          type: string
          x-enum:
            - description: The payment instrument has been requested. This state is applicable when creating physical cards.
              value: Requested
            - description: The payment instrument is active and can be used to make payments.
              value: Active
            - description: The payment instrument is inactive and cannot be used to make payments.
              value: Inactive
            - description: The payment instrument is temporarily suspended and cannot be used to make payments.
              value: Suspended
            - description: The payment instrument is permanently closed. This action cannot be undone.
              value: Closed
            - description: The payment instrument is suspended. Either because it was stolen or lost.
              value: blocked
            - description: The payment instrument is permanently closed. This action cannot be undone.
              value: discarded
        statusComment:
          description: Comment for the status of the payment instrument.
          type: string
        type:
          description: |-
            Type of payment instrument.

            Possible value: **card**, **bankAccount**. 
          enum:
            - bankAccount
            - card
          type: string
      required:
        - balanceAccountId
        - issuingCountryCode
        - type
        - id
      type: object
    VerificationError:
      properties:
        capabilities:
          description: Contains key-value pairs that specify the actions that the legal entity can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.
          items:
            enum:
              - acceptExternalFunding
              - acceptPspFunding
              - acceptTransactionInRestrictedCountries
              - acceptTransactionInRestrictedCountriesCommercial
              - acceptTransactionInRestrictedCountriesConsumer
              - acceptTransactionInRestrictedIndustries
              - acceptTransactionInRestrictedIndustriesCommercial
              - acceptTransactionInRestrictedIndustriesConsumer
              - acquiring
              - atmWithdrawal
              - atmWithdrawalCommercial
              - atmWithdrawalConsumer
              - atmWithdrawalInRestrictedCountries
              - atmWithdrawalInRestrictedCountriesCommercial
              - atmWithdrawalInRestrictedCountriesConsumer
              - authorisedPaymentInstrumentUser
              - getGrantOffers
              - issueBankAccount
              - issueCard
              - issueCardCommercial
              - issueCardConsumer
              - localAcceptance
              - payout
              - payoutToTransferInstrument
              - processing
              - receiveFromBalanceAccount
              - receiveFromPlatformPayments
              - receiveFromThirdParty
              - receiveFromTransferInstrument
              - receiveGrants
              - receivePayments
              - sendToBalanceAccount
              - sendToThirdParty
              - sendToTransferInstrument
              - thirdPartyFunding
              - useCard
              - useCardCommercial
              - useCardConsumer
              - useCardInRestrictedCountries
              - useCardInRestrictedCountriesCommercial
              - useCardInRestrictedCountriesConsumer
              - useCardInRestrictedIndustries
              - useCardInRestrictedIndustriesCommercial
              - useCardInRestrictedIndustriesConsumer
              - withdrawFromAtm
              - withdrawFromAtmCommercial
              - withdrawFromAtmConsumer
              - withdrawFromAtmInRestrictedCountries
              - withdrawFromAtmInRestrictedCountriesCommercial
              - withdrawFromAtmInRestrictedCountriesConsumer
            type: string
          type: array
        code:
          description: The general error code.
          type: string
        message:
          description: The general error message.
          type: string
        remediatingActions:
          description: An object containing possible solutions to fix a verification error.
          items:
            $ref: "#/components/schemas/RemediatingAction"
          type: array
        subErrors:
          description: An array containing more granular information about the cause of the verification error.
          items:
            $ref: "#/components/schemas/VerificationError-recursive"
          type: array
        type:
          description: The type of error.
          enum:
            - dataMissing
            - invalidInput
            - pendingStatus
          type: string
      type: object
    VerificationError-recursive:
      properties:
        capabilities:
          description: Contains key-value pairs that specify the actions that the legal entity can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.
          items:
            enum:
              - acceptExternalFunding
              - acceptPspFunding
              - acceptTransactionInRestrictedCountries
              - acceptTransactionInRestrictedCountriesCommercial
              - acceptTransactionInRestrictedCountriesConsumer
              - acceptTransactionInRestrictedIndustries
              - acceptTransactionInRestrictedIndustriesCommercial
              - acceptTransactionInRestrictedIndustriesConsumer
              - acquiring
              - atmWithdrawal
              - atmWithdrawalCommercial
              - atmWithdrawalConsumer
              - atmWithdrawalInRestrictedCountries
              - atmWithdrawalInRestrictedCountriesCommercial
              - atmWithdrawalInRestrictedCountriesConsumer
              - authorisedPaymentInstrumentUser
              - getGrantOffers
              - issueBankAccount
              - issueCard
              - issueCardCommercial
              - issueCardConsumer
              - localAcceptance
              - payout
              - payoutToTransferInstrument
              - processing
              - receiveFromBalanceAccount
              - receiveFromPlatformPayments
              - receiveFromThirdParty
              - receiveFromTransferInstrument
              - receiveGrants
              - receivePayments
              - sendToBalanceAccount
              - sendToThirdParty
              - sendToTransferInstrument
              - thirdPartyFunding
              - useCard
              - useCardCommercial
              - useCardConsumer
              - useCardInRestrictedCountries
              - useCardInRestrictedCountriesCommercial
              - useCardInRestrictedCountriesConsumer
              - useCardInRestrictedIndustries
              - useCardInRestrictedIndustriesCommercial
              - useCardInRestrictedIndustriesConsumer
              - withdrawFromAtm
              - withdrawFromAtmCommercial
              - withdrawFromAtmConsumer
              - withdrawFromAtmInRestrictedCountries
              - withdrawFromAtmInRestrictedCountriesCommercial
              - withdrawFromAtmInRestrictedCountriesConsumer
            type: string
          type: array
        code:
          description: The general error code.
          type: string
        message:
          description: The general error message.
          type: string
        remediatingActions:
          description: An object containing possible solutions to fix a verification error.
          items:
            $ref: "#/components/schemas/RemediatingAction"
          type: array
        type:
          description: The type of error.
          enum:
            - dataMissing
            - invalidInput
            - pendingStatus
          type: string
      type: object
    Void:
      type: object
    VoidResponse:
      type: object
    WebData:
      properties:
        webAddress:
          description: The URL of the website or the app store URL.
          type: string
        webAddressId:
          description: The unique identifier of the web address.
          readOnly: true
          type: string
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
    BasicAuth:
      scheme: basic
      type: http
x-groups:
  - Platform
  - Account holders
  - Balance accounts
  - Payment instruments
  - Payment instrument groups
  - Transaction rules
  - Bank account validation
  - Legal entities
  - Transfer instruments
  - Documents
