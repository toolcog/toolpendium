{
  "name": "get-merchants-merchantId-terminalSettings",
  "description": "Returns the payment terminal settings that are configured for the merchant account identified in the path. These settings apply to all terminals under the merchant account unless different values are configured at a lower level (store or individual terminal).\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read\n* Management API—Terminal settings read and write",
  "parameters": {
    "type": "object",
    "properties": {
      "merchantId": {
        "type": "string",
        "description": "The unique identifier of the merchant account."
      }
    },
    "required": [
      "merchantId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://management-test.adyen.com/v3/merchants/{merchantId}/terminalSettings"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**cardholderReceipt**",
              {
                "$ul": [
                  "**headerForAuthorizedReceipt**: A custom header to show on the shopper receipt for an authorised transaction. Allows one or two comma-separated header lines, and blank lines. For example, `header,header,filler`"
                ]
              }
            ],
            [
              "**connectivity**",
              {
                "$ul": [
                  "**simcardStatus**: Indicates the status of the SIM card in the payment terminal. Can be updated and received only at terminal level, and only for models that support cellular connectivity."
                ]
              }
            ],
            "**gratuities**: Settings for tipping with or without predefined options to choose from. The maximum number of predefined options is four, or three plus the option to enter a custom tip.",
            [
              "**hardware**",
              {
                "$ul": [
                  "**displayMaximumBackLight**: The brightness of the display when the terminal is being used, expressed as a percentage.",
                  "**resetTotalsHour**: The hour of the day when the terminal is set to reset the Totals report. By default, the reset hour is at 6:00 AM in the timezone of the terminal. Minimum value: 0, maximum value: 23.",
                  "**restartHour**: The hour of the day when the terminal is set to reboot to apply the configuration and software updates. By default, the restart hour is at 6:00 AM in the timezone of the terminal. Minimum value: 0, maximum value: 23."
                ]
              }
            ],
            [
              "**localization**",
              {
                "$ul": [
                  "**language**: Language of the terminal.",
                  "**secondaryLanguage**: Secondary language of the terminal.",
                  "**timezone**: The time zone of the terminal."
                ]
              }
            ],
            [
              "**nexo**",
              {
                "$ul": [
                  [
                    "**displayUrls**",
                    {
                      "$ul": [
                        "**localUrls**: One or more local URLs to send notifications to when using Terminal API.",
                        "**publicUrls**: One or more public URLs to send notifications to when using Terminal API."
                      ]
                    }
                  ],
                  [
                    "**encryptionKey**",
                    {
                      "$ul": [
                        "**identifier**: The unique identifier of the shared key.",
                        "**passphrase**: The secure passphrase to protect the shared key.",
                        "**version**: The version number of the shared key."
                      ]
                    }
                  ],
                  [
                    "**eventUrls**",
                    {
                      "$ul": [
                        "**eventLocalUrls**: One or more local URLs to send event notifications to when using Terminal API.",
                        "**eventPublicUrls**: One or more public URLs to send event notifications to when using Terminal API."
                      ]
                    }
                  ],
                  "**nexoEventUrls**: One or more URLs to send event messages to when using Terminal API.",
                  [
                    "**notification**",
                    {
                      "$ul": [
                        "**category**: The type of event notification sent when you select the notification button.",
                        "**details**: The text shown in the prompt which opens when you select the notification button. For example, the description of the input box for pay-at-table.",
                        "**enabled**: Enables sending event notifications either by pressing the Confirm key on terminals with a keypad or by tapping the event notification button on the terminal screen.",
                        "**showButton**: Shows or hides the event notification button on the screen of terminal models that have a keypad.",
                        "**title**: The name of the notification button on the terminal screen."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**offlineProcessing**",
              {
                "$ul": [
                  "**chipFloorLimit**: The maximum offline transaction amount for chip cards, in the processing currency and specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).",
                  "**offlineSwipeLimits**: The maximum offline transaction amount for swiped cards, in the specified currency."
                ]
              }
            ],
            [
              "**opi**",
              {
                "$ul": [
                  "**enablePayAtTable**: Indicates if Pay at table is enabled.",
                  "**payAtTableStoreNumber**: The store number to use for Pay at Table.",
                  "**payAtTableURL**: The URL and port number used for Pay at Table communication."
                ]
              }
            ],
            [
              "**passcodes**",
              {
                "$ul": [
                  "**adminMenuPin**: The passcode for the Admin menu and the Settings menu.",
                  "**refundPin**: The passcode for referenced and unreferenced refunds on standalone terminals.",
                  "**screenLockPin**: The passcode to unlock the terminal screen after a timeout.",
                  "**txMenuPin**: The passcode for the Transactions menu."
                ]
              }
            ],
            [
              "**payAtTable**",
              {
                "$ul": [
                  "**authenticationMethod**: Allowed authentication methods: Magswipe, Manual Entry.",
                  "**enablePayAtTable**: Enable Pay at table.",
                  "**paymentInstrument**: Sets the allowed payment instrument for Pay at table transactions.  Can be: **cash** or **card**. If not set, the terminal presents both options."
                ]
              }
            ],
            [
              "**payment**",
              {
                "$ul": [
                  "**contactlessCurrency**: The default currency for contactless payments on the payment terminal, as the three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.",
                  "**hideMinorUnitsInCurrencies**: Hides the minor units for the listed [ISO currency codes](https://en.wikipedia.org/wiki/ISO_4217)."
                ]
              }
            ],
            [
              "**receiptOptions**",
              {
                "$ul": [
                  "**logo**: The receipt logo converted to a Base64-encoded string. The image must be a .bmp file of < 256 KB, dimensions 240 (H) x 384 (W) px.",
                  "**promptBeforePrinting**: Indicates whether a screen appears asking if you want to print the shopper receipt.",
                  "**qrCodeData**: Data to print on the receipt as a QR code. This can include static text and the following variables:"
                ]
              }
            ],
            [
              "**receiptPrinting**",
              {
                "$ul": [
                  "**merchantApproved**: Print a merchant receipt when the payment is approved.",
                  "**merchantCancelled**: Print a merchant receipt when the transaction is cancelled.",
                  "**merchantCaptureApproved**: Print a merchant receipt when capturing the payment is approved.",
                  "**merchantCaptureRefused**: Print a merchant receipt when capturing the payment is refused.",
                  "**merchantRefundApproved**: Print a merchant receipt when the refund is approved.",
                  "**merchantRefundRefused**: Print a merchant receipt when the refund is refused.",
                  "**merchantRefused**: Print a merchant receipt when the payment is refused.",
                  "**merchantVoid**: Print a merchant receipt when a previous transaction is voided.",
                  "**shopperApproved**: Print a shopper receipt when the payment is approved.",
                  "**shopperCancelled**: Print a shopper receipt when the transaction is cancelled.",
                  "**shopperCaptureApproved**: Print a shopper receipt when capturing the payment is approved.",
                  "**shopperCaptureRefused**: Print a shopper receipt when capturing the payment is refused.",
                  "**shopperRefundApproved**: Print a shopper receipt when the refund is approved.",
                  "**shopperRefundRefused**: Print a shopper receipt when the refund is refused.",
                  "**shopperRefused**: Print a shopper receipt when the payment is refused.",
                  "**shopperVoid**: Print a shopper receipt when a previous transaction is voided."
                ]
              }
            ],
            [
              "**refunds**",
              {
                "$ul": [
                  [
                    "**referenced**",
                    {
                      "$ul": [
                        "**enableStandaloneRefunds**: Indicates whether referenced refunds are enabled on the standalone terminal."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**signature**",
              {
                "$ul": [
                  "**askSignatureOnScreen**: If `skipSignature` is false, indicates whether the shopper should provide a signature on the display (**true**) or on the merchant receipt (**false**).",
                  "**deviceName**: Name that identifies the terminal.",
                  "**deviceSlogan**: Slogan shown on the start screen of the device.",
                  "**skipSignature**: Skip asking for a signature. This is possible because all global card schemes (American Express, Diners, Discover, JCB, MasterCard, VISA, and UnionPay) regard a signature as optional."
                ]
              }
            ],
            [
              "**standalone**",
              {
                "$ul": [
                  "**currencyCode**: The default currency of the standalone payment terminal as an [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.",
                  "**enableStandalone**: Enable standalone mode."
                ]
              }
            ],
            [
              "**surcharge**",
              {
                "$ul": [
                  "**askConfirmation**: Show the surcharge details on the terminal, so the shopper can confirm.",
                  "**configurations**: Surcharge fees or percentages for specific payment methods, funding sources (credit or debit), and currencies."
                ]
              }
            ],
            [
              "**tapToPay**",
              {
                "$ul": [
                  "**merchantDisplayName**: The text shown on the screen during the Tap to Pay transaction."
                ]
              }
            ],
            [
              "**terminalInstructions**",
              {
                "$ul": [
                  "**adyenAppRestart**: Indicates whether the Adyen app on the payment terminal restarts automatically when the configuration is updated."
                ]
              }
            ],
            [
              "**timeouts**",
              {
                "$ul": [
                  "**fromActiveToSleep**: Indicates the number of seconds of inactivity after which the terminal display goes into sleep mode."
                ]
              }
            ],
            [
              "**wifiProfiles**",
              {
                "$ul": [
                  "**profiles**: List of remote Wi-Fi profiles.",
                  [
                    "**settings**",
                    {
                      "$ul": [
                        "**band**: The preferred Wi-Fi band, for use if the terminals support multiple bands. Possible values: All, 2.4GHz, 5GHz.",
                        "**roaming**: Indicates whether roaming is enabled on the terminals.",
                        "**timeout**: The connection time-out in seconds. Minimum value: 0."
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: A human-readable explanation specific to this occurrence of the problem.",
            "**errorCode**: A code that identifies the problem type.",
            "**instance**: A unique URI that identifies the specific occurrence of the problem.",
            "**invalidFields**: Detailed explanation of each validation error, when applicable.",
            "**requestId**: A unique reference for the request, essentially the same as `pspReference`.",
            "**response**",
            "**status**: The HTTP status code.",
            "**title**: A short, human-readable summary of the problem type.",
            "**type**: A URI that identifies the problem type, pointing to human-readable documentation on this problem type."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: A human-readable explanation specific to this occurrence of the problem.",
            "**errorCode**: A code that identifies the problem type.",
            "**instance**: A unique URI that identifies the specific occurrence of the problem.",
            "**invalidFields**: Detailed explanation of each validation error, when applicable.",
            "**requestId**: A unique reference for the request, essentially the same as `pspReference`.",
            "**response**",
            "**status**: The HTTP status code.",
            "**title**: A short, human-readable summary of the problem type.",
            "**type**: A URI that identifies the problem type, pointing to human-readable documentation on this problem type."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: A human-readable explanation specific to this occurrence of the problem.",
            "**errorCode**: A code that identifies the problem type.",
            "**instance**: A unique URI that identifies the specific occurrence of the problem.",
            "**invalidFields**: Detailed explanation of each validation error, when applicable.",
            "**requestId**: A unique reference for the request, essentially the same as `pspReference`.",
            "**response**",
            "**status**: The HTTP status code.",
            "**title**: A short, human-readable summary of the problem type.",
            "**type**: A URI that identifies the problem type, pointing to human-readable documentation on this problem type."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "422": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: A human-readable explanation specific to this occurrence of the problem.",
            "**errorCode**: A code that identifies the problem type.",
            "**instance**: A unique URI that identifies the specific occurrence of the problem.",
            "**invalidFields**: Detailed explanation of each validation error, when applicable.",
            "**requestId**: A unique reference for the request, essentially the same as `pspReference`.",
            "**response**",
            "**status**: The HTTP status code.",
            "**title**: A short, human-readable summary of the problem type.",
            "**type**: A URI that identifies the problem type, pointing to human-readable documentation on this problem type."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: A human-readable explanation specific to this occurrence of the problem.",
            "**errorCode**: A code that identifies the problem type.",
            "**instance**: A unique URI that identifies the specific occurrence of the problem.",
            "**invalidFields**: Detailed explanation of each validation error, when applicable.",
            "**requestId**: A unique reference for the request, essentially the same as `pspReference`.",
            "**response**",
            "**status**: The HTTP status code.",
            "**title**: A short, human-readable summary of the problem type.",
            "**type**: A URI that identifies the problem type, pointing to human-readable documentation on this problem type."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
