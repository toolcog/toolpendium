{
  "name": "get-playlist",
  "description": "Get a playlist owned by a Spotify user.\n",
  "parameters": {
    "type": "object",
    "properties": {
      "playlist_id": {
        "description": "The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the playlist.\n",
        "example": "3cEYpjA9oz9GiPac4AsH4n",
        "title": "Playlist ID",
        "type": "string"
      },
      "market": {
        "description": "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\n  If a country code is specified, only content that is available in that market will be returned.<br/>\n  If a valid user access token is specified in the request header, the country associated with\n  the user account will take priority over this parameter.<br/>\n  _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>\n  Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\n",
        "example": "ES",
        "title": "Market",
        "type": "string"
      },
      "fields": {
        "description": "Filters for the query: a comma-separated list of the\nfields to return. If omitted, all fields are returned. For example, to get\njust the playlist''s description and URI: `fields=description,uri`. A dot\nseparator can be used to specify non-reoccurring fields, while parentheses\ncan be used to specify reoccurring fields within objects. For example, to\nget just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\nUse multiple parentheses to drill down into nested objects, for example: `fields=tracks.items(track(name,href,album(name,href)))`.\nFields can be excluded by prefixing them with an exclamation mark, for example:\n`fields=tracks.items(track(name,href,album(!name,href)))`\n",
        "example": "items(added_by.id,track(name,href,album(name,href)))",
        "title": "Fields",
        "type": "string"
      },
      "additional_types": {
        "description": "A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>\n_**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>\nIn addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.\n",
        "title": "Additional Types",
        "type": "string"
      }
    },
    "required": [
      "playlist_id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api.spotify.com/v1/playlists/{playlist_id}{?market,fields,additional_types}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**collaborative**: `true` if the owner allows other users to modify the playlist.",
            "**description**: The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.",
            [
              "**external_urls**",
              {
                "$ul": [
                  "**spotify**: The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object."
                ]
              }
            ],
            [
              "**followers**",
              {
                "$ul": [
                  "**href**: This will always be set to null, as the Web API does not support it at the moment.",
                  "**total**: The total number of followers."
                ]
              }
            ],
            "**href**: A link to the Web API endpoint providing full details of the playlist.",
            "**id**: The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.",
            "**images**: Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._",
            "**name**: The name of the playlist.",
            [
              "**owner**",
              {
                "$ul": [
                  [
                    "**external_urls**",
                    {
                      "$ul": [
                        "**spotify**: The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object."
                      ]
                    }
                  ],
                  [
                    "**followers**",
                    {
                      "$ul": [
                        "**href**: This will always be set to null, as the Web API does not support it at the moment.",
                        "**total**: The total number of followers."
                      ]
                    }
                  ],
                  "**href**: A link to the Web API endpoint for this user.",
                  "**id**: The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.",
                  "**type**: The object type.",
                  "**uri**: The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.",
                  "**display_name**: The name displayed on the user's profile. `null` if not available."
                ]
              }
            ],
            "**public**: The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)",
            "**snapshot_id**: The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version",
            [
              "**tracks**",
              {
                "$ul": [
                  "**href**: A link to the Web API endpoint returning the full result of the request",
                  "**limit**: The maximum number of items in the response (as set in the query or by default).",
                  "**next**: URL to the next page of items. ( `null` if none)",
                  "**offset**: The offset of the items returned (as set in the query or by default)",
                  "**previous**: URL to the previous page of items. ( `null` if none)",
                  "**total**: The total number of items available to return.",
                  "**items**"
                ]
              }
            ],
            "**type**: The object type: \"playlist\"",
            "**uri**: The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**error**",
              {
                "$ul": [
                  "**message**: A short description of the cause of the error.",
                  "**status**: The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information)."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**error**",
              {
                "$ul": [
                  "**message**: A short description of the cause of the error.",
                  "**status**: The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information)."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "429": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**error**",
              {
                "$ul": [
                  "**message**: A short description of the cause of the error.",
                  "**status**: The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information)."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
