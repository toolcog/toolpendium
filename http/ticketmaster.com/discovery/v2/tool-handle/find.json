{
  "name": "find",
  "description": "Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.",
  "parameters": {
    "type": "object",
    "properties": {
      "sort": {
        "default": "relevance,desc",
        "pattern": "^(name|relevance),(asc|desc)$",
        "type": "string",
        "description": "Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'"
      },
      "classificationName": {
        "default": "",
        "items": {},
        "type": "array",
        "description": "Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type"
      },
      "classificationId": {
        "default": "",
        "items": {},
        "type": "array",
        "description": "Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type"
      },
      "keyword": {
        "default": "",
        "type": "string",
        "description": "Keyword to search on"
      },
      "id": {
        "default": "",
        "type": "string",
        "description": "Filter entities by its id"
      },
      "source": {
        "default": "",
        "enum": [
          "ticketmaster",
          " universe",
          " frontgate",
          " tmr"
        ],
        "type": "string",
        "description": "Filter entities by its source name"
      },
      "includeTest": {
        "default": "no",
        "enum": [
          "yes",
          " no",
          " only"
        ],
        "pattern": "^\\s*|yes|no|only$",
        "type": "string",
        "description": "True if you want to have entities flag as test in the response. Only, if you only wanted test entities"
      },
      "page": {
        "default": "0",
        "minimum": 0,
        "type": "string",
        "description": "Page number"
      },
      "size": {
        "default": "20",
        "maximum": 500,
        "minimum": 1,
        "type": "string",
        "description": "Page size of the response"
      },
      "locale": {
        "default": "en",
        "type": "string",
        "description": "The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') "
      },
      "includeLicensedContent": {
        "default": "no",
        "enum": [
          "yes",
          " no"
        ],
        "pattern": "^\\s*|yes|no$",
        "type": "string",
        "description": "Yes if you want to display licensed content"
      },
      "includeSpellcheck": {
        "default": "no",
        "enum": [
          "yes",
          " no"
        ],
        "pattern": "^\\s*|yes|no",
        "type": "string",
        "description": "yes, to include spell check suggestions in the response."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "//www.ticketmaster.com/discovery/v2/discovery/v2/attractions{?sort,classificationName,classificationId,keyword,id,source,includeTest,page,size,locale,includeLicensedContent,includeSpellcheck}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "List"
        },
        "Attraction",
        "**Key properties:**",
        {
          "$ul": [
            "**additionalInfo**: Additional information of the entity",
            "**classifications**: Attraction's classifications",
            "**description**: Description's of the entity",
            "**externalLinks**: List of external links",
            "**id**: Unique id of the entity in the discovery API",
            "**images**: Images of the entity",
            "**locale**: Locale in which the content is returned",
            "**name**: Name of the entity",
            "**test**: Indicate if this is a test entity, by default test entities won't appear in discovery API (default: false)",
            "**type**: Type of the entity",
            "**upcomingEvents**: number of upcoming events",
            "**url**: URL of a web site detail page of the entity"
          ]
        },
        {
          "$each": "$.body.*",
          "$as": "item",
          "$block": [
            {
              "$h2": {
                "$": "$.item.name"
              }
            },
            {
              "$lang": "json",
              "$code": {
                "$encode": "json",
                "$indent": true,
                "$content": {
                  "$": "$.item"
                }
              }
            }
          ]
        }
      ]
    }
  }
}
