{
  "name": "Destiny2_InsertSocketPlug",
  "description": "Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner.",
  "parameters": {
    "type": "object"
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://www.bungie.net/Platform/Destiny2/Actions/Items/InsertSocketPlug/"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**DetailedErrorTrace**",
            "**ErrorCode**",
            "**ErrorStatus**",
            "**Message**",
            "**MessageData**",
            [
              "**Response**",
              {
                "$ul": [
                  "**addedInventoryItems**: Items that appeared in the inventory possibly as a result of an action.",
                  [
                    "**item**: The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an \"itemInstanceId\": for those, get your information from the DestinyInventoryDefinition.",
                    {
                      "$ul": [
                        "**characterId**: If the item is on a character, this will return the ID of the character that is holding the item.",
                        [
                          "**instance**",
                          {
                            "$ul": [
                              [
                                "**data**: If an item is \"instanced\", this will contain information about the item's instance that doesn't fit easily into other components. One might say this is the \"essential\" instance data for the item.\r",
                                {
                                  "$ul": [
                                    "**breakerType**: If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details.",
                                    "**breakerTypeHash**: If populated, this is the hash identifier for the item's breaker type. See DestinyBreakerTypeDefinition for more details.",
                                    "**canEquip**: If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details.",
                                    "**cannotEquipReason**: If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn't equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel.",
                                    "**damageType**: If the item has a damage type, this is the item's current damage type.",
                                    "**damageTypeHash**: The current damage type's hash, so you can look up localized info and icons for it.",
                                    [
                                      "**energy**",
                                      {
                                        "$ul": [
                                          "**energyCapacity**: The total capacity of Energy that the item currently has, regardless of if it is currently being used.",
                                          "**energyType**: This is the enum version of the Energy Type value, for convenience.",
                                          "**energyTypeHash**: The type of energy for this item. Plugs that require Energy can only be inserted if they have the \"Any\" Energy Type or the matching energy type of this item. This is a reference to the DestinyEnergyTypeDefinition for the energy type, where you can find extended info about it.",
                                          "**energyUnused**: The amount of energy still available for inserting new plugs.",
                                          "**energyUsed**: The amount of Energy currently in use by inserted plugs."
                                        ]
                                      }
                                    ],
                                    "**equipRequiredLevel**: If the item cannot be equipped until you reach a certain level, that level will be reflected here.",
                                    "**isEquipped**: Is the item currently equipped on the given character?",
                                    "**itemLevel**: The Item's \"Level\" has the most significant bearing on its stats, such as Light and Power.",
                                    [
                                      "**primaryStat**: Represents a stat on an item *or* Character (NOT a Historical Stat, but a physical attribute stat like Attack, Defense etc...)",
                                      {
                                        "$ul": [
                                          "**statHash**: The hash identifier for the Stat. Use it to look up the DestinyStatDefinition for static data about the stat.",
                                          "**value**: The current value of the Stat."
                                        ]
                                      }
                                    ],
                                    "**quality**: The \"Quality\" of the item has a lesser - but still impactful - bearing on stats like Light and Power.",
                                    "**unlockHashesRequiredToEquip**: Sometimes, there are limitations to equipping that are represented by character-level flags called \"unlocks\".\r"
                                  ]
                                }
                              ],
                              "**disabled**: If true, this component is disabled.",
                              "**privacy**"
                            ]
                          }
                        ],
                        [
                          "**item**",
                          {
                            "$ul": [
                              [
                                "**data**: The base item component, filled with properties that are generally useful to know in any item request or that don't feel worthwhile to put in their own component.",
                                {
                                  "$ul": [
                                    "**bindStatus**: If the item is bound to a location, it will be specified in this enum.",
                                    "**bucketHash**: The hash identifier for the specific inventory bucket in which the item is located.",
                                    "**expirationDate**: If the item can expire, this is the date at which it will/did expire.",
                                    "**isWrapper**: If this is true, the object is actually a \"wrapper\" of the object it's representing. This means that it's not the actual item itself, but rather an item that must be \"opened\" in game before you have and can use the item.\r",
                                    "**itemHash**: The identifier for the item's definition, which is where most of the useful static information for the item can be found.",
                                    "**itemInstanceId**: If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.",
                                    "**itemValueVisibility**: If available, a list that describes which item values (rewards) should be shown (true) or hidden (false).",
                                    "**location**: An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.",
                                    "**lockable**: If the item can be locked, this will indicate that state.",
                                    "**metricHash**: The identifier for the currently-selected metric definition, to be displayed on the emblem nameplate.",
                                    [
                                      "**metricObjective**: Returns data about a character's status with a given Objective. Combine with DestinyObjectiveDefinition static data for display purposes.",
                                      {
                                        "$ul": [
                                          "**activityHash**: If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to. Use to look up the DestinyActivityDefinition in static data. This will give localized data about *what* you should be playing for the objective to be achieved.",
                                          "**complete**: Whether or not the Objective is completed.",
                                          "**completionValue**: As of Forsaken, objectives' completion value is determined dynamically at runtime.\r",
                                          "**destinationHash**: If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to. Use to look up the DestinyDestinationDefinition in static data. This will give localized data about *where* in the universe the objective should be achieved.",
                                          "**objectiveHash**: The unique identifier of the Objective being referred to. Use to look up the DestinyObjectiveDefinition in static data.",
                                          "**progress**: If progress has been made, and the progress can be measured numerically, this will be the value of that progress. You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds, and use DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle to determine how this should be rendered. Note that progress, in Destiny 2, need not be a literal numeric progression. It could be one of a number of possible values, even a Timestamp. Always examine DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle before rendering progress.",
                                          "**visible**: If this is true, the objective is visible in-game. Otherwise, it's not yet visible to the player. Up to you if you want to honor this property."
                                        ]
                                      }
                                    ],
                                    "**overrideStyleItemHash**: If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.\r",
                                    "**quantity**: The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)",
                                    "**state**: A flags enumeration indicating the transient/custom states of the item that affect how it is rendered: whether it's tracked or locked for example, or whether it has a masterwork plug inserted.",
                                    "**tooltipNotificationIndexes**: If this is populated, it is a list of indexes into DestinyInventoryItemDefinition.tooltipNotifications for any special tooltip messages that need to be shown for this item.",
                                    "**transferStatus**: If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).",
                                    "**versionNumber**: The version of this item, used to index into the versions list in the item definition quality block."
                                  ]
                                }
                              ],
                              "**disabled**: If true, this component is disabled.",
                              "**privacy**"
                            ]
                          }
                        ],
                        [
                          "**objectives**",
                          {
                            "$ul": [
                              [
                                "**data**: Items can have objectives and progression. When you request this block, you will obtain information about any Objectives and progression tied to this item.",
                                {
                                  "$ul": [
                                    "**dateCompleted**: If we have any information on when these objectives were completed, this will be the date of that completion. This won't be on many items, but could be interesting for some items that do store this information.",
                                    [
                                      "**flavorObjective**: Returns data about a character's status with a given Objective. Combine with DestinyObjectiveDefinition static data for display purposes.",
                                      {
                                        "$ul": [
                                          "**activityHash**: If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to. Use to look up the DestinyActivityDefinition in static data. This will give localized data about *what* you should be playing for the objective to be achieved.",
                                          "**complete**: Whether or not the Objective is completed.",
                                          "**completionValue**: As of Forsaken, objectives' completion value is determined dynamically at runtime.\r",
                                          "**destinationHash**: If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to. Use to look up the DestinyDestinationDefinition in static data. This will give localized data about *where* in the universe the objective should be achieved.",
                                          "**objectiveHash**: The unique identifier of the Objective being referred to. Use to look up the DestinyObjectiveDefinition in static data.",
                                          "**progress**: If progress has been made, and the progress can be measured numerically, this will be the value of that progress. You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds, and use DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle to determine how this should be rendered. Note that progress, in Destiny 2, need not be a literal numeric progression. It could be one of a number of possible values, even a Timestamp. Always examine DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle before rendering progress.",
                                          "**visible**: If this is true, the objective is visible in-game. Otherwise, it's not yet visible to the player. Up to you if you want to honor this property."
                                        ]
                                      }
                                    ],
                                    "**objectives**: If the item has a hard association with objectives, your progress on them will be defined here. \r"
                                  ]
                                }
                              ],
                              "**disabled**: If true, this component is disabled.",
                              "**privacy**"
                            ]
                          }
                        ],
                        [
                          "**perks**",
                          {
                            "$ul": [
                              [
                                "**data**: Instanced items can have perks: benefits that the item bestows.\r",
                                {
                                  "$ul": [
                                    "**perks**: The list of perks to display in an item tooltip - and whether or not they have been activated."
                                  ]
                                }
                              ],
                              "**disabled**: If true, this component is disabled.",
                              "**privacy**"
                            ]
                          }
                        ],
                        [
                          "**plugObjectives**",
                          {
                            "$ul": [
                              [
                                "**data**",
                                {
                                  "$ul": [
                                    "**objectivesPerPlug**: This set of data is keyed by the Item Hash (DestinyInventoryItemDefinition) of the plug whose objectives are being returned, with the value being the list of those objectives.\r"
                                  ]
                                }
                              ],
                              "**disabled**: If true, this component is disabled.",
                              "**privacy**"
                            ]
                          }
                        ],
                        [
                          "**renderData**",
                          {
                            "$ul": [
                              [
                                "**data**: Many items can be rendered in 3D. When you request this block, you will obtain the custom data needed to render this specific instance of the item.",
                                {
                                  "$ul": [
                                    "**artRegions**: A dictionary for rendering gear components, with:\r",
                                    "**useCustomDyes**: If you should use custom dyes on this item, it will be indicated here."
                                  ]
                                }
                              ],
                              "**disabled**: If true, this component is disabled.",
                              "**privacy**"
                            ]
                          }
                        ],
                        [
                          "**reusablePlugs**",
                          {
                            "$ul": [
                              [
                                "**data**",
                                {
                                  "$ul": [
                                    "**plugs**: If the item supports reusable plugs, this is the list of plugs that are allowed to be used for the socket, and any relevant information about whether they are \"enabled\", whether they are allowed to be inserted, and any other information such as objectives.\r"
                                  ]
                                }
                              ],
                              "**disabled**: If true, this component is disabled.",
                              "**privacy**"
                            ]
                          }
                        ],
                        [
                          "**sockets**",
                          {
                            "$ul": [
                              [
                                "**data**: Instanced items can have sockets, which are slots on the item where plugs can be inserted.\r",
                                {
                                  "$ul": [
                                    "**sockets**: The list of all sockets on the item, and their status information."
                                  ]
                                }
                              ],
                              "**disabled**: If true, this component is disabled.",
                              "**privacy**"
                            ]
                          }
                        ],
                        [
                          "**stats**",
                          {
                            "$ul": [
                              [
                                "**data**: If you want the stats on an item's instanced data, get this component.\r",
                                {
                                  "$ul": [
                                    "**stats**: If the item has stats that it provides (damage, defense, etc...), it will be given here."
                                  ]
                                }
                              ],
                              "**disabled**: If true, this component is disabled.",
                              "**privacy**"
                            ]
                          }
                        ],
                        [
                          "**talentGrid**",
                          {
                            "$ul": [
                              [
                                "**data**: Well, we're here in Destiny 2, and Talent Grids are unfortunately still around.\r",
                                {
                                  "$ul": [
                                    [
                                      "**gridProgression**: Information about a current character's status with a Progression. A progression is a value that can increase with activity and has levels. Think Character Level and Reputation Levels. Combine this \"live\" data with the related DestinyProgressionDefinition for a full picture of the Progression.",
                                      {
                                        "$ul": [
                                          "**currentProgress**: This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)",
                                          "**currentResetCount**: The number of resets of this progression you've executed this season, if applicable to this progression.",
                                          "**dailyLimit**: If this progression has a daily limit, this is that limit.",
                                          "**dailyProgress**: The amount of progress earned today for this progression.",
                                          "**level**: This is the level of the progression (for instance, the Character Level).",
                                          "**levelCap**: This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)",
                                          "**nextLevelAt**: The total amount of progression (i.e. \"Experience\") needed in order to reach the next level.",
                                          "**progressToNextLevel**: The amount of progression (i.e. \"Experience\") needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.",
                                          "**progressionHash**: The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.",
                                          "**rewardItemStates**: Information about historical rewards for this progression, if there is any data for it.",
                                          "**seasonResets**: Information about historical resets of this progression, if there is any data for it.",
                                          "**stepIndex**: Progressions define their levels in \"steps\". Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the \"steps\" property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)",
                                          "**weeklyLimit**: If this progression has a weekly limit, this is that limit.",
                                          "**weeklyProgress**: The amount of progress earned toward this progression in the current week."
                                        ]
                                      }
                                    ],
                                    "**isGridComplete**: Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.\r",
                                    "**nodes**: Detailed information about the individual nodes in the talent grid.\r",
                                    "**talentGridHash**: Most items don't have useful talent grids anymore, but Builds in particular still do.\r"
                                  ]
                                }
                              ],
                              "**disabled**: If true, this component is disabled.",
                              "**privacy**"
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**removedInventoryItems**: Items that disappeared from the inventory possibly as a result of an action."
                ]
              }
            ],
            "**ThrottleSeconds**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
