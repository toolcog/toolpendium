{
  "name": "repoCreateFile",
  "description": "Create a file in a repository",
  "parameters": {
    "type": "object",
    "properties": {
      "owner": {
        "type": "string",
        "description": "owner of the repo"
      },
      "repo": {
        "type": "string",
        "description": "name of the repo"
      },
      "filepath": {
        "type": "string",
        "description": "path of the file to create"
      },
      "body": {
        "$ref": "#/$defs/CreateFileOptions"
      }
    },
    "required": [
      "owner",
      "repo",
      "filepath",
      "body"
    ],
    "$defs": {
      "CreateFileOptions": {
        "description": "CreateFileOptions options for creating files\nNote: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)",
        "properties": {
          "author": {
            "$ref": "#/$defs/Identity"
          },
          "branch": {
            "description": "branch (optional) to base this file from. if not given, the default branch is used",
            "type": "string",
            "x-go-name": "BranchName"
          },
          "committer": {
            "$ref": "#/$defs/Identity"
          },
          "content": {
            "description": "content must be base64 encoded",
            "type": "string",
            "x-go-name": "Content"
          },
          "dates": {
            "$ref": "#/$defs/CommitDateOptions"
          },
          "message": {
            "description": "message (optional) for the commit of this file. if not supplied, a default message will be used",
            "type": "string",
            "x-go-name": "Message"
          },
          "new_branch": {
            "description": "new_branch (optional) will make a new branch from `branch` before creating the file",
            "type": "string",
            "x-go-name": "NewBranchName"
          },
          "signoff": {
            "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message.",
            "type": "boolean",
            "x-go-name": "Signoff"
          }
        },
        "required": [
          "content"
        ],
        "type": "object",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "Identity": {
        "description": "Identity for a person's identity like an author or committer",
        "properties": {
          "email": {
            "format": "email",
            "type": "string",
            "x-go-name": "Email"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "type": "object",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      },
      "CommitDateOptions": {
        "description": "CommitDateOptions store dates for GIT_AUTHOR_DATE and GIT_COMMITTER_DATE",
        "properties": {
          "author": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "Author"
          },
          "committer": {
            "format": "date-time",
            "type": "string",
            "x-go-name": "Committer"
          }
        },
        "type": "object",
        "x-go-package": "code.gitea.io/gitea/modules/structs"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "/api/v1/repos/{owner}/{repo}/contents/{filepath}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "FileResponse contains information about a repo's file",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**commit**",
              {
                "$ul": [
                  [
                    "**author**",
                    {
                      "$ul": [
                        "**date**",
                        "**email**",
                        "**name**"
                      ]
                    }
                  ],
                  [
                    "**committer**",
                    {
                      "$ul": [
                        "**date**",
                        "**email**",
                        "**name**"
                      ]
                    }
                  ],
                  "**created**",
                  "**html_url**",
                  "**message**",
                  "**parents**",
                  "**sha**",
                  [
                    "**tree**",
                    {
                      "$ul": [
                        "**created**",
                        "**sha**",
                        "**url**"
                      ]
                    }
                  ],
                  "**url**"
                ]
              }
            ],
            [
              "**content**: ContentsResponse contains information about a repo's entry's (dir, file, symlink, submodule) metadata and content",
              {
                "$ul": [
                  [
                    "**_links**: FileLinksResponse contains the links for a repo's file",
                    {
                      "$ul": [
                        "**git**",
                        "**html**",
                        "**self**"
                      ]
                    }
                  ],
                  "**content**: `content` is populated when `type` is `file`, otherwise null",
                  "**download_url**",
                  "**encoding**: `encoding` is populated when `type` is `file`, otherwise null",
                  "**git_url**",
                  "**html_url**",
                  "**last_commit_sha**",
                  "**name**",
                  "**path**",
                  "**sha**",
                  "**size**",
                  "**submodule_git_url**: `submodule_git_url` is populated when `type` is `submodule`, otherwise null",
                  "**target**: `target` is populated when `type` is `symlink`, otherwise null",
                  "**type**: `type` will be `file`, `dir`, `symlink`, or `submodule`",
                  "**url**"
                ]
              }
            ],
            [
              "**verification**: PayloadCommitVerification represents the GPG verification of a commit",
              {
                "$ul": [
                  "**payload**",
                  "**reason**",
                  "**signature**",
                  [
                    "**signer**: PayloadUser represents the author or committer of a commit",
                    {
                      "$ul": [
                        "**email**",
                        "**name**: Full name of the commit author",
                        "**username**"
                      ]
                    }
                  ],
                  "**verified**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
