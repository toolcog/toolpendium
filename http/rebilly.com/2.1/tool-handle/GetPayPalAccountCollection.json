{
  "name": "GetPayPalAccountCollection",
  "description": "Retrieve a list of PayPal Accounts.\n",
  "parameters": {
    "type": "object",
    "properties": {
      "filter": {
        "type": "string",
        "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://api-reference.rebilly.com/#section/Using-filter-with-collections) for more options and examples about this format.\n"
      },
      "sort": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
      },
      "limit": {
        "maximum": 1000,
        "minimum": 0,
        "type": "integer",
        "description": "The collection items limit."
      },
      "offset": {
        "minimum": 0,
        "type": "integer",
        "description": "The collection items offset."
      },
      "q": {
        "type": "string",
        "description": "The partial search of the text fields."
      },
      "expand": {
        "type": "string",
        "description": "Expand a response to get a full related object included inside of the `_embedded` path in the response.\nIt accepts a comma-separated list of objects to expand.\nSee the [expand guide](https://api-reference.rebilly.com/#section/Expand-to-include-embedded-objects) for more info.\n"
      },
      "Organization-Id": {
        "$ref": "#/components/schemas/ResourceId",
        "description": "Organization identifier in scope of which need to perform request (if not specified, the default organization will be used)."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api-sandbox.rebilly.com/paypal-accounts{?filter,sort,limit,offset,q,expand}"
    },
    "headers": {
      "Organization-Id": {
        "$": "Organization-Id"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "PayPal Account list"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**billingAddress**",
              {
                "$ul": [
                  "**address**: The contact street address.",
                  "**address2**: The contact street address (second line).",
                  "**city**: The contact city.",
                  "**country**: The contact country ISO Alpha-2 code.",
                  "**emails**: The list of emails.",
                  "**firstName**: The contact first name.",
                  "**hash**: A hash that can be used to compare multiple contacts for identical attribute values.",
                  "**lastName**: The contact last name.",
                  "**organization**: The contact organization.",
                  "**phoneNumbers**: The list of phone numbers.",
                  "**postalCode**: The contact postal code.",
                  "**region**: The contact region (state)."
                ]
              }
            ],
            "**createdTime**: PayPal account created time.",
            "**customFields**: Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). (default: [object Object])",
            "**customerId**: The customer's ID.",
            "**id**: The payment instrument ID.",
            "**method**: The method of payment instrument.",
            [
              "**riskMetadata**: Risk metadata used for 3DS and risk scoring.",
              {
                "$ul": [
                  "**accuracyRadius**: Accuracy radius for specified ipAddress (kilometers).",
                  [
                    "**browserData**: Browser data used for 3DS and risk scoring.",
                    {
                      "$ul": [
                        "**colorDepth**: The browser's color depth in bits per pixel obtained using the `screen.colorDepth` property.",
                        "**isJavaEnabled**: Whether Java is enabled in a browser or not. Value is returned from the `navigator.javaEnabled` property.",
                        "**language**: The browser's language settings returned from the `navigator.language` property.",
                        "**screenHeight**: The browser's screen height returned from the `screen.height` property.",
                        "**screenWidth**: The browser's screen width returned from the `screen.width` property.",
                        "**timeZoneOffset**: The browser's time zone offset in minutes from UTC."
                      ]
                    }
                  ],
                  "**city**: City for specified ipAddress.",
                  "**country**: Country ISO Alpha-2 code for specified ipAddress.",
                  "**deviceVelocity**: Number of transactions for this device (based on fingerprint) in the last 24 hours.",
                  "**distance**: Distance between IP Address and Billing Address geolocation (kilometers).",
                  "**fingerprint**: The fingerprint.",
                  "**hasMismatchedBankCountry**: True if the bank country and geo-IP address are not the same.",
                  "**hasMismatchedBillingAddressCountry**: True if the billing address country and geo-IP address are not the same.",
                  "**hasMismatchedHolderName**: True if the customer's name from billing address and from customer's primary address are not the same.",
                  "**hasMismatchedTimeZone**: True if the browser time zone and IP address associated time zone are not the same.",
                  "**httpHeaders**: The HTTP headers.",
                  "**ipAddress**: The customer's IP.",
                  "**isHosting**: True if customer's ip address is related to hosting.",
                  "**isProxy**: True if customer's ip address is related to proxy.",
                  "**isTor**: True if customer's ip address is related to TOR.",
                  "**isVpn**: True if customer's ip address is related to VPN.",
                  "**isp**: Internet Service Provider name, if available.",
                  "**latitude**: Latitude for specified ipAddress.",
                  "**longitude**: Longitude for specified ipAddress.",
                  "**paymentInstrumentVelocity**: Number of transactions for this payment instrument (based on fingerprint) in the last 24 hours.",
                  "**postalCode**: Postal code for specified ipAddress.",
                  "**region**: Region for specified ipAddress.",
                  "**score**: Risk score computed per all the factors.",
                  "**timeZone**: Time zone for specified ipAddress.",
                  "**vpnServiceName**: VPN service name, if available."
                ]
              }
            ],
            "**status**: PayPal account status.",
            "**updatedTime**: PayPal account updated time.",
            "**username**: PayPal username.",
            "**_embedded**: Any embedded objects available that are requested by the `expand` querystring parameter.",
            "**_links**: The links related to resource."
          ]
        },
        {
          "$each": "$.body.*",
          "$as": "item",
          "$block": [
            {
              "$h2": "Item"
            },
            {
              "$lang": "json",
              "$code": {
                "$encode": "json",
                "$indent": true,
                "$content": {
                  "$": "$.item"
                }
              }
            }
          ]
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The Problem Details JSON Object [[RFC7807](https://tools.ietf.org/html/rfc7807)].",
        "**Key properties:**",
        {
          "$ul": [
            "**type**: A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \"about:blank\".",
            "**status**: The HTTP status code.",
            "**title**: A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
            "**detail**: A human-readable explanation specific to this occurrence of the problem.",
            "**error**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The Problem Details JSON Object [[RFC7807](https://tools.ietf.org/html/rfc7807)].",
        "**Key properties:**",
        {
          "$ul": [
            "**type**: A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \"about:blank\".",
            "**status**: The HTTP status code.",
            "**title**: A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
            "**detail**: A human-readable explanation specific to this occurrence of the problem.",
            "**error**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
