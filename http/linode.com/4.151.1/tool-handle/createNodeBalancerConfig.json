{
  "name": "createNodeBalancerConfig",
  "description": "Creates a NodeBalancer Config, which allows the NodeBalancer to accept traffic on a new port. You will need to add NodeBalancer Nodes to the new Config before it can actually serve requests.\n",
  "parameters": {
    "type": "object",
    "properties": {
      "nodeBalancerId": {
        "type": "integer",
        "description": "The ID of the NodeBalancer to access."
      },
      "body": {
        "$ref": "#/components/schemas/NodeBalancerConfig",
        "description": "Information about the port to configure."
      }
    },
    "required": [
      "nodeBalancerId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://api.linode.com/v4/nodebalancers/{nodeBalancerId}/configs"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A NodeBalancer config represents the configuration of this NodeBalancer on a single port.  For example, a NodeBalancer Config on port 80 would typically represent how this NodeBalancer response to HTTP requests.\n\nNodeBalancer configs have a list of backends, called \"nodes,\" that they forward requests between based on their configuration.\n",
        "**Key properties:**",
        {
          "$ul": [
            "**algorithm**: What algorithm this NodeBalancer should use for routing traffic to backends. (default: roundrobin)",
            "**check**: The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. (default: none)",
            "**check_attempts**: How many times to attempt a check before considering a backend to be down. (default: 3)",
            "**check_body**: This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down.",
            "**check_interval**: How often, in seconds, to check that backends are up and serving requests. (default: 31)",
            "**check_passive**: If true, any response from this backend with a `5xx` status code will be enough for it to be considered unhealthy and taken out of rotation. (default: true)",
            "**check_path**: The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.",
            "**check_timeout**: How long, in seconds, to wait for a check attempt before considering it failed. (default: 30)",
            "**cipher_suite**: What ciphers to use for SSL connections served by this NodeBalancer. (default: recommended)",
            "**id**: This config's unique ID",
            "**nodebalancer_id**: The ID for the NodeBalancer this config belongs to.",
            [
              "**nodes_status**: A structure containing information about the health of the backends for this port.  This information is updated periodically as checks are performed against backends.",
              {
                "$ul": [
                  "**down**: The number of backends considered to be \"DOWN\" and unhealthy.  These are not in rotation, and not serving requests.",
                  "**up**: The number of backends considered to be \"UP\" and healthy, and that are serving requests."
                ]
              }
            ],
            "**port**: The port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example).  While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (default: 80)",
            "**protocol**: The protocol this port is configured to serve. (default: http)",
            "**proxy_protocol**: ProxyProtocol is a TCP extension that sends initial TCP connection information such as source/destination IPs and ports to backend devices. This information would be lost otherwise. Backend devices must be configured to work with ProxyProtocol if enabled. (default: none)",
            "**ssl_cert**: The PEM-formatted public SSL certificate (or the combined PEM-formatted SSL",
            "**ssl_commonname**: The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.",
            "**ssl_fingerprint**: The read-only SHA1-encoded fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.",
            "**ssl_key**: The PEM-formatted private key for the SSL certificate set in the `ssl_cert` field.",
            "**stickiness**: Controls how session stickiness is handled on this port. (default: none)"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
