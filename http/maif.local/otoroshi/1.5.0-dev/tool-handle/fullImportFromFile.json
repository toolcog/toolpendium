{
  "name": "fullImportFromFile",
  "description": "Import the full state of Otoroshi as a file",
  "parameters": {
    "type": "object",
    "properties": {
      "body": {
        "$ref": "#/$defs/ImportExport"
      }
    },
    "$defs": {
      "ImportExport": {
        "description": "The structure that can be imported to or exported from Otoroshi. It represent the memory state of Otoroshi",
        "properties": {
          "admins": {
            "description": "Current U2F admin at the time of export",
            "items": {
              "description": "Administrator using FIDO U2F device to access Otoroshi",
              "properties": {
                "createdAt": {
                  "description": "The creation date of the user",
                  "example": 123,
                  "format": "int64",
                  "type": "integer"
                },
                "label": {
                  "description": "The label for the user",
                  "example": "a string value",
                  "type": "string"
                },
                "password": {
                  "description": "The hashed password of the user",
                  "example": "a string value",
                  "type": "string"
                },
                "registration": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "The U2F registration slug",
                  "example": {
                    "key": "value"
                  },
                  "type": "object"
                },
                "username": {
                  "description": "The email address of the user",
                  "example": "a string value",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "label",
                "password",
                "createdAt",
                "registration"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "apiKeys": {
            "description": "Current apik keys at the time of export",
            "items": {
              "description": "An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services.",
              "properties": {
                "authorizedEntities": {
                  "description": "The group/service ids (prefixed by group_ or service_ on which the key is authorized",
                  "example": [
                    "a string value"
                  ],
                  "items": {
                    "example": "a string value",
                    "type": "string"
                  },
                  "type": "array"
                },
                "clientId": {
                  "description": "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything",
                  "example": "a string value",
                  "type": "string"
                },
                "clientName": {
                  "description": "The name of the api key, for humans ;-)",
                  "example": "a string value",
                  "type": "string"
                },
                "clientSecret": {
                  "description": "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything",
                  "example": "a string value",
                  "type": "string"
                },
                "dailyQuota": {
                  "description": "Authorized number of calls per day",
                  "example": 123,
                  "format": "int64",
                  "type": "integer"
                },
                "enabled": {
                  "description": "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
                  "example": true,
                  "type": "boolean"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Bunch of metadata for the key",
                  "example": {
                    "key": "value"
                  },
                  "type": "object"
                },
                "monthlyQuota": {
                  "description": "Authorized number of calls per month",
                  "example": 123,
                  "format": "int64",
                  "type": "integer"
                },
                "throttlingQuota": {
                  "description": "Authorized number of calls per second, measured on 10 seconds",
                  "example": 123,
                  "format": "int64",
                  "type": "integer"
                }
              },
              "required": [
                "clientId",
                "clientSecret",
                "clientName",
                "authorizedEntities",
                "enabled"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "appConfig": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Current env variables at the time of export",
            "example": {
              "key": "value"
            },
            "type": "object"
          },
          "config": {
            "$ref": "#/$defs/GlobalConfig"
          },
          "date": {
            "example": "2017-07-21T17:32:28Z",
            "format": "date-time",
            "type": "string"
          },
          "dateRaw": {
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "errorTemplates": {
            "description": "Current error templates at the time of export",
            "items": {
              "description": "Error templates for a service descriptor",
              "properties": {
                "messages": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Map for custom messages",
                  "example": {
                    "key": "value"
                  },
                  "type": "object"
                },
                "serviceId": {
                  "description": "The Id of the service for which the error template is enabled",
                  "example": "a string value",
                  "type": "string"
                },
                "template40x": {
                  "description": "The html template for 40x errors",
                  "example": "a string value",
                  "type": "string"
                },
                "template50x": {
                  "description": "The html template for 50x errors",
                  "example": "a string value",
                  "type": "string"
                },
                "templateBuild": {
                  "description": "The html template for build page",
                  "example": "a string value",
                  "type": "string"
                },
                "templateMaintenance": {
                  "description": "The html template for maintenance page",
                  "example": "a string value",
                  "type": "string"
                }
              },
              "required": [
                "serviceId",
                "template40x",
                "template50x",
                "templateBuild",
                "templateMaintenance",
                "messages"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "label": {
            "example": "a string value",
            "type": "string"
          },
          "serviceDescriptors": {
            "description": "Current service descriptors at the time of export",
            "items": {
              "description": "An otoroshi service descriptor. Represent a forward HTTP call on a domain to another location with some optional api management mecanism",
              "properties": {
                "Canary": {
                  "$ref": "#/$defs/Canary"
                },
                "additionalHeaders": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Specify headers that will be added to each client request. Useful to add authentication",
                  "example": {
                    "key": "value"
                  },
                  "type": "object"
                },
                "api": {
                  "$ref": "#/$defs/ExposedApi"
                },
                "authConfigRef": {
                  "description": "A reference to a global auth module config",
                  "example": "a string value",
                  "type": "string"
                },
                "buildMode": {
                  "description": "Display a construction page when a user try to use the service",
                  "example": true,
                  "type": "boolean"
                },
                "chaosConfig": {
                  "$ref": "#/$defs/ChaosConfig"
                },
                "clientConfig": {
                  "$ref": "#/$defs/ClientConfig"
                },
                "clientValidatorRef": {
                  "description": "A reference to validation authority",
                  "example": "a string value",
                  "type": "string"
                },
                "cors": {
                  "$ref": "#/$defs/CorsSettings"
                },
                "domain": {
                  "description": "The domain on which the service is available.",
                  "example": "a string value",
                  "type": "string"
                },
                "enabled": {
                  "description": "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
                  "example": true,
                  "type": "boolean"
                },
                "enforceSecureCommunication": {
                  "description": "When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside",
                  "example": true,
                  "type": "boolean"
                },
                "env": {
                  "description": "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
                  "example": "a string value",
                  "type": "string"
                },
                "forceHttps": {
                  "description": "Will force redirection to https:// if not present",
                  "example": true,
                  "type": "boolean"
                },
                "groups": {
                  "description": "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group",
                  "example": [
                    "a string value"
                  ],
                  "items": {
                    "example": "a string value",
                    "type": "string"
                  },
                  "type": "array"
                },
                "gzip": {
                  "$ref": "#/$defs/Gzip"
                },
                "headersVerification": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Specify headers that will be verified after routing.",
                  "example": {
                    "key": "value"
                  },
                  "type": "object"
                },
                "healthCheck": {
                  "$ref": "#/$defs/HealthCheck"
                },
                "id": {
                  "description": "A unique random string to identify your service",
                  "example": "110e8400-e29b-11d4-a716-446655440000",
                  "format": "uuid",
                  "type": "string"
                },
                "ipFiltering": {
                  "$ref": "#/$defs/IpFiltering"
                },
                "jwtVerifier": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/LocalJwtVerifier"
                    },
                    {
                      "$ref": "#/$defs/RefJwtVerifier"
                    }
                  ]
                },
                "localHost": {
                  "description": "The host used localy, mainly localhost:xxxx",
                  "example": "a string value",
                  "type": "string"
                },
                "localScheme": {
                  "description": "The scheme used localy, mainly http",
                  "example": "a string value",
                  "type": "string"
                },
                "maintenanceMode": {
                  "description": "Display a maintainance page when a user try to use the service",
                  "example": true,
                  "type": "boolean"
                },
                "matchingHeaders": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Specify headers that MUST be present on client request to route it. Useful to implement versioning",
                  "example": {
                    "key": "value"
                  },
                  "type": "object"
                },
                "matchingRoot": {
                  "description": "The root path on which the service is available",
                  "example": "a string value",
                  "type": "string"
                },
                "metadata": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Just a bunch of random properties",
                  "example": {
                    "key": "value"
                  },
                  "type": "object"
                },
                "name": {
                  "description": "The name of your service. Only for debug and human readability purposes",
                  "example": "a string value",
                  "type": "string"
                },
                "overrideHost": {
                  "description": "Host header will be overriden with Host of the target",
                  "example": true,
                  "type": "boolean"
                },
                "privateApp": {
                  "description": "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
                  "example": true,
                  "type": "boolean"
                },
                "privatePatterns": {
                  "description": "If you define a public pattern that is a little bit too much, you can make some of public URL private again",
                  "items": {
                    "example": "a string value",
                    "type": "string"
                  },
                  "type": "array"
                },
                "publicPatterns": {
                  "description": "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'",
                  "items": {
                    "example": "a string value",
                    "type": "string"
                  },
                  "type": "array"
                },
                "redirectToLocal": {
                  "description": "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
                  "example": true,
                  "type": "boolean"
                },
                "redirection": {
                  "$ref": "#/$defs/RedirectionSettings"
                },
                "root": {
                  "description": "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                  "example": "a string value",
                  "type": "string"
                },
                "secComExcludedPatterns": {
                  "description": "URI patterns excluded from secured communications",
                  "items": {
                    "example": "a string value",
                    "type": "string"
                  },
                  "type": "array"
                },
                "secComSettings": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/HSAlgoSettings"
                    },
                    {
                      "$ref": "#/$defs/RSAlgoSettings"
                    },
                    {
                      "$ref": "#/$defs/ESAlgoSettings"
                    },
                    {
                      "$ref": "#/$defs/JWKSAlgoSettings"
                    }
                  ]
                },
                "sendOtoroshiHeadersBack": {
                  "description": "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
                  "example": true,
                  "type": "boolean"
                },
                "statsdConfig": {
                  "$ref": "#/$defs/StatsdConfig"
                },
                "subdomain": {
                  "description": "The subdomain on which the service is available",
                  "example": "a string value",
                  "type": "string"
                },
                "targets": {
                  "description": "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                  "items": {
                    "$ref": "#/$defs/Target"
                  },
                  "type": "array"
                },
                "transformerRef": {
                  "description": "A reference to a request transformer",
                  "example": "a string value",
                  "type": "string"
                },
                "userFacing": {
                  "description": "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
                  "example": true,
                  "type": "boolean"
                },
                "xForwardedHeaders": {
                  "description": "Send X-Forwarded-* headers",
                  "example": true,
                  "type": "boolean"
                }
              },
              "required": [
                "id",
                "groups",
                "name",
                "env",
                "domain",
                "subdomain",
                "targets",
                "root",
                "enabled",
                "privateApp",
                "forceHttps",
                "maintenanceMode",
                "buildMode",
                "enforceSecureCommunication"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "serviceGroups": {
            "description": "Current service groups at the time of export",
            "items": {
              "description": "An Otoroshi service group is just a group of service descriptor. It is useful to be able to define Api Keys for the whole group",
              "properties": {
                "description": {
                  "description": "The descriptoin of the group",
                  "example": "a string value",
                  "type": "string"
                },
                "id": {
                  "description": "The unique id of the group. Usually 64 random alpha numerical characters, but can be anything",
                  "example": "a string value",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the group",
                  "example": "a string value",
                  "type": "string"
                }
              },
              "required": [
                "id",
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "simpleAdmins": {
            "description": "Current simple admins at the time of export",
            "items": {
              "description": "Administrator using just login/password tuple to access Otoroshi",
              "properties": {
                "createdAt": {
                  "description": "The creation date of the user",
                  "example": 123,
                  "format": "int64",
                  "type": "integer"
                },
                "label": {
                  "description": "The label for the user",
                  "example": "a string value",
                  "type": "string"
                },
                "password": {
                  "description": "The hashed password of the user",
                  "example": "a string value",
                  "type": "string"
                },
                "username": {
                  "description": "The email address of the user",
                  "example": "a string value",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "label",
                "password",
                "createdAt"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "stats": {
            "$ref": "#/$defs/ImportExportStats"
          }
        },
        "required": [
          "label",
          "dateRaw",
          "date",
          "stats",
          "config",
          "admins",
          "simpleAdmins",
          "serviceGroups",
          "apiKeys",
          "serviceDescriptors",
          "errorTemplates"
        ],
        "type": "object"
      },
      "GlobalConfig": {
        "description": "The global config object of Otoroshi, used to customize settings of the current Otoroshi instance",
        "properties": {
          "alertsEmails": {
            "description": "Email addresses that will receive all Otoroshi alert events",
            "items": {
              "example": "admin@otoroshi.io",
              "format": "email",
              "type": "string"
            },
            "type": "array"
          },
          "alertsWebhooks": {
            "description": "Webhook that will receive all Otoroshi alert events",
            "items": {
              "$ref": "#/$defs/Webhook"
            },
            "type": "array"
          },
          "analyticsWebhooks": {
            "description": "Webhook that will receive all internal Otoroshi events",
            "items": {
              "$ref": "#/$defs/Webhook"
            },
            "type": "array"
          },
          "apiReadOnly": {
            "description": "If enabled, Admin API won't be able to write/update/delete entities",
            "example": true,
            "type": "boolean"
          },
          "autoLinkToDefaultGroup": {
            "description": "If not defined, every new service descriptor will be added to the default group",
            "example": true,
            "type": "boolean"
          },
          "backofficeAuth0Config": {
            "$ref": "#/$defs/Auth0Config"
          },
          "cleverSettings": {
            "$ref": "#/$defs/CleverSettings"
          },
          "elasticReadsConfig": {
            "$ref": "#/$defs/ElasticConfig"
          },
          "elasticWritesConfigs": {
            "description": "Configs. for Elastic writes",
            "items": {
              "$ref": "#/$defs/ElasticConfig"
            },
            "type": "array"
          },
          "endlessIpAddresses": {
            "description": "IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros",
            "items": {
              "example": "192.192.192.192",
              "format": "ipv4",
              "type": "string"
            },
            "type": "array"
          },
          "ipFiltering": {
            "$ref": "#/$defs/IpFiltering"
          },
          "limitConcurrentRequests": {
            "description": "If enabled, Otoroshi will reject new request if too much at the same time",
            "example": true,
            "type": "boolean"
          },
          "lines": {
            "description": "Possibles lines for Otoroshi",
            "items": {
              "example": "a string value",
              "type": "string"
            },
            "type": "array"
          },
          "mailerSettings": {
            "$ref": "#/$defs/MailerSettings"
          },
          "maxConcurrentRequests": {
            "description": "The number of authorized request processed at the same time",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "maxHttp10ResponseSize": {
            "description": "The max size in bytes of an HTTP 1.0 response",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "maxLogsSize": {
            "description": "Number of events kept locally",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "middleFingers": {
            "description": "Use middle finger emoji as a response character for endless HTTP responses",
            "example": true,
            "type": "boolean"
          },
          "perIpThrottlingQuota": {
            "description": "Authorized number of calls per second globally per IP address, measured on 10 seconds",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "privateAppsAuth0Config": {
            "$ref": "#/$defs/Auth0Config"
          },
          "streamEntityOnly": {
            "description": "HTTP will be streamed only. Doesn't work with old browsers",
            "example": true,
            "type": "boolean"
          },
          "throttlingQuota": {
            "description": "Authorized number of calls per second globally, measured on 10 seconds",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "u2fLoginOnly": {
            "description": "If enabled, login to backoffice through Auth0 will be disabled",
            "example": true,
            "type": "boolean"
          },
          "useCircuitBreakers": {
            "description": "If enabled, services will be authorized to use circuit breakers",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "streamEntityOnly",
          "autoLinkToDefaultGroup",
          "limitConcurrentRequests",
          "maxConcurrentRequests",
          "useCircuitBreakers",
          "apiReadOnly",
          "u2fLoginOnly",
          "ipFiltering",
          "throttlingQuota",
          "perIpThrottlingQuota",
          "analyticsWebhooks",
          "alertsWebhooks",
          "alertsEmails",
          "endlessIpAddresses"
        ],
        "type": "object"
      },
      "Webhook": {
        "description": "A callback URL where events are posted",
        "properties": {
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Headers to authorize the call or whatever",
            "example": {
              "key": "value"
            },
            "type": "object"
          },
          "url": {
            "description": "The URL where events are posted",
            "example": "http://www.google.com",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "url",
          "headers"
        ],
        "type": "object"
      },
      "Auth0Config": {
        "description": "Configuration for Auth0 domain",
        "properties": {
          "callbackUrl": {
            "description": "Auth0 callback URL",
            "example": "a string value",
            "type": "string"
          },
          "clientId": {
            "description": "Auth0 client id",
            "example": "a string value",
            "type": "string"
          },
          "clientSecret": {
            "description": "Auth0 client secret",
            "example": "a string value",
            "type": "string"
          },
          "domain": {
            "description": "Auth0 domain",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "clientId",
          "clientSecret",
          "domain",
          "callbackUrl"
        ],
        "type": "object"
      },
      "CleverSettings": {
        "description": "Configuration for CleverCloud client",
        "properties": {
          "consumerKey": {
            "description": "CleverCloud consumer key",
            "example": "a string value",
            "type": "string"
          },
          "consumerSecret": {
            "description": "CleverCloud consumer token",
            "example": "a string value",
            "type": "string"
          },
          "orgaId": {
            "description": "CleverCloud organization id",
            "example": "a string value",
            "type": "string"
          },
          "secret": {
            "description": "CleverCloud oauth secret",
            "example": "a string value",
            "type": "string"
          },
          "token": {
            "description": "CleverCloud oauth token",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "consumerKey",
          "consumerSecret",
          "token",
          "secret",
          "orgaId"
        ],
        "type": "object"
      },
      "ElasticConfig": {
        "description": "The configuration for elastic access",
        "properties": {
          "clusterUri": {
            "description": "URL of the elastic cluster",
            "example": "a string value",
            "type": "string"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additionnal http headers",
            "example": {
              "key": "value"
            },
            "type": "object"
          },
          "index": {
            "description": "Index for events. Default is otoroshi-events",
            "example": "a string value",
            "type": "string"
          },
          "password": {
            "description": "Optional password",
            "example": "a string value",
            "type": "string"
          },
          "type": {
            "description": "Type of events. Default is event",
            "example": "a string value",
            "type": "string"
          },
          "user": {
            "description": "Optional user",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "clusterUri",
          "index",
          "type",
          "user",
          "password",
          "headers"
        ],
        "type": "object"
      },
      "IpFiltering": {
        "description": "The filtering configuration block for a service of globally.",
        "properties": {
          "blacklist": {
            "description": "Blacklisted IP addresses",
            "items": {
              "example": "192.192.192.192",
              "format": "ipv4",
              "type": "string"
            },
            "type": "array"
          },
          "whitelist": {
            "description": "Whitelisted IP addresses",
            "items": {
              "example": "192.192.192.192",
              "format": "ipv4",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "whitelist",
          "blacklist"
        ],
        "type": "object"
      },
      "MailerSettings": {
        "description": "Configuration for mailgun api client",
        "properties": {
          "apiKey": {
            "description": "Mailgun mailer api key",
            "example": "a string value",
            "type": "string"
          },
          "apiKeyPrivate": {
            "description": "Mailjet mailer private api key",
            "example": "a string value",
            "type": "string"
          },
          "apiKeyPublic": {
            "description": "Mailjet mailer public api key",
            "example": "a string value",
            "type": "string"
          },
          "domain": {
            "description": "Mailgun mailer domain",
            "example": "a string value",
            "type": "string"
          },
          "eu": {
            "description": "Mailgun mailer, use EU tenant api",
            "example": true,
            "type": "boolean"
          },
          "header": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Generic mailer headers",
            "example": {
              "key": "value"
            },
            "type": "object"
          },
          "type": {
            "description": "Type of the mailer: console, generic, mailgun, mailjet",
            "example": "a string value",
            "type": "string"
          },
          "url": {
            "description": "Generic mailer url",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "apiKey",
          "domain"
        ],
        "type": "object"
      },
      "Canary": {
        "description": "The configuration of the canary mode for a service descriptor",
        "properties": {
          "enabled": {
            "description": "Use canary mode for this service",
            "example": true,
            "type": "boolean"
          },
          "root": {
            "description": "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
            "example": "a string value",
            "type": "string"
          },
          "targets": {
            "description": "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
            "items": {
              "$ref": "#/$defs/Target"
            },
            "type": "array"
          },
          "traffic": {
            "description": "Ratio of traffic that will be sent to canary targets.",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "enabled",
          "traffic",
          "targets",
          "root"
        ],
        "type": "object"
      },
      "Target": {
        "description": "A Target is where an HTTP call will be forwarded in the end from a service domain",
        "properties": {
          "host": {
            "description": "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
            "example": "www.google.com",
            "format": "hostname",
            "type": "string"
          },
          "scheme": {
            "description": "The protocol used for communication. Can be http or https",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "host",
          "scheme"
        ],
        "type": "object"
      },
      "ExposedApi": {
        "description": "The Open API configuration for your service (if one)",
        "properties": {
          "exposeApi": {
            "description": "Whether or not the current service expose an API with an Open API descriptor",
            "example": true,
            "type": "boolean"
          },
          "openApiDescriptorUrl": {
            "description": "The URL of the Open API descriptor",
            "example": "http://www.google.com",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "exposeApi"
        ],
        "type": "object"
      },
      "ChaosConfig": {
        "description": "Configuration for the faults that can be injected in requests",
        "properties": {
          "badResponsesFaultConfig": {
            "$ref": "#/$defs/BadResponsesFaultConfig"
          },
          "enabled": {
            "description": "Whether or not this config is enabled",
            "example": true,
            "type": "boolean"
          },
          "largeRequestFaultConfig": {
            "$ref": "#/$defs/LargeRequestFaultConfig"
          },
          "largeResponseFaultConfig": {
            "$ref": "#/$defs/LargeResponseFaultConfig"
          },
          "latencyInjectionFaultConfig": {
            "$ref": "#/$defs/LatencyInjectionFaultConfig"
          }
        },
        "required": [
          "enabled"
        ],
        "type": "object"
      },
      "BadResponsesFaultConfig": {
        "description": "Config for bad requests injection fault",
        "properties": {
          "ratio": {
            "description": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "example": 42.2,
            "format": "double",
            "type": "number"
          },
          "responses": {
            "description": "The possibles responses",
            "items": {
              "$ref": "#/$defs/BadResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "ratio",
          "responses"
        ],
        "type": "object"
      },
      "BadResponse": {
        "description": "An HTTP response that is not supposed to be returned by a service",
        "properties": {
          "body": {
            "description": "The body of the HTTP response",
            "example": "a string value",
            "type": "string"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The HTTP headers of the response",
            "example": {
              "key": "value"
            },
            "type": "object"
          },
          "status": {
            "description": "The HTTP status for the response",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "status",
          "body",
          "headers"
        ],
        "type": "object"
      },
      "LargeRequestFaultConfig": {
        "description": "Config for large request injection fault",
        "properties": {
          "additionalRequestSize": {
            "description": "The size added to the request body in bytes. Added payload will be spaces only.",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "ratio": {
            "description": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "example": 42.2,
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "ratio",
          "additionalRequestSize"
        ],
        "type": "object"
      },
      "LargeResponseFaultConfig": {
        "description": "Config for large response injection fault",
        "properties": {
          "additionalRequestSize": {
            "description": "The size added to the response body in bytes. Added payload will be spaces only.",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "ratio": {
            "description": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "example": 42.2,
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "ratio",
          "additionalResponseSize"
        ],
        "type": "object"
      },
      "LatencyInjectionFaultConfig": {
        "description": "Config for large latency injection fault",
        "properties": {
          "from": {
            "description": "The start range of latency added to the request",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "ratio": {
            "description": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "example": 42.2,
            "format": "double",
            "type": "number"
          },
          "to": {
            "description": "The end range of latency added to the request",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "ratio",
          "from",
          "to"
        ],
        "type": "object"
      },
      "ClientConfig": {
        "description": "The configuration of the circuit breaker for a service descriptor",
        "properties": {
          "backoffFactor": {
            "description": "Specify the factor to multiply the delay for each retry",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "callTimeout": {
            "description": "Specify how long each call should last at most in milliseconds",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "globalTimeout": {
            "description": "Specify how long the global call (with retries) should last at most in milliseconds",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "maxErrors": {
            "description": "Specify how many errors can pass before opening the circuit breaker",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "retries": {
            "description": "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "retryInitialDelay": {
            "description": "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "sampleInterval": {
            "description": "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "useCircuitBreaker": {
            "description": "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "useCircuitBreaker",
          "retries",
          "maxErrors",
          "retryInitialDelay",
          "backoffFactor",
          "callTimeout",
          "globalTimeout",
          "sampleInterval"
        ],
        "type": "object"
      },
      "CorsSettings": {
        "description": "The configuration for cors support",
        "properties": {
          "allowCredentials": {
            "description": "Allow to pass credentials",
            "example": true,
            "type": "boolean"
          },
          "allowHeaders": {
            "description": "The cors allowed headers",
            "items": {
              "example": "a string value",
              "type": "string"
            },
            "type": "array"
          },
          "allowMethods": {
            "description": "The cors allowed methods",
            "items": {
              "example": "a string value",
              "type": "string"
            },
            "type": "array"
          },
          "allowOrigin": {
            "description": "The cors allowed origin",
            "example": "a string value",
            "type": "string"
          },
          "enabled": {
            "description": "Whether or not cors is enabled",
            "example": true,
            "type": "boolean"
          },
          "excludedPatterns": {
            "description": "The cors excluded patterns",
            "items": {
              "example": "a string value",
              "type": "string"
            },
            "type": "array"
          },
          "exposeHeaders": {
            "description": "The cors exposed header",
            "items": {
              "example": "a string value",
              "type": "string"
            },
            "type": "array"
          },
          "maxAge": {
            "description": "Cors max age",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "enabled",
          "allowOrigin",
          "exposeHeaders",
          "allowHeaders",
          "allowMethods",
          "excludedPatterns",
          "maxAge",
          "allowCredentials"
        ],
        "type": "object"
      },
      "Gzip": {
        "description": "Configuration for gzip of service responses",
        "properties": {
          "blackList": {
            "description": "Blacklisted mime types. Wildcard supported",
            "items": {
              "example": "a string value",
              "type": "string"
            },
            "type": "array"
          },
          "bufferSize": {
            "description": "Size of the GZip buffer",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "chunkedThreshold": {
            "description": "Threshold for chunking data",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "compressionLevel": {
            "description": "Compression level. From 0 to 9",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "enabled": {
            "description": "Whether gzip compression is enabled or not",
            "example": true,
            "type": "boolean"
          },
          "excludedPatterns": {
            "description": "Patterns that are excluded from gzipping",
            "items": {
              "example": "a string value",
              "type": "string"
            },
            "type": "array"
          },
          "whiteList": {
            "description": "Whitelisted mime types. Wildcard supported",
            "items": {
              "example": "a string value",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "enabled",
          "excludedPatterns",
          "whiteList",
          "blackList",
          "bufferSize",
          "chunkedThreshold",
          "compressionLevel"
        ],
        "type": "object"
      },
      "HealthCheck": {
        "description": "The configuration for checking health of a service. Otoroshi will perform GET call on the URL to check if the service is still alive",
        "properties": {
          "enabled": {
            "description": "Whether or not healthcheck is enabled on the current service descriptor",
            "example": true,
            "type": "boolean"
          },
          "url": {
            "description": "The URL to check",
            "example": "http://www.google.com",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "enabled"
        ],
        "type": "object"
      },
      "LocalJwtVerifier": {
        "description": "A JWT verifier used only for the current service descriptor",
        "properties": {
          "algoSettings": {
            "oneOf": [
              {
                "$ref": "#/$defs/HSAlgoSettings"
              },
              {
                "$ref": "#/$defs/RSAlgoSettings"
              },
              {
                "$ref": "#/$defs/ESAlgoSettings"
              },
              {
                "$ref": "#/$defs/JWKSAlgoSettings"
              }
            ]
          },
          "enabled": {
            "description": "Is it enabled",
            "example": true,
            "type": "boolean"
          },
          "source": {
            "oneOf": [
              {
                "$ref": "#/$defs/InQueryParam"
              },
              {
                "$ref": "#/$defs/InHeader"
              },
              {
                "$ref": "#/$defs/InCookie"
              }
            ]
          },
          "strategy": {
            "oneOf": [
              {
                "$ref": "#/$defs/PassThrough"
              },
              {
                "$ref": "#/$defs/Sign"
              },
              {
                "$ref": "#/$defs/Transform"
              }
            ]
          },
          "strict": {
            "description": "Does it fail if JWT not found",
            "example": true,
            "type": "boolean"
          },
          "type": {
            "description": "A string with value 'local'",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "enabled",
          "strict",
          "source",
          "algoSettings",
          "strategy"
        ],
        "type": "object"
      },
      "HSAlgoSettings": {
        "description": "Settings for an HMAC + SHA signing algorithm",
        "properties": {
          "secret": {
            "description": "The secret value for the HMAC function",
            "example": "a string value",
            "type": "string"
          },
          "size": {
            "description": "Size for SHA function. can be 256, 384 or 512",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "String with value HSAlgoSettings",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "size",
          "secret"
        ],
        "type": "object"
      },
      "RSAlgoSettings": {
        "description": "Settings for an HMAC + SHA signing algorithm",
        "properties": {
          "privateKey": {
            "description": "The private key for the RSA function",
            "example": "a string value",
            "type": "string"
          },
          "publicKey": {
            "description": "The public key for the RSA function",
            "example": "a string value",
            "type": "string"
          },
          "size": {
            "description": "Size for SHA function. can be 256, 384 or 512",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "String with value RSAlgoSettings",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "size",
          "publicKey"
        ],
        "type": "object"
      },
      "ESAlgoSettings": {
        "description": "Settings for an EC + SHA signing algorithm",
        "properties": {
          "privateKey": {
            "description": "The private key for the RSA function",
            "example": "a string value",
            "type": "string"
          },
          "publicKey": {
            "description": "The public key for the RSA function",
            "example": "a string value",
            "type": "string"
          },
          "size": {
            "description": "Size for SHA function. can be 256, 384 or 512",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "String with value ESAlgoSettings",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "size",
          "publicKey"
        ],
        "type": "object"
      },
      "JWKSAlgoSettings": {
        "description": "Settings for a JWK set",
        "properties": {
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The headers for the http call",
            "example": {
              "key": "value"
            },
            "type": "object"
          },
          "kty": {
            "description": "The type of key: RSA or EC",
            "example": "a string value",
            "type": "string"
          },
          "timeout": {
            "description": "The timeout of the http call",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "ttl": {
            "description": "The ttl of the keyset",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "description": "String with value JWKSAlgoSettings",
            "example": "a string value",
            "type": "string"
          },
          "url": {
            "description": "The url for the http call",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "size",
          "publicKey"
        ],
        "type": "object"
      },
      "InQueryParam": {
        "description": "JWT location in a query param",
        "properties": {
          "name": {
            "description": "Name of the query param",
            "example": "a string value",
            "type": "string"
          },
          "type": {
            "description": "String with value InQueryParam",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "InHeader": {
        "description": "JWT location in a header",
        "properties": {
          "name": {
            "description": "Name of the header",
            "example": "a string value",
            "type": "string"
          },
          "remove": {
            "description": "Remove regex inside the value, like 'Bearer '",
            "example": "a string value",
            "type": "string"
          },
          "type": {
            "description": "String with value InHeader",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "remove"
        ],
        "type": "object"
      },
      "InCookie": {
        "description": "JWT location in a cookie",
        "properties": {
          "name": {
            "description": "Name of the cookie",
            "example": "a string value",
            "type": "string"
          },
          "type": {
            "description": "String with value InCookie",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "PassThrough": {
        "description": "Strategy where only signature and field values are verified",
        "properties": {
          "type": {
            "description": "String with value PassThrough",
            "example": "a string value",
            "type": "string"
          },
          "verificationSettings": {
            "$ref": "#/$defs/VerificationSettings"
          }
        },
        "required": [
          "type",
          "verificationSettings"
        ],
        "type": "object"
      },
      "VerificationSettings": {
        "description": "Settings to verify the value of JWT token fields",
        "properties": {
          "fields": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Fields to verify with their values",
            "example": {
              "key": "value"
            },
            "type": "object"
          },
          "mappingSettings": {
            "$ref": "#/$defs/MappingSettings"
          }
        },
        "required": [
          "fields"
        ],
        "type": "object"
      },
      "MappingSettings": {
        "description": "Settings to change fields of a JWT token",
        "properties": {
          "map": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Fields to rename",
            "example": {
              "key": "value"
            },
            "type": "object"
          },
          "remove": {
            "description": "Fields to remove",
            "items": {
              "example": "a string value",
              "type": "string"
            },
            "type": "array"
          },
          "values": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Fields to set",
            "example": {
              "key": "value"
            },
            "type": "object"
          }
        },
        "required": [
          "map",
          "values",
          "remove"
        ],
        "type": "object"
      },
      "Sign": {
        "description": "Strategy where signature and field values are verified, and then token si re-signed",
        "properties": {
          "algoSettings": {
            "oneOf": [
              {
                "$ref": "#/$defs/HSAlgoSettings"
              },
              {
                "$ref": "#/$defs/RSAlgoSettings"
              },
              {
                "$ref": "#/$defs/ESAlgoSettings"
              },
              {
                "$ref": "#/$defs/JWKSAlgoSettings"
              }
            ]
          },
          "type": {
            "description": "String with value Sign",
            "example": "a string value",
            "type": "string"
          },
          "verificationSettings": {
            "$ref": "#/$defs/VerificationSettings"
          }
        },
        "required": [
          "type",
          "verificationSettings",
          "algoSettings"
        ],
        "type": "object"
      },
      "Transform": {
        "description": "Strategy where signature and field values are verified, trasnformed and then token si re-signed",
        "properties": {
          "algoSettings": {
            "oneOf": [
              {
                "$ref": "#/$defs/HSAlgoSettings"
              },
              {
                "$ref": "#/$defs/RSAlgoSettings"
              },
              {
                "$ref": "#/$defs/ESAlgoSettings"
              },
              {
                "$ref": "#/$defs/JWKSAlgoSettings"
              }
            ]
          },
          "transformSettings": {
            "$ref": "#/$defs/TransformSettings"
          },
          "type": {
            "description": "String with value Transform",
            "example": "a string value",
            "type": "string"
          },
          "verificationSettings": {
            "$ref": "#/$defs/VerificationSettings"
          }
        },
        "required": [
          "type",
          "verificationSettings",
          "algoSettings"
        ],
        "type": "object"
      },
      "TransformSettings": {
        "description": "Settings to transform a JWT token and its location",
        "properties": {
          "location": {
            "oneOf": [
              {
                "$ref": "#/$defs/InQueryParam"
              },
              {
                "$ref": "#/$defs/InHeader"
              },
              {
                "$ref": "#/$defs/InCookie"
              }
            ]
          },
          "mappingSettings": {
            "$ref": "#/$defs/MappingSettings"
          }
        },
        "required": [
          "location",
          "mappingSettings"
        ],
        "type": "object"
      },
      "RefJwtVerifier": {
        "description": "Reference to a global JWT verifier",
        "properties": {
          "enabled": {
            "description": "Is it enabled",
            "example": true,
            "type": "boolean"
          },
          "id": {
            "description": "The id of the GlobalJWTVerifier",
            "example": "a string value",
            "type": "string"
          },
          "type": {
            "description": "A string with value 'ref'",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "enabled"
        ],
        "type": "object"
      },
      "RedirectionSettings": {
        "description": "The configuration for redirection per service",
        "properties": {
          "code": {
            "description": "The http redirect code",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "enabled": {
            "description": "Whether or not redirection is enabled",
            "example": true,
            "type": "boolean"
          },
          "to": {
            "description": "The location for redirection",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "enabled",
          "to",
          "code"
        ],
        "type": "object"
      },
      "StatsdConfig": {
        "description": "The configuration for statsd metrics push",
        "properties": {
          "datadog": {
            "description": "Datadog agent",
            "example": true,
            "type": "boolean"
          },
          "host": {
            "description": "The host of the StatsD agent",
            "example": "a string value",
            "type": "string"
          },
          "port": {
            "description": "The port of the StatsD agent",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "host",
          "port",
          "datadog"
        ],
        "type": "object"
      },
      "ImportExportStats": {
        "description": "Global stats for the current Otoroshi instances",
        "properties": {
          "calls": {
            "description": "Number of calls to Otoroshi globally",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "dataIn": {
            "description": "The amount of data sent to Otoroshi globally",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "dataOut": {
            "description": "The amount of data sent from Otoroshi globally",
            "example": 123,
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "calls",
          "dataIn",
          "dataOut"
        ],
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://otoroshi-api.oto.tools//api/import"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**done**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
