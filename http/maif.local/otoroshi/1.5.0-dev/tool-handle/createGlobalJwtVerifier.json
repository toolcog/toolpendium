{
  "name": "createGlobalJwtVerifier",
  "description": "Create one global JWT verifiers",
  "parameters": {
    "type": "object",
    "properties": {
      "body": {
        "$ref": "#/$defs/GlobalJwtVerifier"
      }
    },
    "$defs": {
      "GlobalJwtVerifier": {
        "description": "A JWT verifier used by multiple service descriptor",
        "properties": {
          "algoSettings": {
            "oneOf": [
              {
                "$ref": "#/$defs/HSAlgoSettings"
              },
              {
                "$ref": "#/$defs/RSAlgoSettings"
              },
              {
                "$ref": "#/$defs/ESAlgoSettings"
              },
              {
                "$ref": "#/$defs/JWKSAlgoSettings"
              }
            ]
          },
          "desc": {
            "description": "Verifier description",
            "example": "a string value",
            "type": "string"
          },
          "enabled": {
            "description": "Is it enabled",
            "example": true,
            "type": "boolean"
          },
          "id": {
            "description": "Verifier id",
            "example": "a string value",
            "type": "string"
          },
          "name": {
            "description": "Verifier name",
            "example": "a string value",
            "type": "string"
          },
          "source": {
            "oneOf": [
              {
                "$ref": "#/$defs/InQueryParam"
              },
              {
                "$ref": "#/$defs/InHeader"
              },
              {
                "$ref": "#/$defs/InCookie"
              }
            ]
          },
          "strategy": {
            "oneOf": [
              {
                "$ref": "#/$defs/PassThrough"
              },
              {
                "$ref": "#/$defs/Sign"
              },
              {
                "$ref": "#/$defs/Transform"
              }
            ]
          },
          "strict": {
            "description": "Does it fail if JWT not found",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "desc",
          "enabled",
          "strict",
          "source",
          "algoSettings",
          "strategy"
        ],
        "type": "object"
      },
      "HSAlgoSettings": {
        "description": "Settings for an HMAC + SHA signing algorithm",
        "properties": {
          "secret": {
            "description": "The secret value for the HMAC function",
            "example": "a string value",
            "type": "string"
          },
          "size": {
            "description": "Size for SHA function. can be 256, 384 or 512",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "String with value HSAlgoSettings",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "size",
          "secret"
        ],
        "type": "object"
      },
      "RSAlgoSettings": {
        "description": "Settings for an HMAC + SHA signing algorithm",
        "properties": {
          "privateKey": {
            "description": "The private key for the RSA function",
            "example": "a string value",
            "type": "string"
          },
          "publicKey": {
            "description": "The public key for the RSA function",
            "example": "a string value",
            "type": "string"
          },
          "size": {
            "description": "Size for SHA function. can be 256, 384 or 512",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "String with value RSAlgoSettings",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "size",
          "publicKey"
        ],
        "type": "object"
      },
      "ESAlgoSettings": {
        "description": "Settings for an EC + SHA signing algorithm",
        "properties": {
          "privateKey": {
            "description": "The private key for the RSA function",
            "example": "a string value",
            "type": "string"
          },
          "publicKey": {
            "description": "The public key for the RSA function",
            "example": "a string value",
            "type": "string"
          },
          "size": {
            "description": "Size for SHA function. can be 256, 384 or 512",
            "example": 123123,
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "String with value ESAlgoSettings",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "size",
          "publicKey"
        ],
        "type": "object"
      },
      "JWKSAlgoSettings": {
        "description": "Settings for a JWK set",
        "properties": {
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The headers for the http call",
            "example": {
              "key": "value"
            },
            "type": "object"
          },
          "kty": {
            "description": "The type of key: RSA or EC",
            "example": "a string value",
            "type": "string"
          },
          "timeout": {
            "description": "The timeout of the http call",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "ttl": {
            "description": "The ttl of the keyset",
            "example": 123,
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "description": "String with value JWKSAlgoSettings",
            "example": "a string value",
            "type": "string"
          },
          "url": {
            "description": "The url for the http call",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "size",
          "publicKey"
        ],
        "type": "object"
      },
      "InQueryParam": {
        "description": "JWT location in a query param",
        "properties": {
          "name": {
            "description": "Name of the query param",
            "example": "a string value",
            "type": "string"
          },
          "type": {
            "description": "String with value InQueryParam",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "InHeader": {
        "description": "JWT location in a header",
        "properties": {
          "name": {
            "description": "Name of the header",
            "example": "a string value",
            "type": "string"
          },
          "remove": {
            "description": "Remove regex inside the value, like 'Bearer '",
            "example": "a string value",
            "type": "string"
          },
          "type": {
            "description": "String with value InHeader",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "name",
          "remove"
        ],
        "type": "object"
      },
      "InCookie": {
        "description": "JWT location in a cookie",
        "properties": {
          "name": {
            "description": "Name of the cookie",
            "example": "a string value",
            "type": "string"
          },
          "type": {
            "description": "String with value InCookie",
            "example": "a string value",
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "PassThrough": {
        "description": "Strategy where only signature and field values are verified",
        "properties": {
          "type": {
            "description": "String with value PassThrough",
            "example": "a string value",
            "type": "string"
          },
          "verificationSettings": {
            "$ref": "#/$defs/VerificationSettings"
          }
        },
        "required": [
          "type",
          "verificationSettings"
        ],
        "type": "object"
      },
      "VerificationSettings": {
        "description": "Settings to verify the value of JWT token fields",
        "properties": {
          "fields": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Fields to verify with their values",
            "example": {
              "key": "value"
            },
            "type": "object"
          },
          "mappingSettings": {
            "$ref": "#/$defs/MappingSettings"
          }
        },
        "required": [
          "fields"
        ],
        "type": "object"
      },
      "MappingSettings": {
        "description": "Settings to change fields of a JWT token",
        "properties": {
          "map": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Fields to rename",
            "example": {
              "key": "value"
            },
            "type": "object"
          },
          "remove": {
            "description": "Fields to remove",
            "items": {
              "example": "a string value",
              "type": "string"
            },
            "type": "array"
          },
          "values": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Fields to set",
            "example": {
              "key": "value"
            },
            "type": "object"
          }
        },
        "required": [
          "map",
          "values",
          "remove"
        ],
        "type": "object"
      },
      "Sign": {
        "description": "Strategy where signature and field values are verified, and then token si re-signed",
        "properties": {
          "algoSettings": {
            "oneOf": [
              {
                "$ref": "#/$defs/HSAlgoSettings"
              },
              {
                "$ref": "#/$defs/RSAlgoSettings"
              },
              {
                "$ref": "#/$defs/ESAlgoSettings"
              },
              {
                "$ref": "#/$defs/JWKSAlgoSettings"
              }
            ]
          },
          "type": {
            "description": "String with value Sign",
            "example": "a string value",
            "type": "string"
          },
          "verificationSettings": {
            "$ref": "#/$defs/VerificationSettings"
          }
        },
        "required": [
          "type",
          "verificationSettings",
          "algoSettings"
        ],
        "type": "object"
      },
      "Transform": {
        "description": "Strategy where signature and field values are verified, trasnformed and then token si re-signed",
        "properties": {
          "algoSettings": {
            "oneOf": [
              {
                "$ref": "#/$defs/HSAlgoSettings"
              },
              {
                "$ref": "#/$defs/RSAlgoSettings"
              },
              {
                "$ref": "#/$defs/ESAlgoSettings"
              },
              {
                "$ref": "#/$defs/JWKSAlgoSettings"
              }
            ]
          },
          "transformSettings": {
            "$ref": "#/$defs/TransformSettings"
          },
          "type": {
            "description": "String with value Transform",
            "example": "a string value",
            "type": "string"
          },
          "verificationSettings": {
            "$ref": "#/$defs/VerificationSettings"
          }
        },
        "required": [
          "type",
          "verificationSettings",
          "algoSettings"
        ],
        "type": "object"
      },
      "TransformSettings": {
        "description": "Settings to transform a JWT token and its location",
        "properties": {
          "location": {
            "oneOf": [
              {
                "$ref": "#/$defs/InQueryParam"
              },
              {
                "$ref": "#/$defs/InHeader"
              },
              {
                "$ref": "#/$defs/InCookie"
              }
            ]
          },
          "mappingSettings": {
            "$ref": "#/$defs/MappingSettings"
          }
        },
        "required": [
          "location",
          "mappingSettings"
        ],
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://otoroshi-api.oto.tools//api/verifiers"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A JWT verifier used by multiple service descriptor",
        "**Key properties:**",
        {
          "$ul": [
            "**algoSettings**",
            "**desc**: Verifier description",
            "**enabled**: Is it enabled",
            "**id**: Verifier id",
            "**name**: Verifier name",
            "**source**",
            "**strategy**",
            "**strict**: Does it fail if JWT not found"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
