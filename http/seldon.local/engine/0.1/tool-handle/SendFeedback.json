{
  "name": "SendFeedback",
  "parameters": {
    "type": "object",
    "properties": {
      "namespace": {
        "maxLength": 2097152,
        "pattern": "^.{1,2097152}",
        "type": "string"
      },
      "deployment": {
        "maxLength": 2097152,
        "pattern": "^.{1,2097152}",
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/Feedback"
      }
    },
    "required": [
      "namespace",
      "deployment",
      "body"
    ],
    "$defs": {
      "Feedback": {
        "additionalProperties": false,
        "properties": {
          "request": {
            "$ref": "#/$defs/SeldonMessage"
          },
          "response": {
            "$ref": "#/$defs/SeldonMessage"
          },
          "reward": {
            "format": "float",
            "type": "number"
          },
          "truth": {
            "$ref": "#/$defs/SeldonMessage"
          }
        },
        "type": "object"
      },
      "SeldonMessage": {
        "additionalProperties": false,
        "properties": {
          "binData": {
            "format": "byte",
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          },
          "data": {
            "$ref": "#/$defs/DefaultData"
          },
          "meta": {
            "$ref": "#/$defs/Meta"
          },
          "status": {
            "$ref": "#/$defs/Status"
          },
          "strData": {
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DefaultData": {
        "additionalProperties": false,
        "properties": {
          "names": {
            "items": {
              "maxLength": 2097152,
              "pattern": "^.{1,2097152}",
              "type": "string"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "ndarray": {
            "items": {
              "$ref": "#/$defs/AnyValue"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "tensor": {
            "$ref": "#/$defs/Tensor"
          },
          "tftensor": {
            "$ref": "#/$defs/TensorflowTensorProto"
          }
        },
        "type": "object"
      },
      "AnyValue": {
        "description": "Can be anything: string, number, array, object, etc."
      },
      "Tensor": {
        "additionalProperties": false,
        "properties": {
          "shape": {
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "values": {
            "items": {
              "format": "double",
              "type": "number"
            },
            "maxItems": 2097152,
            "type": "array"
          }
        },
        "type": "object"
      },
      "TensorflowTensorProto": {
        "additionalProperties": false,
        "description": "Protocol buffer representing a tensor.",
        "properties": {
          "bool_val": {
            "items": {
              "format": "boolean",
              "type": "boolean"
            },
            "maxItems": 2097152,
            "title": "DT_BOOL",
            "type": "array"
          },
          "dcomplex_val": {
            "description": "DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real and imaginary parts of i-th double precision complex.",
            "items": {
              "format": "double",
              "type": "number"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "double_val": {
            "description": "DT_DOUBLE.",
            "items": {
              "format": "double",
              "type": "number"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "dtype": {
            "$ref": "#/$defs/TensorflowDataType"
          },
          "float_val": {
            "description": "DT_FLOAT.",
            "items": {
              "format": "float",
              "type": "number"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "half_val": {
            "description": "DT_HALF, DT_BFLOAT16. Note that since protobuf has no int16 type, we'll have some pointless zero padding for each value here.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "int64_val": {
            "items": {
              "format": "int64",
              "maxLength": 2097152,
              "pattern": "^.{1,2097152}",
              "type": "string"
            },
            "maxItems": 2097152,
            "title": "DT_INT64",
            "type": "array"
          },
          "int_val": {
            "description": "DT_INT32, DT_INT16, DT_INT8, DT_UINT8.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "resource_handle_val": {
            "items": {
              "$ref": "#/$defs/TensorflowResourceHandleProto"
            },
            "maxItems": 2097152,
            "title": "DT_RESOURCE",
            "type": "array"
          },
          "scomplex_val": {
            "description": "DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real and imaginary parts of i-th single precision complex.",
            "items": {
              "format": "float",
              "type": "number"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "string_val": {
            "items": {
              "format": "byte",
              "maxLength": 2097152,
              "pattern": "^.{1,2097152}",
              "type": "string"
            },
            "maxItems": 2097152,
            "title": "DT_STRING",
            "type": "array"
          },
          "tensor_content": {
            "description": "Serialized raw tensor content from either Tensor::AsProtoTensorContent or memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation can be used for all tensor types. The purpose of this representation is to reduce serialization overhead during RPC call by avoiding serialization of many repeated small items.",
            "format": "byte",
            "pattern": ".* maxLength: 2097152",
            "type": "string"
          },
          "tensor_shape": {
            "$ref": "#/$defs/TensorflowTensorShapeProto"
          },
          "uint32_val": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "maxItems": 2097152,
            "title": "DT_UINT32",
            "type": "array"
          },
          "uint64_val": {
            "items": {
              "format": "uint64",
              "maxLength": 2097152,
              "pattern": "^.{1,2097152}",
              "type": "string"
            },
            "maxItems": 2097152,
            "title": "DT_UINT64",
            "type": "array"
          },
          "variant_val": {
            "items": {
              "$ref": "#/$defs/TensorflowVariantTensorDataProto"
            },
            "maxItems": 2097152,
            "title": "DT_VARIANT",
            "type": "array"
          },
          "version_number": {
            "description": "Version number.\nIn version 0, if the \"repeated xxx\" representations contain only one element, that element is repeated to fill the shape.  This makes it easy to represent a constant Tensor with a single value.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TensorflowDataType": {
        "default": "DT_INVALID",
        "description": "- DT_INVALID: Not a legal value for DataType.  Used to indicate a DataType field has not been set. - DT_FLOAT: Data types that all computation devices are expected to be capable to support. - DT_FLOAT_REF: Do not use!  These are only for parameters.  Every enum above should have a corresponding value below (verified by types_test).",
        "enum": [
          "DT_INVALID",
          "DT_FLOAT",
          "DT_DOUBLE",
          "DT_INT32",
          "DT_UINT8",
          "DT_INT16",
          "DT_INT8",
          "DT_STRING",
          "DT_COMPLEX64",
          "DT_INT64",
          "DT_BOOL",
          "DT_QINT8",
          "DT_QUINT8",
          "DT_QINT32",
          "DT_BFLOAT16",
          "DT_QINT16",
          "DT_QUINT16",
          "DT_UINT16",
          "DT_COMPLEX128",
          "DT_HALF",
          "DT_RESOURCE",
          "DT_VARIANT",
          "DT_UINT32",
          "DT_UINT64",
          "DT_FLOAT_REF",
          "DT_DOUBLE_REF",
          "DT_INT32_REF",
          "DT_UINT8_REF",
          "DT_INT16_REF",
          "DT_INT8_REF",
          "DT_STRING_REF",
          "DT_COMPLEX64_REF",
          "DT_INT64_REF",
          "DT_BOOL_REF",
          "DT_QINT8_REF",
          "DT_QUINT8_REF",
          "DT_QINT32_REF",
          "DT_BFLOAT16_REF",
          "DT_QINT16_REF",
          "DT_QUINT16_REF",
          "DT_UINT16_REF",
          "DT_COMPLEX128_REF",
          "DT_HALF_REF",
          "DT_RESOURCE_REF",
          "DT_VARIANT_REF",
          "DT_UINT32_REF",
          "DT_UINT64_REF"
        ],
        "maxLength": 2097152,
        "pattern": "^.{1,2097152}",
        "title": "LINT.IfChange",
        "type": "string"
      },
      "TensorflowResourceHandleProto": {
        "additionalProperties": false,
        "description": "Protocol buffer representing a handle to a tensorflow resource. Handles are not valid across executions, but can be serialized back and forth from within a single run.",
        "properties": {
          "container": {
            "description": "Container in which this resource is placed.",
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          },
          "device": {
            "description": "Unique name for the device containing the resource.",
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          },
          "hash_code": {
            "description": "Hash code for the type of the resource. Is only valid in the same device and in the same execution.",
            "format": "uint64",
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          },
          "maybe_type_name": {
            "description": "For debug-only, the name of the type pointed to by this handle, if available.",
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          },
          "name": {
            "description": "Unique name of this resource.",
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TensorflowTensorShapeProto": {
        "additionalProperties": false,
        "description": "Dimensions of a tensor.",
        "properties": {
          "dim": {
            "description": "Dimensions of the tensor, such as {\"input\", 30}, {\"output\", 40} for a 30 x 40 2D tensor.  If an entry has size -1, this corresponds to a dimension of unknown size. The names are optional.\nThe order of entries in \"dim\" matters: It indicates the layout of the values in the tensor in-memory representation.\nThe first entry in \"dim\" is the outermost dimension used to layout the values, the last entry is the innermost dimension.  This matches the in-memory layout of RowMajor Eigen tensors.\nIf \"dim.size()\" > 0, \"unknown_rank\" must be false.",
            "items": {
              "$ref": "#/$defs/TensorShapeProtoDim"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "unknown_rank": {
            "description": "If true, the number of dimensions in the shape is unknown.\nIf true, \"dim.size()\" must be 0.",
            "format": "boolean",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TensorShapeProtoDim": {
        "additionalProperties": false,
        "description": "One dimension of the tensor.",
        "properties": {
          "name": {
            "description": "Optional name of the tensor dimension.",
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          },
          "size": {
            "description": "Size of the tensor in that dimension. This value must be >= -1, but values of -1 are reserved for \"unknown\" shapes (values of -1 mean \"unknown\" dimension).  Certain wrappers that work with TensorShapeProto may fail at runtime when deserializing a TensorShapeProto containing a dim value of -1.",
            "format": "int64",
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TensorflowVariantTensorDataProto": {
        "additionalProperties": false,
        "description": "Protocol buffer representing the serialization format of DT_VARIANT tensors.",
        "properties": {
          "metadata": {
            "description": "Portions of the object that are not Tensors.",
            "format": "byte",
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          },
          "tensors": {
            "description": "Tensors contained within objects being serialized.",
            "items": {
              "$ref": "#/$defs/TensorflowTensorProto"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "type_name": {
            "description": "Name of the type of objects being serialized.",
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Meta": {
        "additionalProperties": false,
        "properties": {
          "metrics": {
            "items": {
              "$ref": "#/$defs/Metric"
            },
            "maxItems": 2097152,
            "type": "array"
          },
          "puid": {
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          },
          "requestPath": {
            "additionalProperties": {
              "maxLength": 2097152,
              "pattern": "^.{1,2097152}",
              "type": "string"
            },
            "example": {
              "classifier": "seldonio/mock_classifier:1.0"
            },
            "type": "object"
          },
          "routing": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "example": {
              "router1": 1
            },
            "type": "object"
          },
          "tags": {
            "additionalProperties": {
              "$ref": "#/$defs/AnyValue"
            },
            "example": {
              "mytag": "myvalue"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Metric": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          },
          "type": {
            "$ref": "#/$defs/MetricType"
          },
          "value": {
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "MetricType": {
        "default": "COUNTER",
        "enum": [
          "COUNTER",
          "GAUGE",
          "TIMER"
        ],
        "maxLength": 2097152,
        "pattern": "^.{1,2097152}",
        "type": "string"
      },
      "Status": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "info": {
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          },
          "reason": {
            "maxLength": 2097152,
            "pattern": "^.{1,2097152}",
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/StatusStatusFlag"
          }
        },
        "type": "object"
      },
      "StatusStatusFlag": {
        "default": "SUCCESS",
        "enum": [
          "SUCCESS",
          "FAILURE"
        ],
        "maxLength": 2097152,
        "pattern": "^.{1,2097152}",
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://seldon.local/seldon/{namespace}/{deployment}/api/v1.0/feedback"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**binData**",
            [
              "**data**",
              {
                "$ul": [
                  "**names**",
                  "**ndarray**",
                  [
                    "**tensor**",
                    {
                      "$ul": [
                        "**shape**",
                        "**values**"
                      ]
                    }
                  ],
                  [
                    "**tftensor**: Protocol buffer representing a tensor.",
                    {
                      "$ul": [
                        "**bool_val**",
                        "**dcomplex_val**: DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real and imaginary parts of i-th double precision complex.",
                        "**double_val**: DT_DOUBLE.",
                        "**dtype**: - DT_INVALID: Not a legal value for DataType.  Used to indicate a DataType field has not been set. - DT_FLOAT: Data types that all computation devices are expected to be capable to support. - DT_FLOAT_REF: Do not use!  These are only for parameters.  Every enum above should have a corresponding value below (verified by types_test). (default: DT_INVALID)",
                        "**float_val**: DT_FLOAT.",
                        "**half_val**: DT_HALF, DT_BFLOAT16. Note that since protobuf has no int16 type, we'll have some pointless zero padding for each value here.",
                        "**int64_val**",
                        "**int_val**: DT_INT32, DT_INT16, DT_INT8, DT_UINT8.",
                        "**resource_handle_val**",
                        "**scomplex_val**: DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real and imaginary parts of i-th single precision complex.",
                        "**string_val**",
                        "**tensor_content**: Serialized raw tensor content from either Tensor::AsProtoTensorContent or memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation can be used for all tensor types. The purpose of this representation is to reduce serialization overhead during RPC call by avoiding serialization of many repeated small items.",
                        [
                          "**tensor_shape**: Dimensions of a tensor.",
                          {
                            "$ul": [
                              "**dim**: Dimensions of the tensor, such as {\"input\", 30}, {\"output\", 40} for a 30 x 40 2D tensor.  If an entry has size -1, this corresponds to a dimension of unknown size. The names are optional.",
                              "**unknown_rank**: If true, the number of dimensions in the shape is unknown."
                            ]
                          }
                        ],
                        "**uint32_val**",
                        "**uint64_val**",
                        "**variant_val**",
                        "**version_number**: Version number."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**meta**",
              {
                "$ul": [
                  "**metrics**",
                  "**puid**",
                  "**requestPath**",
                  "**routing**",
                  "**tags**"
                ]
              }
            ],
            [
              "**status**",
              {
                "$ul": [
                  "**code**",
                  "**info**",
                  "**reason**",
                  "**status** (default: SUCCESS)"
                ]
              }
            ],
            "**strData**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
