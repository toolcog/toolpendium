{
  "name": "addProject",
  "description": "LGTM administrators can add a new project to LGTM by providing a repository URL. By default, LGTM tries to build and analyze the project in the same way as for projects added through the user interface. If at least one language is successfully analyzed, and the repository doesn't already exist on LGTM, a new project is created. If the project already exists but your API call triggers a successful analysis  of additional languages, LGTM adds those languages to the project.\n\nYou can configure how LGTM processes the project using query parameters to:\n  * Specify the languages to analyze.\n  * Create a new project in [sparse mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-sparse-analysis).\n  * Create a new project in [upload mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-upload-analysis) to analyze externally-generated databases. Each database represents a snapshot of the codebase. \n  Use this option when you want to upload databases that were generated by the CodeQL CLI (or the QL command-line tools).\n  The version of the command line used to generate the database\n  must be the same version as LGTM Enterprise. \n\nWith any of these options, you can also include an `lgtm.yml` in the body of the request to [customize extraction](https://lgtm.com/help/lgtm/customizing-code-extraction).\n",
  "parameters": {
    "type": "object",
    "properties": {
      "repository": {
        "format": "uri",
        "type": "string",
        "description": "The URL of the repository to analyze.\nLGTM tests this against the [repository providers](https://lgtm.com/admin/help/adding-repository-providers) defined for the system. If it doesn't match any of them, the request fails."
      },
      "language": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "Optional, a [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) to specify which language to analyze.\nTo request the analysis of more than one language, specify a query parameter for each language. By default, LGTM tries to analyze all supported languages.\n"
      },
      "mode": {
        "enum": [
          "full",
          "sparse",
          "upload"
        ],
        "type": "string",
        "description": "The analysis mode of the new project.\nWhen set to `full` all commits of the project are analyzed; when set to `sparse` the latest commit of the project is analyzed periodically; when set to `upload`,  no automatic analysis is performed, instead externally-generated databases should be uploaded.\nFor new projects the default value is `full`. The `mode` parameter cannot be used to change the analysis mode of existing projects. Therefore, for existing projects, it should either be left blank or set to match the analysis mode of the project.\n"
      },
      "commit": {
        "type": "string",
        "description": "Required when `mode=upload`, specify the identifier of the commit used to generate the database."
      },
      "date": {
        "format": "date-time",
        "type": "string",
        "description": "Optional when `mode=upload`, specify the date and time of the commit used to generate the database; defaults to the current time."
      },
      "worker-label": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "Optional, any [labels](https://lgtm.com/admin/help/defining-worker-labels) required by workers to analyze this project. \nTo specify more than one label, repeat the query parameter.\n"
      }
    },
    "required": [
      "repository"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://lgtm.com/api/v1.0/projects{?repository,language,mode,commit,date,worker-label}"
    }
  },
  "responses": {
    "202": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**id**: The identifier for the operation.",
            "**status**: Status of the operation.",
            "**task-result**",
            "**task-result-url**: The URL for the result of the task. For some operations, included only on completion.",
            "**task-type**",
            "**uploads**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
