{
  "name": "CreateCorpus",
  "description": "Create Corpus",
  "parameters": {
    "type": "object",
    "properties": {
      "customer-id": {
        "type": "integer",
        "description": "The Customer ID to use for the request."
      },
      "body": {
        "$ref": "#/$defs/adminCreateCorpusRequest"
      }
    },
    "required": [
      "customer-id",
      "body"
    ],
    "$defs": {
      "adminCreateCorpusRequest": {
        "properties": {
          "corpus": {
            "$ref": "#/$defs/adminCorpus"
          }
        },
        "type": "object"
      },
      "adminCorpus": {
        "properties": {
          "customDimensions": {
            "items": {
              "$ref": "#/$defs/adminDimension"
            },
            "type": "array"
          },
          "description": {
            "description": "A description for the corpus.",
            "type": "string"
          },
          "dtProvision": {
            "description": "The time at which the corpus was provisioned.",
            "format": "int64",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the corpus is enabled for use or not.",
            "type": "boolean"
          },
          "encoderId": {
            "description": "This is an advanced setting for changing the underlying model type.  The\ndefault value is \"1\", which is Vectara's high-performing global model.\nUnderlying models may be swapped for some paying customers by contacting\nour support team.",
            "format": "uint64",
            "type": "string"
          },
          "encrypted": {
            "description": "Encryption is on by default and cannot be turned off.",
            "type": "boolean"
          },
          "filterAttributes": {
            "items": {
              "$ref": "#/$defs/adminFilterAttribute"
            },
            "type": "array"
          },
          "id": {
            "description": "The Corpus ID.",
            "format": "int64",
            "type": "integer"
          },
          "metadataMaxBytes": {
            "description": "An optional maximum size of the metadata that each document can contain.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The name of the corpus.",
            "type": "string"
          },
          "swapIenc": {
            "description": "The default query encoder is designed for normal question-answering types\nof queries when the text contains the answer.  Swapping the index encoder\nis generally rare, but can be used to help directly match questions to\nquestions.  This can be useful if you have a FAQ dataset and you want to\ndirectly match the user question to the question in the FAQ.",
            "type": "boolean"
          },
          "swapQenc": {
            "type": "boolean"
          },
          "textless": {
            "description": "When a corpus is \"textless\", Vectara does not store the original text.\nInstead, Vectara converts the text to vectors and only retains metadata.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "adminDimension": {
        "description": "A custom dimension is additional numeric metadata that you want to affect\nVectara's scoring.  For example, these could be \"number of stars\" ratings,\nor other business metrics like a product's margins that you want to use\nto boost where a result is in the list.",
        "properties": {
          "description": {
            "description": "A description for the custom dimension.",
            "type": "string"
          },
          "indexingDefault": {
            "description": "The default value to give to documents for this custom dimension.",
            "format": "double",
            "type": "number"
          },
          "name": {
            "description": "The name of the custom dimension.  The maximum length of the name is\n8 characters.",
            "type": "string"
          },
          "servingDefault": {
            "description": "The default weight to give this dimension when running queries. A value of\n0.0, for example, gives it no weight at all.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "adminFilterAttribute": {
        "description": "Defines metadata fields that can be used in predicate queries.",
        "properties": {
          "description": {
            "description": "An optional description.",
            "type": "string"
          },
          "indexed": {
            "description": "Whether the field is indexed for maximum query speed.",
            "type": "boolean"
          },
          "level": {
            "$ref": "#/$defs/adminFilterAttributeLevel"
          },
          "name": {
            "description": "Name of the field, as seen in metadata.",
            "type": "string"
          },
          "type": {
            "$ref": "#/$defs/adminFilterAttributeType"
          }
        },
        "type": "object"
      },
      "adminFilterAttributeLevel": {
        "default": "FILTER_ATTRIBUTE_LEVEL__UNDEFINED",
        "enum": [
          "FILTER_ATTRIBUTE_LEVEL__UNDEFINED",
          "FILTER_ATTRIBUTE_LEVEL__DOCUMENT",
          "FILTER_ATTRIBUTE_LEVEL__DOCUMENT_PART"
        ],
        "title": "- FILTER_ATTRIBUTE_LEVEL__DOCUMENT: Document-level attribute\n - FILTER_ATTRIBUTE_LEVEL__DOCUMENT_PART: Part-level attribute",
        "type": "string"
      },
      "adminFilterAttributeType": {
        "default": "FILTER_ATTRIBUTE_TYPE__UNDEFINED",
        "enum": [
          "FILTER_ATTRIBUTE_TYPE__UNDEFINED",
          "FILTER_ATTRIBUTE_TYPE__INTEGER",
          "FILTER_ATTRIBUTE_TYPE__INTEGER_LIST",
          "FILTER_ATTRIBUTE_TYPE__REAL",
          "FILTER_ATTRIBUTE_TYPE__REAL_LIST",
          "FILTER_ATTRIBUTE_TYPE__TEXT",
          "FILTER_ATTRIBUTE_TYPE__TEXT_LIST"
        ],
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://api.vectara.io/v1/create-corpus"
    },
    "headers": {
      "customer-id": {
        "$": "customer-id"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**corpusId**: The Corpus ID that was created.",
            [
              "**status**",
              {
                "$ul": [
                  "**code** (default: OK)",
                  "**statusDetail**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**",
            "**details**",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
