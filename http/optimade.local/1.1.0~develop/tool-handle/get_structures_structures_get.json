{
  "name": "get_structures_structures_get",
  "description": "Get Structures",
  "parameters": {
    "type": "object",
    "properties": {
      "filter": {
        "default": "",
        "description": "A filter string, in the format described in section API Filtering Format Specification of the specification.",
        "title": "Filter",
        "type": "string"
      },
      "response_format": {
        "default": "json",
        "description": "The output format requested (see section Response Format).\nDefaults to the format string 'json', which specifies the standard output format described in this specification.\nExample: `http://example.com/v1/structures?response_format=xml`",
        "title": "Response Format",
        "type": "string"
      },
      "email_address": {
        "default": "",
        "description": "An email address of the user making the request.\nThe email SHOULD be that of a person and not an automatic system.\nExample: `http://example.com/v1/structures?email_address=user@example.com`",
        "format": "email",
        "title": "Email Address",
        "type": "string"
      },
      "response_fields": {
        "default": "",
        "description": "A comma-delimited set of fields to be provided in the output.\nIf provided, these fields MUST be returned along with the REQUIRED fields.\nOther OPTIONAL fields MUST NOT be returned when this parameter is present.\nExample: `http://example.com/v1/structures?response_fields=last_modified,nsites`",
        "pattern": "([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?",
        "title": "Response Fields",
        "type": "string"
      },
      "sort": {
        "default": "",
        "description": "If supporting sortable queries, an implementation MUST use the `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).\n\nAn implementation MAY support multiple sort fields for a single query.\nIf it does, it again MUST conform to the JSON API 1.0 specification.\n\nIf an implementation supports sorting for an entry listing endpoint, then the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>` in its `data.properties.<fieldname>` response value that can be used for sorting, the key `sortable` with value `true`.\nIf a field name under an entry listing endpoint supporting sorting cannot be used for sorting, the server MUST either leave out the `sortable` key or set it equal to `false` for the specific field name.\nThe set of field names, with `sortable` equal to `true` are allowed to be used in the \"sort fields\" list according to its definition in the JSON API 1.0 specification.\nThe field `sortable` is in addition to each property description and other OPTIONAL fields.\nAn example is shown in the section Entry Listing Info Endpoints.",
        "pattern": "([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?",
        "title": "Sort",
        "type": "string"
      },
      "page_limit": {
        "default": 20,
        "description": "Sets a numerical limit on the number of entries returned.\nSee [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).\nThe API implementation MUST return no more than the number specified.\nIt MAY return fewer.\nThe database MAY have a maximum limit and not accept larger numbers (in which case an error code -- 403 Forbidden -- MUST be returned).\nThe default limit value is up to the API implementation to decide.\nExample: `http://example.com/optimade/v1/structures?page_limit=100`",
        "minimum": 0,
        "title": "Page Limit",
        "type": "integer"
      },
      "page_offset": {
        "default": 0,
        "description": "RECOMMENDED for use with _offset-based_ pagination: using `page_offset` and `page_limit` is RECOMMENDED.\nExample: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.",
        "minimum": 0,
        "title": "Page Offset",
        "type": "integer"
      },
      "page_number": {
        "default": 0,
        "description": "RECOMMENDED for use with _page-based_ pagination: using `page_number` and `page_limit` is RECOMMENDED.\nIt is RECOMMENDED that the first page has number 1, i.e., that `page_number` is 1-based.\nExample: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.",
        "minimum": 0,
        "title": "Page Number",
        "type": "integer"
      },
      "page_cursor": {
        "default": 0,
        "description": "RECOMMENDED for use with _cursor-based_ pagination: using `page_cursor` and `page_limit` is RECOMMENDED.",
        "minimum": 0,
        "title": "Page Cursor",
        "type": "integer"
      },
      "page_above": {
        "default": 0,
        "description": "RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below` and `page_limit` is RECOMMENDED.\nExample: Fetch up to 100 structures above sort-field value 4000 (in this example, server chooses to fetch results sorted by increasing `id`, so `page_above` value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.",
        "minimum": 0,
        "title": "Page Above",
        "type": "integer"
      },
      "page_below": {
        "default": 0,
        "description": "RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below` and `page_limit` is RECOMMENDED.",
        "minimum": 0,
        "title": "Page Below",
        "type": "integer"
      },
      "include": {
        "default": "references",
        "description": "A server MAY implement the JSON API concept of returning [compound documents](https://jsonapi.org/format/1.0/#document-compound-documents) by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).\n\nAll related resource objects MUST be returned as part of an array value for the top-level `included` field, see the section JSON Response Schema: Common Fields.\n\nThe value of `include` MUST be a comma-separated list of \"relationship paths\", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).\nIf relationship paths are not supported, or a server is unable to identify a relationship path a `400 Bad Request` response MUST be made.\n\nThe **default value** for `include` is `references`.\nThis means `references` entries MUST always be included under the top-level field `included` as default, since a server assumes if `include` is not specified by a client in the request, it is still specified as `include=references`.\nNote, if a client explicitly specifies `include` and leaves out `references`, `references` resource objects MUST NOT be included under the top-level field `included`, as per the definition of `included`, see section JSON Response Schema: Common Fields.\n\n> **Note**: A query with the parameter `include` set to the empty string means no related resource objects are to be returned under the top-level field `included`.",
        "title": "Include",
        "type": "string"
      },
      "api_hint": {
        "default": "",
        "description": "If the client provides the parameter, the value SHOULD have the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR is a minor version of the API. For example, if a client appends `api_hint=v1.0` to the query string, the hint provided is for major version 1 and minor version 0.",
        "pattern": "(v[0-9]+(\\.[0-9]+)?)?",
        "title": "Api Hint",
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "http://optimade.local/structures{?filter,response_format,email_address,response_fields,sort,page_limit,page_offset,page_number,page_cursor,page_above,page_below,include,api_hint}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "StructureResponseMany"
        },
        "errors are not allowed",
        "**Key properties:**",
        {
          "$ul": [
            "**data**: List of unique OPTIMADE structures entry resource objects",
            "**errors**: A list of unique errors",
            "**included**",
            [
              "**jsonapi**: An object describing the server's implementation",
              {
                "$ul": [
                  "**meta**: Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "**version**: Version of the json API used (default: 1.0)"
                ]
              }
            ],
            [
              "**links**: A set of Links objects, possibly including pagination",
              {
                "$ul": [
                  "**first**: The first page of data",
                  "**last**: The last page of data",
                  "**next**: The next page of data",
                  "**prev**: The previous page of data",
                  "**related**: A related resource link",
                  "**self**: A link to itself"
                ]
              }
            ],
            [
              "**meta**: A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta)",
              {
                "$ul": [
                  "**api_version**: Presently used full version of the OPTIMADE API.",
                  "**data_available**: An integer containing the total number of data resource objects available in the database for the endpoint.",
                  "**data_returned**: An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.",
                  [
                    "**implementation**: Information on the server implementation",
                    {
                      "$ul": [
                        "**homepage**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the homepage of the implementation.",
                        "**issue_tracker**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation's issue tracker.",
                        [
                          "**maintainer**: Details about the maintainer of the implementation",
                          {
                            "$ul": [
                              "**email**: the maintainer's email address"
                            ]
                          }
                        ],
                        "**name**: name of the implementation",
                        "**source_url**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation source, either downloadable archive or version control system.",
                        "**version**: version string of the current implementation"
                      ]
                    }
                  ],
                  "**last_id**: a string containing the last ID returned",
                  "**more_data_available**: `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).",
                  [
                    "**provider**: Information on the database provider of the implementation.",
                    {
                      "$ul": [
                        "**description**: a longer description of the database provider",
                        "**homepage**: a [JSON API links object](http://jsonapi.org/format/1.0#document-links) pointing to homepage of the database provider, either directly as a string, or as a link object.",
                        "**name**: a short name for the database provider",
                        "**prefix**: database-provider-specific prefix as found in section Database-Provider-Specific Namespace Prefixes."
                      ]
                    }
                  ],
                  [
                    "**query**: Information on the query that was requested.",
                    {
                      "$ul": [
                        "**representation**: A string with the part of the URL following the versioned or unversioned base URL that serves the API."
                      ]
                    }
                  ],
                  "**response_message**: response string from the server",
                  "**schema**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) that points to a schema for the response.",
                  "**time_stamp**: A timestamp containing the date and time at which the query was executed.",
                  "**warnings**: A list of warning resource objects representing non-critical errors or warnings."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "ErrorResponse"
        },
        "errors MUST be present and data MUST be skipped",
        "**Key properties:**",
        {
          "$ul": [
            "**data**: Outputted Data",
            "**errors**: A list of OPTIMADE-specific JSON API error objects, where the field detail MUST be present.",
            "**included**: A list of unique included resources",
            [
              "**jsonapi**: An object describing the server's implementation",
              {
                "$ul": [
                  "**meta**: Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "**version**: Version of the json API used (default: 1.0)"
                ]
              }
            ],
            [
              "**links**: A set of Links objects, possibly including pagination",
              {
                "$ul": [
                  "**first**: The first page of data",
                  "**last**: The last page of data",
                  "**next**: The next page of data",
                  "**prev**: The previous page of data",
                  "**related**: A related resource link",
                  "**self**: A link to itself"
                ]
              }
            ],
            [
              "**meta**: A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta)",
              {
                "$ul": [
                  "**api_version**: Presently used full version of the OPTIMADE API.",
                  "**data_available**: An integer containing the total number of data resource objects available in the database for the endpoint.",
                  "**data_returned**: An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.",
                  [
                    "**implementation**: Information on the server implementation",
                    {
                      "$ul": [
                        "**homepage**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the homepage of the implementation.",
                        "**issue_tracker**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation's issue tracker.",
                        [
                          "**maintainer**: Details about the maintainer of the implementation",
                          {
                            "$ul": [
                              "**email**: the maintainer's email address"
                            ]
                          }
                        ],
                        "**name**: name of the implementation",
                        "**source_url**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation source, either downloadable archive or version control system.",
                        "**version**: version string of the current implementation"
                      ]
                    }
                  ],
                  "**last_id**: a string containing the last ID returned",
                  "**more_data_available**: `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).",
                  [
                    "**provider**: Information on the database provider of the implementation.",
                    {
                      "$ul": [
                        "**description**: a longer description of the database provider",
                        "**homepage**: a [JSON API links object](http://jsonapi.org/format/1.0#document-links) pointing to homepage of the database provider, either directly as a string, or as a link object.",
                        "**name**: a short name for the database provider",
                        "**prefix**: database-provider-specific prefix as found in section Database-Provider-Specific Namespace Prefixes."
                      ]
                    }
                  ],
                  [
                    "**query**: Information on the query that was requested.",
                    {
                      "$ul": [
                        "**representation**: A string with the part of the URL following the versioned or unversioned base URL that serves the API."
                      ]
                    }
                  ],
                  "**response_message**: response string from the server",
                  "**schema**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) that points to a schema for the response.",
                  "**time_stamp**: A timestamp containing the date and time at which the query was executed.",
                  "**warnings**: A list of warning resource objects representing non-critical errors or warnings."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "ErrorResponse"
        },
        "errors MUST be present and data MUST be skipped",
        "**Key properties:**",
        {
          "$ul": [
            "**data**: Outputted Data",
            "**errors**: A list of OPTIMADE-specific JSON API error objects, where the field detail MUST be present.",
            "**included**: A list of unique included resources",
            [
              "**jsonapi**: An object describing the server's implementation",
              {
                "$ul": [
                  "**meta**: Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "**version**: Version of the json API used (default: 1.0)"
                ]
              }
            ],
            [
              "**links**: A set of Links objects, possibly including pagination",
              {
                "$ul": [
                  "**first**: The first page of data",
                  "**last**: The last page of data",
                  "**next**: The next page of data",
                  "**prev**: The previous page of data",
                  "**related**: A related resource link",
                  "**self**: A link to itself"
                ]
              }
            ],
            [
              "**meta**: A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta)",
              {
                "$ul": [
                  "**api_version**: Presently used full version of the OPTIMADE API.",
                  "**data_available**: An integer containing the total number of data resource objects available in the database for the endpoint.",
                  "**data_returned**: An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.",
                  [
                    "**implementation**: Information on the server implementation",
                    {
                      "$ul": [
                        "**homepage**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the homepage of the implementation.",
                        "**issue_tracker**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation's issue tracker.",
                        [
                          "**maintainer**: Details about the maintainer of the implementation",
                          {
                            "$ul": [
                              "**email**: the maintainer's email address"
                            ]
                          }
                        ],
                        "**name**: name of the implementation",
                        "**source_url**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation source, either downloadable archive or version control system.",
                        "**version**: version string of the current implementation"
                      ]
                    }
                  ],
                  "**last_id**: a string containing the last ID returned",
                  "**more_data_available**: `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).",
                  [
                    "**provider**: Information on the database provider of the implementation.",
                    {
                      "$ul": [
                        "**description**: a longer description of the database provider",
                        "**homepage**: a [JSON API links object](http://jsonapi.org/format/1.0#document-links) pointing to homepage of the database provider, either directly as a string, or as a link object.",
                        "**name**: a short name for the database provider",
                        "**prefix**: database-provider-specific prefix as found in section Database-Provider-Specific Namespace Prefixes."
                      ]
                    }
                  ],
                  [
                    "**query**: Information on the query that was requested.",
                    {
                      "$ul": [
                        "**representation**: A string with the part of the URL following the versioned or unversioned base URL that serves the API."
                      ]
                    }
                  ],
                  "**response_message**: response string from the server",
                  "**schema**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) that points to a schema for the response.",
                  "**time_stamp**: A timestamp containing the date and time at which the query was executed.",
                  "**warnings**: A list of warning resource objects representing non-critical errors or warnings."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "ErrorResponse"
        },
        "errors MUST be present and data MUST be skipped",
        "**Key properties:**",
        {
          "$ul": [
            "**data**: Outputted Data",
            "**errors**: A list of OPTIMADE-specific JSON API error objects, where the field detail MUST be present.",
            "**included**: A list of unique included resources",
            [
              "**jsonapi**: An object describing the server's implementation",
              {
                "$ul": [
                  "**meta**: Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "**version**: Version of the json API used (default: 1.0)"
                ]
              }
            ],
            [
              "**links**: A set of Links objects, possibly including pagination",
              {
                "$ul": [
                  "**first**: The first page of data",
                  "**last**: The last page of data",
                  "**next**: The next page of data",
                  "**prev**: The previous page of data",
                  "**related**: A related resource link",
                  "**self**: A link to itself"
                ]
              }
            ],
            [
              "**meta**: A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta)",
              {
                "$ul": [
                  "**api_version**: Presently used full version of the OPTIMADE API.",
                  "**data_available**: An integer containing the total number of data resource objects available in the database for the endpoint.",
                  "**data_returned**: An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.",
                  [
                    "**implementation**: Information on the server implementation",
                    {
                      "$ul": [
                        "**homepage**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the homepage of the implementation.",
                        "**issue_tracker**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation's issue tracker.",
                        [
                          "**maintainer**: Details about the maintainer of the implementation",
                          {
                            "$ul": [
                              "**email**: the maintainer's email address"
                            ]
                          }
                        ],
                        "**name**: name of the implementation",
                        "**source_url**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation source, either downloadable archive or version control system.",
                        "**version**: version string of the current implementation"
                      ]
                    }
                  ],
                  "**last_id**: a string containing the last ID returned",
                  "**more_data_available**: `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).",
                  [
                    "**provider**: Information on the database provider of the implementation.",
                    {
                      "$ul": [
                        "**description**: a longer description of the database provider",
                        "**homepage**: a [JSON API links object](http://jsonapi.org/format/1.0#document-links) pointing to homepage of the database provider, either directly as a string, or as a link object.",
                        "**name**: a short name for the database provider",
                        "**prefix**: database-provider-specific prefix as found in section Database-Provider-Specific Namespace Prefixes."
                      ]
                    }
                  ],
                  [
                    "**query**: Information on the query that was requested.",
                    {
                      "$ul": [
                        "**representation**: A string with the part of the URL following the versioned or unversioned base URL that serves the API."
                      ]
                    }
                  ],
                  "**response_message**: response string from the server",
                  "**schema**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) that points to a schema for the response.",
                  "**time_stamp**: A timestamp containing the date and time at which the query was executed.",
                  "**warnings**: A list of warning resource objects representing non-critical errors or warnings."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "422": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "ErrorResponse"
        },
        "errors MUST be present and data MUST be skipped",
        "**Key properties:**",
        {
          "$ul": [
            "**data**: Outputted Data",
            "**errors**: A list of OPTIMADE-specific JSON API error objects, where the field detail MUST be present.",
            "**included**: A list of unique included resources",
            [
              "**jsonapi**: An object describing the server's implementation",
              {
                "$ul": [
                  "**meta**: Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "**version**: Version of the json API used (default: 1.0)"
                ]
              }
            ],
            [
              "**links**: A set of Links objects, possibly including pagination",
              {
                "$ul": [
                  "**first**: The first page of data",
                  "**last**: The last page of data",
                  "**next**: The next page of data",
                  "**prev**: The previous page of data",
                  "**related**: A related resource link",
                  "**self**: A link to itself"
                ]
              }
            ],
            [
              "**meta**: A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta)",
              {
                "$ul": [
                  "**api_version**: Presently used full version of the OPTIMADE API.",
                  "**data_available**: An integer containing the total number of data resource objects available in the database for the endpoint.",
                  "**data_returned**: An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.",
                  [
                    "**implementation**: Information on the server implementation",
                    {
                      "$ul": [
                        "**homepage**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the homepage of the implementation.",
                        "**issue_tracker**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation's issue tracker.",
                        [
                          "**maintainer**: Details about the maintainer of the implementation",
                          {
                            "$ul": [
                              "**email**: the maintainer's email address"
                            ]
                          }
                        ],
                        "**name**: name of the implementation",
                        "**source_url**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation source, either downloadable archive or version control system.",
                        "**version**: version string of the current implementation"
                      ]
                    }
                  ],
                  "**last_id**: a string containing the last ID returned",
                  "**more_data_available**: `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).",
                  [
                    "**provider**: Information on the database provider of the implementation.",
                    {
                      "$ul": [
                        "**description**: a longer description of the database provider",
                        "**homepage**: a [JSON API links object](http://jsonapi.org/format/1.0#document-links) pointing to homepage of the database provider, either directly as a string, or as a link object.",
                        "**name**: a short name for the database provider",
                        "**prefix**: database-provider-specific prefix as found in section Database-Provider-Specific Namespace Prefixes."
                      ]
                    }
                  ],
                  [
                    "**query**: Information on the query that was requested.",
                    {
                      "$ul": [
                        "**representation**: A string with the part of the URL following the versioned or unversioned base URL that serves the API."
                      ]
                    }
                  ],
                  "**response_message**: response string from the server",
                  "**schema**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) that points to a schema for the response.",
                  "**time_stamp**: A timestamp containing the date and time at which the query was executed.",
                  "**warnings**: A list of warning resource objects representing non-critical errors or warnings."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "ErrorResponse"
        },
        "errors MUST be present and data MUST be skipped",
        "**Key properties:**",
        {
          "$ul": [
            "**data**: Outputted Data",
            "**errors**: A list of OPTIMADE-specific JSON API error objects, where the field detail MUST be present.",
            "**included**: A list of unique included resources",
            [
              "**jsonapi**: An object describing the server's implementation",
              {
                "$ul": [
                  "**meta**: Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "**version**: Version of the json API used (default: 1.0)"
                ]
              }
            ],
            [
              "**links**: A set of Links objects, possibly including pagination",
              {
                "$ul": [
                  "**first**: The first page of data",
                  "**last**: The last page of data",
                  "**next**: The next page of data",
                  "**prev**: The previous page of data",
                  "**related**: A related resource link",
                  "**self**: A link to itself"
                ]
              }
            ],
            [
              "**meta**: A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta)",
              {
                "$ul": [
                  "**api_version**: Presently used full version of the OPTIMADE API.",
                  "**data_available**: An integer containing the total number of data resource objects available in the database for the endpoint.",
                  "**data_returned**: An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.",
                  [
                    "**implementation**: Information on the server implementation",
                    {
                      "$ul": [
                        "**homepage**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the homepage of the implementation.",
                        "**issue_tracker**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation's issue tracker.",
                        [
                          "**maintainer**: Details about the maintainer of the implementation",
                          {
                            "$ul": [
                              "**email**: the maintainer's email address"
                            ]
                          }
                        ],
                        "**name**: name of the implementation",
                        "**source_url**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation source, either downloadable archive or version control system.",
                        "**version**: version string of the current implementation"
                      ]
                    }
                  ],
                  "**last_id**: a string containing the last ID returned",
                  "**more_data_available**: `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).",
                  [
                    "**provider**: Information on the database provider of the implementation.",
                    {
                      "$ul": [
                        "**description**: a longer description of the database provider",
                        "**homepage**: a [JSON API links object](http://jsonapi.org/format/1.0#document-links) pointing to homepage of the database provider, either directly as a string, or as a link object.",
                        "**name**: a short name for the database provider",
                        "**prefix**: database-provider-specific prefix as found in section Database-Provider-Specific Namespace Prefixes."
                      ]
                    }
                  ],
                  [
                    "**query**: Information on the query that was requested.",
                    {
                      "$ul": [
                        "**representation**: A string with the part of the URL following the versioned or unversioned base URL that serves the API."
                      ]
                    }
                  ],
                  "**response_message**: response string from the server",
                  "**schema**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) that points to a schema for the response.",
                  "**time_stamp**: A timestamp containing the date and time at which the query was executed.",
                  "**warnings**: A list of warning resource objects representing non-critical errors or warnings."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "501": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "ErrorResponse"
        },
        "errors MUST be present and data MUST be skipped",
        "**Key properties:**",
        {
          "$ul": [
            "**data**: Outputted Data",
            "**errors**: A list of OPTIMADE-specific JSON API error objects, where the field detail MUST be present.",
            "**included**: A list of unique included resources",
            [
              "**jsonapi**: An object describing the server's implementation",
              {
                "$ul": [
                  "**meta**: Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "**version**: Version of the json API used (default: 1.0)"
                ]
              }
            ],
            [
              "**links**: A set of Links objects, possibly including pagination",
              {
                "$ul": [
                  "**first**: The first page of data",
                  "**last**: The last page of data",
                  "**next**: The next page of data",
                  "**prev**: The previous page of data",
                  "**related**: A related resource link",
                  "**self**: A link to itself"
                ]
              }
            ],
            [
              "**meta**: A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta)",
              {
                "$ul": [
                  "**api_version**: Presently used full version of the OPTIMADE API.",
                  "**data_available**: An integer containing the total number of data resource objects available in the database for the endpoint.",
                  "**data_returned**: An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.",
                  [
                    "**implementation**: Information on the server implementation",
                    {
                      "$ul": [
                        "**homepage**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the homepage of the implementation.",
                        "**issue_tracker**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation's issue tracker.",
                        [
                          "**maintainer**: Details about the maintainer of the implementation",
                          {
                            "$ul": [
                              "**email**: the maintainer's email address"
                            ]
                          }
                        ],
                        "**name**: name of the implementation",
                        "**source_url**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation source, either downloadable archive or version control system.",
                        "**version**: version string of the current implementation"
                      ]
                    }
                  ],
                  "**last_id**: a string containing the last ID returned",
                  "**more_data_available**: `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).",
                  [
                    "**provider**: Information on the database provider of the implementation.",
                    {
                      "$ul": [
                        "**description**: a longer description of the database provider",
                        "**homepage**: a [JSON API links object](http://jsonapi.org/format/1.0#document-links) pointing to homepage of the database provider, either directly as a string, or as a link object.",
                        "**name**: a short name for the database provider",
                        "**prefix**: database-provider-specific prefix as found in section Database-Provider-Specific Namespace Prefixes."
                      ]
                    }
                  ],
                  [
                    "**query**: Information on the query that was requested.",
                    {
                      "$ul": [
                        "**representation**: A string with the part of the URL following the versioned or unversioned base URL that serves the API."
                      ]
                    }
                  ],
                  "**response_message**: response string from the server",
                  "**schema**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) that points to a schema for the response.",
                  "**time_stamp**: A timestamp containing the date and time at which the query was executed.",
                  "**warnings**: A list of warning resource objects representing non-critical errors or warnings."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "553": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "ErrorResponse"
        },
        "errors MUST be present and data MUST be skipped",
        "**Key properties:**",
        {
          "$ul": [
            "**data**: Outputted Data",
            "**errors**: A list of OPTIMADE-specific JSON API error objects, where the field detail MUST be present.",
            "**included**: A list of unique included resources",
            [
              "**jsonapi**: An object describing the server's implementation",
              {
                "$ul": [
                  "**meta**: Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "**version**: Version of the json API used (default: 1.0)"
                ]
              }
            ],
            [
              "**links**: A set of Links objects, possibly including pagination",
              {
                "$ul": [
                  "**first**: The first page of data",
                  "**last**: The last page of data",
                  "**next**: The next page of data",
                  "**prev**: The previous page of data",
                  "**related**: A related resource link",
                  "**self**: A link to itself"
                ]
              }
            ],
            [
              "**meta**: A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta)",
              {
                "$ul": [
                  "**api_version**: Presently used full version of the OPTIMADE API.",
                  "**data_available**: An integer containing the total number of data resource objects available in the database for the endpoint.",
                  "**data_returned**: An integer containing the total number of data resource objects returned for the current `filter` query, independent of pagination.",
                  [
                    "**implementation**: Information on the server implementation",
                    {
                      "$ul": [
                        "**homepage**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the homepage of the implementation.",
                        "**issue_tracker**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation's issue tracker.",
                        [
                          "**maintainer**: Details about the maintainer of the implementation",
                          {
                            "$ul": [
                              "**email**: the maintainer's email address"
                            ]
                          }
                        ],
                        "**name**: name of the implementation",
                        "**source_url**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) pointing to the implementation source, either downloadable archive or version control system.",
                        "**version**: version string of the current implementation"
                      ]
                    }
                  ],
                  "**last_id**: a string containing the last ID returned",
                  "**more_data_available**: `false` if the response contains all data for the request (e.g., a request issued to a single entry endpoint, or a `filter` query at the last page of a paginated response) and `true` if the response is incomplete in the sense that multiple objects match the request, and not all of them have been included in the response (e.g., a query with multiple pages that is not at the last page).",
                  [
                    "**provider**: Information on the database provider of the implementation.",
                    {
                      "$ul": [
                        "**description**: a longer description of the database provider",
                        "**homepage**: a [JSON API links object](http://jsonapi.org/format/1.0#document-links) pointing to homepage of the database provider, either directly as a string, or as a link object.",
                        "**name**: a short name for the database provider",
                        "**prefix**: database-provider-specific prefix as found in section Database-Provider-Specific Namespace Prefixes."
                      ]
                    }
                  ],
                  [
                    "**query**: Information on the query that was requested.",
                    {
                      "$ul": [
                        "**representation**: A string with the part of the URL following the versioned or unversioned base URL that serves the API."
                      ]
                    }
                  ],
                  "**response_message**: response string from the server",
                  "**schema**: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links) that points to a schema for the response.",
                  "**time_stamp**: A timestamp containing the date and time at which the query was executed.",
                  "**warnings**: A list of warning resource objects representing non-critical errors or warnings."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
