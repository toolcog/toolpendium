{
  "name": "ContainerInspect",
  "description": "Return low-level information about a container.",
  "parameters": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "ID or name of the container"
      },
      "size": {
        "default": false,
        "type": "boolean",
        "description": "Return the size of container as fields `SizeRw` and `SizeRootFs`"
      }
    },
    "required": [
      "id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "/v1.33/containers/{id}/json{?size}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**AppArmorProfile**",
            "**Args**: The arguments to the command being run",
            [
              "**Config**: Configuration for a container that is portable between hosts",
              {
                "$ul": [
                  "**ArgsEscaped**: Command is already escaped (Windows only)",
                  "**AttachStderr**: Whether to attach to `stderr`. (default: true)",
                  "**AttachStdin**: Whether to attach to `stdin`. (default: false)",
                  "**AttachStdout**: Whether to attach to `stdout`. (default: true)",
                  "**Cmd**: Command to run specified as a string or an array of strings.",
                  "**Domainname**: The domain name to use for the container.",
                  "**Entrypoint**: The entry point for the container as a string or an array of strings.",
                  "**Env**: A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.",
                  "**ExposedPorts**: An object mapping ports to an empty object in the form:",
                  [
                    "**Healthcheck**: A test to perform to check that the container is healthy.",
                    {
                      "$ul": [
                        "**Interval**: The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.",
                        "**Retries**: The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit.",
                        "**StartPeriod**: Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.",
                        "**Test**: The test to perform. Possible values are:",
                        "**Timeout**: The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit."
                      ]
                    }
                  ],
                  "**Hostname**: The hostname to use for the container, as a valid RFC 1123 hostname.",
                  "**Image**: The name of the image to use when creating the container",
                  "**Labels**: User-defined key/value metadata.",
                  "**MacAddress**: MAC address of the container.",
                  "**NetworkDisabled**: Disable networking for the container.",
                  "**OnBuild**: `ONBUILD` metadata that were defined in the image's `Dockerfile`.",
                  "**OpenStdin**: Open `stdin` (default: false)",
                  "**Shell**: Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.",
                  "**StdinOnce**: Close `stdin` after one attached client disconnects (default: false)",
                  "**StopSignal**: Signal to stop a container as a string or unsigned integer. (default: SIGTERM)",
                  "**StopTimeout**: Timeout to stop a container in seconds. (default: 10)",
                  "**Tty**: Attach standard streams to a TTY, including `stdin` if it is not closed. (default: false)",
                  "**User**: The user that commands are run as inside the container.",
                  [
                    "**Volumes**: An object mapping mount point paths inside the container to empty objects.",
                    {
                      "$ul": [
                        "**additionalProperties** (default: [object Object])"
                      ]
                    }
                  ],
                  "**WorkingDir**: The working directory for commands to run in."
                ]
              }
            ],
            "**Created**: The time the container was created",
            "**Driver**",
            "**ExecIDs**",
            [
              "**GraphDriver**: Information about a container's graph driver.",
              {
                "$ul": [
                  "**Data**",
                  "**Name**"
                ]
              }
            ],
            [
              "**HostConfig**: A container's resources (cgroups config, ulimits, etc)",
              {
                "$ul": [
                  "**BlkioDeviceReadBps**: Limit read rate (bytes per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.",
                  "**BlkioDeviceReadIOps**: Limit read rate (IO per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.",
                  "**BlkioDeviceWriteBps**: Limit write rate (bytes per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.",
                  "**BlkioDeviceWriteIOps**: Limit write rate (IO per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.",
                  "**BlkioWeight**: Block IO weight (relative weight).",
                  "**BlkioWeightDevice**: Block IO weight (relative device weight) in the form `[{\"Path\": \"device_path\", \"Weight\": weight}]`.",
                  "**CgroupParent**: Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.",
                  "**CpuCount**: The number of usable CPUs (Windows only).",
                  "**CpuPercent**: The usable percentage of the available CPUs (Windows only).",
                  "**CpuPeriod**: The length of a CPU period in microseconds.",
                  "**CpuQuota**: Microseconds of CPU time that the container can get in a CPU period.",
                  "**CpuRealtimePeriod**: The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.",
                  "**CpuRealtimeRuntime**: The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.",
                  "**CpuShares**: An integer value representing this container's relative CPU weight versus other containers.",
                  "**CpusetCpus**: CPUs in which to allow execution (e.g., `0-3`, `0,1`)",
                  "**CpusetMems**: Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.",
                  "**DeviceCgroupRules**: a list of cgroup rules to apply to the container",
                  "**Devices**: A list of devices to add to the container.",
                  "**DiskQuota**: Disk limit (in bytes).",
                  "**IOMaximumBandwidth**: Maximum IO in bytes per second for the container system drive (Windows only)",
                  "**IOMaximumIOps**: Maximum IOps for the container system drive (Windows only)",
                  "**KernelMemory**: Kernel memory limit in bytes.",
                  "**Memory**: Memory limit in bytes. (default: 0)",
                  "**MemoryReservation**: Memory soft limit in bytes.",
                  "**MemorySwap**: Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.",
                  "**MemorySwappiness**: Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.",
                  "**NanoCPUs**: CPU quota in units of 10<sup>-9</sup> CPUs.",
                  "**OomKillDisable**: Disable OOM Killer for the container.",
                  "**PidsLimit**: Tune a container's pids limit. Set -1 for unlimited.",
                  "**Ulimits**: A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"",
                  "**AutoRemove**: Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.",
                  "**Binds**: A list of volume bindings for this container. Each volume binding is a string in one of these forms:",
                  "**CapAdd**: A list of kernel capabilities to add to the container.",
                  "**CapDrop**: A list of kernel capabilities to drop from the container.",
                  "**Cgroup**: Cgroup to use for the container.",
                  "**ConsoleSize**: Initial console size, as an `[height, width]` array. (Windows only)",
                  "**ContainerIDFile**: Path to a file where the container ID is written",
                  "**Dns**: A list of DNS servers for the container to use.",
                  "**DnsOptions**: A list of DNS options.",
                  "**DnsSearch**: A list of DNS search domains.",
                  "**ExtraHosts**: A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.",
                  "**GroupAdd**: A list of additional groups that the container process will run as.",
                  "**IpcMode**: IPC sharing mode for the container. Possible values are:",
                  "**Isolation**: Isolation technology of the container. (Windows only)",
                  "**Links**: A list of links for the container in the form `container_name:alias`.",
                  [
                    "**LogConfig**: The logging configuration for this container",
                    {
                      "$ul": [
                        "**Config**",
                        "**Type**"
                      ]
                    }
                  ],
                  "**Mounts**: Specification for mounts to be added to the container.",
                  "**NetworkMode**: Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.",
                  "**OomScoreAdj**: An integer value containing the score given to the container in order to tune OOM killer preferences.",
                  "**PidMode**: Set the PID (Process) Namespace mode for the container. It can be either:",
                  "**PortBindings**: A map of exposed container ports and the host port they should map to.",
                  "**Privileged**: Gives the container full access to the host.",
                  "**PublishAllPorts**: Allocates a random host port for all of a container's exposed ports.",
                  "**ReadonlyRootfs**: Mount the container's root filesystem as read only.",
                  [
                    "**RestartPolicy**: The behavior to apply when the container exits. The default is not to restart.",
                    {
                      "$ul": [
                        "**MaximumRetryCount**: If `on-failure` is used, the number of times to retry before giving up",
                        "**Name**: - Empty string means not to restart"
                      ]
                    }
                  ],
                  "**Runtime**: Runtime to use with this container.",
                  "**SecurityOpt**: A list of string values to customize labels for MLS systems, such as SELinux.",
                  "**ShmSize**: Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.",
                  "**StorageOpt**: Storage driver options for this container, in the form `{\"size\": \"120G\"}`.",
                  "**Sysctls**: A list of kernel parameters (sysctls) to set in the container. For example: `{\"net.ipv4.ip_forward\": \"1\"}`",
                  "**Tmpfs**: A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ \"/run\": \"rw,noexec,nosuid,size=65536k\" }`.",
                  "**UTSMode**: UTS namespace to use for the container.",
                  "**UsernsMode**: Sets the usernamespace mode for the container when usernamespace remapping option is enabled.",
                  "**VolumeDriver**: Driver that this container uses to mount volumes.",
                  "**VolumesFrom**: A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`."
                ]
              }
            ],
            "**HostnamePath**",
            "**HostsPath**",
            "**Id**: The ID of the container",
            "**Image**: The container's image",
            "**LogPath**",
            "**MountLabel**",
            "**Mounts**",
            "**Name**",
            [
              "**NetworkSettings**: NetworkSettings exposes the network settings in the API",
              {
                "$ul": [
                  "**Bridge**: Name of the network'a bridge (for example, `docker0`).",
                  "**EndpointID**: EndpointID uniquely represents a service endpoint in a Sandbox.",
                  "**Gateway**: Gateway address for the default \"bridge\" network.",
                  "**GlobalIPv6Address**: Global IPv6 address for the default \"bridge\" network.",
                  "**GlobalIPv6PrefixLen**: Mask length of the global IPv6 address.",
                  "**HairpinMode**: Indicates if hairpin NAT should be enabled on the virtual interface.",
                  "**IPAddress**: IPv4 address for the default \"bridge\" network.",
                  "**IPPrefixLen**: Mask length of the IPv4 address.",
                  "**IPv6Gateway**: IPv6 gateway address for this network.",
                  "**LinkLocalIPv6Address**: IPv6 unicast address using the link-local prefix.",
                  "**LinkLocalIPv6PrefixLen**: Prefix length of the IPv6 unicast address.",
                  "**MacAddress**: MAC address for the container on the default \"bridge\" network.",
                  "**Networks**: Information about all networks that the container is connected to.",
                  "**Ports**: PortMap describes the mapping of container ports to host ports, using the",
                  "**SandboxID**: SandboxID uniquely represents a container's network stack.",
                  "**SandboxKey**: SandboxKey identifies the sandbox",
                  "**SecondaryIPAddresses**: ",
                  "**SecondaryIPv6Addresses**: "
                ]
              }
            ],
            "**Node**: TODO",
            "**Path**: The path to the command being run",
            "**ProcessLabel**",
            "**ResolvConfPath**",
            "**RestartCount**",
            "**SizeRootFs**: The total size of all the files in this container.",
            "**SizeRw**: The size of files that have been created or changed by this container.",
            [
              "**State**: The state of the container.",
              {
                "$ul": [
                  "**Dead**",
                  "**Error**",
                  "**ExitCode**: The last exit code of this container",
                  "**FinishedAt**: The time when this container last exited.",
                  "**OOMKilled**: Whether this container has been killed because it ran out of memory.",
                  "**Paused**: Whether this container is paused.",
                  "**Pid**: The process ID of this container",
                  "**Restarting**: Whether this container is restarting.",
                  "**Running**: Whether this container is running.",
                  "**StartedAt**: The time when this container was last started.",
                  "**Status**: The status of the container. For example, `\"running\"` or `\"exited\"`."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
