{
  "name": "NodeInspect",
  "description": "Inspect a node",
  "parameters": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "The ID or name of the node"
      }
    },
    "required": [
      "id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "/v1.33/nodes/{id}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**CreatedAt**: Date and time at which the node was added to the swarm in",
            [
              "**Description**: NodeDescription encapsulates the properties of the Node as reported by the",
              {
                "$ul": [
                  [
                    "**Engine**: EngineDescription provides information about an engine.",
                    {
                      "$ul": [
                        "**EngineVersion**",
                        "**Labels**",
                        "**Plugins**"
                      ]
                    }
                  ],
                  "**Hostname**",
                  [
                    "**Platform**: Platform represents the platform (Arch/OS).",
                    {
                      "$ul": [
                        "**Architecture**: Architecture represents the hardware architecture (for example,",
                        "**OS**: OS represents the Operating System (for example, `linux` or `windows`)."
                      ]
                    }
                  ],
                  [
                    "**Resources**: An object describing the resources which can be advertised by a node and requested by a task",
                    {
                      "$ul": [
                        "**GenericResources**: User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`)",
                        "**MemoryBytes**",
                        "**NanoCPUs**"
                      ]
                    }
                  ],
                  [
                    "**TLSInfo**: Information about the issuer of leaf TLS certificates and the trusted root CA certificate",
                    {
                      "$ul": [
                        "**CertIssuerPublicKey**: The base64-url-safe-encoded raw public key bytes of the issuer",
                        "**CertIssuerSubject**: The base64-url-safe-encoded raw subject bytes of the issuer",
                        "**TrustRoot**: The root CA certificate(s) that are used to validate leaf TLS certificates"
                      ]
                    }
                  ]
                ]
              }
            ],
            "**ID**",
            [
              "**ManagerStatus**: ManagerStatus represents the status of a manager.",
              {
                "$ul": [
                  "**Addr**: The IP address and port at which the manager is reachable.",
                  "**Leader** (default: false)",
                  "**Reachability**: Reachability represents the reachability of a node."
                ]
              }
            ],
            [
              "**Spec**",
              {
                "$ul": [
                  "**Availability**: Availability of the node.",
                  "**Labels**: User-defined key/value metadata.",
                  "**Name**: Name for the node.",
                  "**Role**: Role of the node."
                ]
              }
            ],
            [
              "**Status**: NodeStatus represents the status of a node.",
              {
                "$ul": [
                  "**Addr**: IP address of the node.",
                  "**Message**",
                  "**State**: NodeState represents the state of a node."
                ]
              }
            ],
            "**UpdatedAt**: Date and time at which the node was last updated in",
            [
              "**Version**: The version number of the object such as node, service, etc. This is needed to avoid conflicting writes.",
              {
                "$ul": [
                  "**Index**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "503": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
