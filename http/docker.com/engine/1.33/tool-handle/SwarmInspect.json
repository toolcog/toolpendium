{
  "name": "SwarmInspect",
  "description": "Inspect swarm",
  "parameters": {
    "type": "object"
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "/v1.33/swarm"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "ClusterInfo represents information about the swarm as is returned by the\n\"/info\" endpoint. Join-tokens are not included.\n",
        "**Key properties:**",
        {
          "$ul": [
            "**CreatedAt**: Date and time at which the swarm was initialised in",
            "**ID**: The ID of the swarm.",
            "**RootRotationInProgress**: Whether there is currently a root CA rotation in progress for the swarm",
            [
              "**Spec**: User modifiable swarm configuration.",
              {
                "$ul": [
                  [
                    "**CAConfig**: CA configuration.",
                    {
                      "$ul": [
                        "**ExternalCAs**: Configuration for forwarding signing requests to an external certificate authority.",
                        "**ForceRotate**: An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in `SigningCACert` and `SigningCAKey`",
                        "**NodeCertExpiry**: The duration node certificates are issued for.",
                        "**SigningCACert**: The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format.",
                        "**SigningCAKey**: The desired signing CA key for all swarm node TLS leaf certificates, in PEM format."
                      ]
                    }
                  ],
                  [
                    "**Dispatcher**: Dispatcher configuration.",
                    {
                      "$ul": [
                        "**HeartbeatPeriod**: The delay for an agent to send a heartbeat to the dispatcher."
                      ]
                    }
                  ],
                  [
                    "**EncryptionConfig**: Parameters related to encryption-at-rest.",
                    {
                      "$ul": [
                        "**AutoLockManagers**: If set, generate a key and use it to lock data stored on the managers."
                      ]
                    }
                  ],
                  "**Labels**: User-defined key/value metadata.",
                  "**Name**: Name of the swarm.",
                  [
                    "**Orchestration**: Orchestration configuration.",
                    {
                      "$ul": [
                        "**TaskHistoryRetentionLimit**: The number of historic tasks to keep per instance or node. If negative, never remove completed or failed tasks."
                      ]
                    }
                  ],
                  [
                    "**Raft**: Raft configuration.",
                    {
                      "$ul": [
                        "**ElectionTick**: The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.",
                        "**HeartbeatTick**: The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.",
                        "**KeepOldSnapshots**: The number of snapshots to keep beyond the current snapshot.",
                        "**LogEntriesForSlowFollowers**: The number of log entries to keep around to sync up slow followers after a snapshot is created.",
                        "**SnapshotInterval**: The number of log entries between snapshots."
                      ]
                    }
                  ],
                  [
                    "**TaskDefaults**: Defaults for creating tasks in this cluster.",
                    {
                      "$ul": [
                        [
                          "**LogDriver**: The log driver to use for tasks created in the orchestrator if",
                          {
                            "$ul": [
                              "**Name**: The log driver to use as a default for new tasks.",
                              "**Options**: Driver-specific options for the selectd log driver, specified"
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**TLSInfo**: Information about the issuer of leaf TLS certificates and the trusted root CA certificate",
              {
                "$ul": [
                  "**CertIssuerPublicKey**: The base64-url-safe-encoded raw public key bytes of the issuer",
                  "**CertIssuerSubject**: The base64-url-safe-encoded raw subject bytes of the issuer",
                  "**TrustRoot**: The root CA certificate(s) that are used to validate leaf TLS certificates"
                ]
              }
            ],
            "**UpdatedAt**: Date and time at which the swarm was last updated in",
            [
              "**Version**: The version number of the object such as node, service, etc. This is needed to avoid conflicting writes.",
              {
                "$ul": [
                  "**Index**"
                ]
              }
            ],
            [
              "**JoinTokens**: JoinTokens contains the tokens workers and managers need to join the swarm.",
              {
                "$ul": [
                  "**Manager**: The token managers can use to join the swarm.",
                  "**Worker**: The token workers can use to join the swarm."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "503": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
