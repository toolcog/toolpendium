{
  "name": "NetworkCreate",
  "description": "Create a network",
  "parameters": {
    "type": "object",
    "properties": {
      "body": {
        "example": {
          "Attachable": false,
          "CheckDuplicate": false,
          "Driver": "bridge",
          "EnableIPv6": true,
          "IPAM": {
            "Config": [
              {
                "Gateway": "172.20.10.11",
                "IPRange": "172.20.10.0/24",
                "Subnet": "172.20.0.0/16"
              },
              {
                "Gateway": "2001:db8:abcd::1011",
                "Subnet": "2001:db8:abcd::/64"
              }
            ],
            "Driver": "default",
            "Options": {
              "foo": "bar"
            }
          },
          "Ingress": false,
          "Internal": true,
          "Labels": {
            "com.example.some-label": "some-value",
            "com.example.some-other-label": "some-other-value"
          },
          "Name": "isolated_nw",
          "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
          }
        },
        "properties": {
          "Attachable": {
            "description": "Globally scoped network is manually attachable by regular containers from workers in swarm mode.",
            "type": "boolean"
          },
          "CheckDuplicate": {
            "description": "Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions.",
            "type": "boolean"
          },
          "Driver": {
            "default": "bridge",
            "description": "Name of the network driver plugin to use.",
            "type": "string"
          },
          "EnableIPv6": {
            "description": "Enable IPv6 on the network.",
            "type": "boolean"
          },
          "IPAM": {
            "$ref": "#/$defs/IPAM"
          },
          "Ingress": {
            "description": "Ingress network is the network which provides the routing-mesh in swarm mode.",
            "type": "boolean"
          },
          "Internal": {
            "description": "Restrict external access to the network.",
            "type": "boolean"
          },
          "Labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User-defined key/value metadata.",
            "type": "object"
          },
          "Name": {
            "description": "The network's name.",
            "type": "string"
          },
          "Options": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Network specific options to be used by the drivers.",
            "type": "object"
          }
        },
        "required": [
          "Name"
        ],
        "type": "object",
        "description": "Network configuration"
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "IPAM": {
        "properties": {
          "Config": {
            "description": "List of IPAM configuration options, specified as a map: `{\"Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\": <device_name:IP address>}`",
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array"
          },
          "Driver": {
            "default": "default",
            "description": "Name of the IPAM driver to use.",
            "type": "string"
          },
          "Options": {
            "description": "Driver-specific options, specified as a map.",
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "/v1.33/networks/create"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Id**: The ID of the created network.",
            "**Warning**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
