{
  "name": "SystemInfo",
  "description": "Get system information",
  "parameters": {
    "type": "object"
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "/v1.33/info"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Architecture**: Hardware architecture of the host, as returned by the Go runtime",
            "**BridgeNfIp6tables**: Indicates if `bridge-nf-call-ip6tables` is available on the host.",
            "**BridgeNfIptables**: Indicates if `bridge-nf-call-iptables` is available on the host.",
            "**CPUSet**: Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.",
            "**CPUShares**: Indicates if CPU Shares limiting is supported by the host.",
            "**CgroupDriver**: The driver to use for managing cgroups. (default: cgroupfs)",
            "**ClusterAdvertise**: The network endpoint that the Engine advertises for the purpose of",
            "**ClusterStore**: URL of the distributed storage backend.",
            [
              "**ContainerdCommit**: Commit holds the Git-commit (SHA1) that a binary was built from, as",
              {
                "$ul": [
                  "**Expected**: Commit ID of external tool expected by dockerd as set at build time.",
                  "**ID**: Actual commit ID of external tool."
                ]
              }
            ],
            "**Containers**: Total number of containers on the host.",
            "**ContainersPaused**: Number of containers with status `\"paused\"`.",
            "**ContainersRunning**: Number of containers with status `\"running\"`.",
            "**ContainersStopped**: Number of containers with status `\"stopped\"`.",
            "**CpuCfsPeriod**: Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.",
            "**CpuCfsQuota**: Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.",
            "**Debug**: Indicates if the daemon is running in debug-mode / with debug-level logging enabled.",
            "**DefaultRuntime**: Name of the default OCI runtime that is used when starting containers. (default: runc)",
            "**DockerRootDir**: Root directory of persistent Docker state.",
            "**Driver**: Name of the storage driver in use.",
            "**DriverStatus**: Information specific to the storage driver, provided as",
            "**ExperimentalBuild**: Indicates if experimental features are enabled on the daemon.",
            "**GenericResources**: User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`)",
            "**HttpProxy**: HTTP-proxy configured for the daemon. This value is obtained from the",
            "**HttpsProxy**: HTTPS-proxy configured for the daemon. This value is obtained from the",
            "**ID**: Unique identifier of the daemon.",
            "**IPv4Forwarding**: Indicates IPv4 forwarding is enabled.",
            "**Images**: Total number of images on the host.",
            "**IndexServerAddress**: Address / URL of the index server that is used for image search, (default: https://index.docker.io/v1/)",
            "**InitBinary**: Name and, optional, path of the the `docker-init` binary.",
            [
              "**InitCommit**: Commit holds the Git-commit (SHA1) that a binary was built from, as",
              {
                "$ul": [
                  "**Expected**: Commit ID of external tool expected by dockerd as set at build time.",
                  "**ID**: Actual commit ID of external tool."
                ]
              }
            ],
            "**Isolation**: Represents the isolation technology to use as a default for containers. (default: default)",
            "**KernelMemory**: Indicates if the host has kernel memory limit support enabled.",
            "**KernelVersion**: Kernel version of the host.",
            "**Labels**: User-defined labels (key/value metadata) as set on the daemon.",
            "**LiveRestoreEnabled**: Indicates if live restore is enabled. (default: false)",
            "**LoggingDriver**: The logging driver to use as a default for new containers.",
            "**MemTotal**: Total amount of physical memory available on the host, in kilobytes (kB).",
            "**MemoryLimit**: Indicates if the host has memory limit support enabled.",
            "**NCPU**: The number of logical CPUs usable by the daemon.",
            "**NEventsListener**: Number of event listeners subscribed.",
            "**NFd**: The total number of file Descriptors in use by the daemon process.",
            "**NGoroutines**: The  number of goroutines that currently exist.",
            "**Name**: Hostname of the host.",
            "**NoProxy**: Comma-separated list of domain extensions for which no proxy should be",
            "**OSType**: Generic type of the operating system of the host, as returned by the",
            "**OomKillDisable**: Indicates if OOM killer disable is supported on the host.",
            "**OperatingSystem**: Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\"",
            [
              "**Plugins**: Available plugins per type.",
              {
                "$ul": [
                  "**Authorization**: Names of available authorization plugins.",
                  "**Log**: Names of available logging-drivers, and logging-driver plugins.",
                  "**Network**: Names of available network-drivers, and network-driver plugins.",
                  "**Volume**: Names of available volume-drivers, and network-driver plugins."
                ]
              }
            ],
            [
              "**RegistryConfig**: RegistryServiceConfig stores daemon registry services configuration.",
              {
                "$ul": [
                  "**AllowNondistributableArtifactsCIDRs**: List of IP ranges to which nondistributable artifacts can be pushed,",
                  "**AllowNondistributableArtifactsHostnames**: List of registry hostnames to which nondistributable artifacts can be",
                  "**IndexConfigs**",
                  "**InsecureRegistryCIDRs**: List of IP ranges of insecure registries, using the CIDR syntax",
                  "**Mirrors**: List of registry URLs that act as a mirror for the official"
                ]
              }
            ],
            [
              "**RuncCommit**: Commit holds the Git-commit (SHA1) that a binary was built from, as",
              {
                "$ul": [
                  "**Expected**: Commit ID of external tool expected by dockerd as set at build time.",
                  "**ID**: Actual commit ID of external tool."
                ]
              }
            ],
            "**Runtimes**: List of [OCI compliant](https://github.com/opencontainers/runtime-spec) (default: [object Object])",
            "**SecurityOptions**: List of security features that are enabled on the daemon, such as",
            "**ServerVersion**: Version string of the daemon.",
            "**SwapLimit**: Indicates if the host has memory swap limit support enabled.",
            [
              "**Swarm**: Represents generic information about swarm.",
              {
                "$ul": [
                  [
                    "**Cluster**: ClusterInfo represents information about the swarm as is returned by the",
                    {
                      "$ul": [
                        "**CreatedAt**: Date and time at which the swarm was initialised in",
                        "**ID**: The ID of the swarm.",
                        "**RootRotationInProgress**: Whether there is currently a root CA rotation in progress for the swarm",
                        [
                          "**Spec**: User modifiable swarm configuration.",
                          {
                            "$ul": [
                              [
                                "**CAConfig**: CA configuration.",
                                {
                                  "$ul": [
                                    "**ExternalCAs**: Configuration for forwarding signing requests to an external certificate authority.",
                                    "**ForceRotate**: An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in `SigningCACert` and `SigningCAKey`",
                                    "**NodeCertExpiry**: The duration node certificates are issued for.",
                                    "**SigningCACert**: The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format.",
                                    "**SigningCAKey**: The desired signing CA key for all swarm node TLS leaf certificates, in PEM format."
                                  ]
                                }
                              ],
                              [
                                "**Dispatcher**: Dispatcher configuration.",
                                {
                                  "$ul": [
                                    "**HeartbeatPeriod**: The delay for an agent to send a heartbeat to the dispatcher."
                                  ]
                                }
                              ],
                              [
                                "**EncryptionConfig**: Parameters related to encryption-at-rest.",
                                {
                                  "$ul": [
                                    "**AutoLockManagers**: If set, generate a key and use it to lock data stored on the managers."
                                  ]
                                }
                              ],
                              "**Labels**: User-defined key/value metadata.",
                              "**Name**: Name of the swarm.",
                              [
                                "**Orchestration**: Orchestration configuration.",
                                {
                                  "$ul": [
                                    "**TaskHistoryRetentionLimit**: The number of historic tasks to keep per instance or node. If negative, never remove completed or failed tasks."
                                  ]
                                }
                              ],
                              [
                                "**Raft**: Raft configuration.",
                                {
                                  "$ul": [
                                    "**ElectionTick**: The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.",
                                    "**HeartbeatTick**: The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.",
                                    "**KeepOldSnapshots**: The number of snapshots to keep beyond the current snapshot.",
                                    "**LogEntriesForSlowFollowers**: The number of log entries to keep around to sync up slow followers after a snapshot is created.",
                                    "**SnapshotInterval**: The number of log entries between snapshots."
                                  ]
                                }
                              ],
                              [
                                "**TaskDefaults**: Defaults for creating tasks in this cluster.",
                                {
                                  "$ul": [
                                    [
                                      "**LogDriver**: The log driver to use for tasks created in the orchestrator if",
                                      {
                                        "$ul": [
                                          "**Name**: The log driver to use as a default for new tasks.",
                                          "**Options**: Driver-specific options for the selectd log driver, specified"
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        [
                          "**TLSInfo**: Information about the issuer of leaf TLS certificates and the trusted root CA certificate",
                          {
                            "$ul": [
                              "**CertIssuerPublicKey**: The base64-url-safe-encoded raw public key bytes of the issuer",
                              "**CertIssuerSubject**: The base64-url-safe-encoded raw subject bytes of the issuer",
                              "**TrustRoot**: The root CA certificate(s) that are used to validate leaf TLS certificates"
                            ]
                          }
                        ],
                        "**UpdatedAt**: Date and time at which the swarm was last updated in",
                        [
                          "**Version**: The version number of the object such as node, service, etc. This is needed to avoid conflicting writes.",
                          {
                            "$ul": [
                              "**Index**"
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**ControlAvailable** (default: false)",
                  "**Error** (default: )",
                  "**LocalNodeState**: Current local status of this node. (default: )",
                  "**Managers**: Total number of managers in the swarm.",
                  "**NodeAddr**: IP address at which this node can be reached by other nodes in the (default: )",
                  "**NodeID**: Unique identifier of for this node in the swarm. (default: )",
                  "**Nodes**: Total number of nodes in the swarm.",
                  "**RemoteManagers**: List of ID's and addresses of other managers in the swarm. (default: null)"
                ]
              }
            ],
            "**SystemStatus**: Status information about this node (standalone Swarm API).",
            "**SystemTime**: Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
