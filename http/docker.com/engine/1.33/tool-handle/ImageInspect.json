{
  "name": "ImageInspect",
  "description": "Return low-level information about an image.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Image name or id"
      }
    },
    "required": [
      "name"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "/v1.33/images/{name}/json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Architecture**",
            "**Author**",
            "**Comment**",
            [
              "**Config**: Configuration for a container that is portable between hosts",
              {
                "$ul": [
                  "**ArgsEscaped**: Command is already escaped (Windows only)",
                  "**AttachStderr**: Whether to attach to `stderr`. (default: true)",
                  "**AttachStdin**: Whether to attach to `stdin`. (default: false)",
                  "**AttachStdout**: Whether to attach to `stdout`. (default: true)",
                  "**Cmd**: Command to run specified as a string or an array of strings.",
                  "**Domainname**: The domain name to use for the container.",
                  "**Entrypoint**: The entry point for the container as a string or an array of strings.",
                  "**Env**: A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.",
                  "**ExposedPorts**: An object mapping ports to an empty object in the form:",
                  [
                    "**Healthcheck**: A test to perform to check that the container is healthy.",
                    {
                      "$ul": [
                        "**Interval**: The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.",
                        "**Retries**: The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit.",
                        "**StartPeriod**: Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.",
                        "**Test**: The test to perform. Possible values are:",
                        "**Timeout**: The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit."
                      ]
                    }
                  ],
                  "**Hostname**: The hostname to use for the container, as a valid RFC 1123 hostname.",
                  "**Image**: The name of the image to use when creating the container",
                  "**Labels**: User-defined key/value metadata.",
                  "**MacAddress**: MAC address of the container.",
                  "**NetworkDisabled**: Disable networking for the container.",
                  "**OnBuild**: `ONBUILD` metadata that were defined in the image's `Dockerfile`.",
                  "**OpenStdin**: Open `stdin` (default: false)",
                  "**Shell**: Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.",
                  "**StdinOnce**: Close `stdin` after one attached client disconnects (default: false)",
                  "**StopSignal**: Signal to stop a container as a string or unsigned integer. (default: SIGTERM)",
                  "**StopTimeout**: Timeout to stop a container in seconds. (default: 10)",
                  "**Tty**: Attach standard streams to a TTY, including `stdin` if it is not closed. (default: false)",
                  "**User**: The user that commands are run as inside the container.",
                  [
                    "**Volumes**: An object mapping mount point paths inside the container to empty objects.",
                    {
                      "$ul": [
                        "**additionalProperties** (default: [object Object])"
                      ]
                    }
                  ],
                  "**WorkingDir**: The working directory for commands to run in."
                ]
              }
            ],
            "**Container**",
            [
              "**ContainerConfig**: Configuration for a container that is portable between hosts",
              {
                "$ul": [
                  "**ArgsEscaped**: Command is already escaped (Windows only)",
                  "**AttachStderr**: Whether to attach to `stderr`. (default: true)",
                  "**AttachStdin**: Whether to attach to `stdin`. (default: false)",
                  "**AttachStdout**: Whether to attach to `stdout`. (default: true)",
                  "**Cmd**: Command to run specified as a string or an array of strings.",
                  "**Domainname**: The domain name to use for the container.",
                  "**Entrypoint**: The entry point for the container as a string or an array of strings.",
                  "**Env**: A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.",
                  "**ExposedPorts**: An object mapping ports to an empty object in the form:",
                  [
                    "**Healthcheck**: A test to perform to check that the container is healthy.",
                    {
                      "$ul": [
                        "**Interval**: The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.",
                        "**Retries**: The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit.",
                        "**StartPeriod**: Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.",
                        "**Test**: The test to perform. Possible values are:",
                        "**Timeout**: The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit."
                      ]
                    }
                  ],
                  "**Hostname**: The hostname to use for the container, as a valid RFC 1123 hostname.",
                  "**Image**: The name of the image to use when creating the container",
                  "**Labels**: User-defined key/value metadata.",
                  "**MacAddress**: MAC address of the container.",
                  "**NetworkDisabled**: Disable networking for the container.",
                  "**OnBuild**: `ONBUILD` metadata that were defined in the image's `Dockerfile`.",
                  "**OpenStdin**: Open `stdin` (default: false)",
                  "**Shell**: Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.",
                  "**StdinOnce**: Close `stdin` after one attached client disconnects (default: false)",
                  "**StopSignal**: Signal to stop a container as a string or unsigned integer. (default: SIGTERM)",
                  "**StopTimeout**: Timeout to stop a container in seconds. (default: 10)",
                  "**Tty**: Attach standard streams to a TTY, including `stdin` if it is not closed. (default: false)",
                  "**User**: The user that commands are run as inside the container.",
                  [
                    "**Volumes**: An object mapping mount point paths inside the container to empty objects.",
                    {
                      "$ul": [
                        "**additionalProperties** (default: [object Object])"
                      ]
                    }
                  ],
                  "**WorkingDir**: The working directory for commands to run in."
                ]
              }
            ],
            "**Created**",
            "**DockerVersion**",
            [
              "**GraphDriver**: Information about a container's graph driver.",
              {
                "$ul": [
                  "**Data**",
                  "**Name**"
                ]
              }
            ],
            "**Id**",
            [
              "**Metadata**",
              {
                "$ul": [
                  "**LastTagTime**"
                ]
              }
            ],
            "**Os**",
            "**OsVersion**",
            "**Parent**",
            "**RepoDigests**",
            "**RepoTags**",
            [
              "**RootFS**",
              {
                "$ul": [
                  "**BaseLayer**",
                  "**Layers**",
                  "**Type**"
                ]
              }
            ],
            "**Size**",
            "**VirtualSize**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an error.",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: The error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
