{
  "name": "listOrgGatewayTemplates",
  "description": "Get List of Org Gateway Templates",
  "parameters": {
    "type": "object",
    "properties": {
      "org_id": {
        "example": "000000ab-00ab-00ab-00ab-0000000000ab",
        "format": "uuid",
        "type": "string"
      }
    },
    "required": [
      "org_id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api.mist.com/api/v1/orgs/{org_id}/gatewaytemplates"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "List"
        },
        "Gateway Template is applied to a site for gateway(s) in a site.",
        "**Key properties:**",
        {
          "$ul": [
            "**additional_config_cmds**",
            "**bgp_config**",
            "**created_time**",
            "**dhcpd_config**: The property key is the network name",
            "**extra_routes**",
            [
              "**gateway_matching**: Gateway matching",
              {
                "$ul": [
                  "**enable**",
                  "**rules**"
                ]
              }
            ],
            "**id**",
            "**ip_configs**: The property key is the network name",
            "**modified_time**",
            "**name**",
            "**networks**: The property key is the network name",
            [
              "**oob_ip_config**: Junos out-of-band (vme/em0/fxp0) IP config",
              {
                "$ul": [
                  "**dns**",
                  "**dns_suffix**",
                  "**gateway**",
                  "**ip**",
                  "**netmask**: used only if `subnet` is not specified in `networks`",
                  "**network**: optional, the network to be used for mgmt",
                  [
                    "**node1**: for HA Cluster, node1 can have different IP Config",
                    {
                      "$ul": [
                        "**ip**",
                        "**netmask**: used only if `subnet` is not specified in `networks`",
                        "**network**: optional, the network to be used for mgmt",
                        "**type** (default: dynamic)",
                        "**use_mgmt_vrf**: if supported on the platform. If enabled, DNS will be using this routing-instance, too (default: false)",
                        "**use_mgmt_vrf_for_host_out**: whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative service is desired (default: false)",
                        "**vlan_id**: optional, if different from parent"
                      ]
                    }
                  ],
                  "**type** (default: dynamic)",
                  "**use_mgmt_vrf**: if supported on the platform. If enabled, DNS will be using this routing-instance, too (default: false)",
                  "**use_mgmt_vrf_for_host_out**: whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative service is desired (default: false)",
                  "**vlan_id**"
                ]
              }
            ],
            "**org_id**",
            "**path_preferences**: experimental",
            "**port_config**: The property key is the port(s) name or range (e.g. \"ge-0/0/0-10\")",
            "**routing_policies**: The property key is the routing policy name",
            "**service_policies**",
            "**tunnel_configs**: Property key is the tunnel name",
            "**type** (default: standalone)"
          ]
        },
        {
          "$each": "$.body.*",
          "$as": "item",
          "$block": [
            {
              "$h2": {
                "$": "$.item.name"
              }
            },
            {
              "$lang": "json",
              "$code": {
                "$encode": "json",
                "$indent": true,
                "$content": {
                  "$": "$.item"
                }
              }
            }
          ]
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
