{
  "name": "createMspSso",
  "description": "Create MSP SSO profile",
  "parameters": {
    "type": "object",
    "properties": {
      "msp_id": {
        "example": "000000ab-00ab-00ab-00ab-0000000000ab",
        "format": "uuid",
        "type": "string"
      },
      "body": {
        "$ref": "#/components/schemas/sso",
        "description": "Request Body"
      }
    },
    "required": [
      "msp_id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://api.mist.com/api/v1/msps/{msp_id}/ssos"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "SSO",
        "**Key properties:**",
        {
          "$ul": [
            "**created_time**",
            "**custom_logout_url**: optional, a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is different from SP-initiated SLO process)",
            "**default_role**: default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched",
            "**domain**",
            "**id**",
            "**idp_cert**: if `idp_type`==`saml`. IDP Cert (used to verify the signed response)",
            "**idp_sign_algo**: if `idp_type`==`saml`. Signing algorithm for SAML Assertion",
            "**idp_sso_url**: IDP Single-Sign-On URL",
            "**idp_type** (default: saml)",
            "**ignore_unmatched_roles**: ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role",
            "**issuer**: if `idp_type`==`saml`. IDP issuer URL",
            "**ldap_base_dn**: if `idp_type`==`ldap`",
            "**ldap_bind_dn**: if `idp_type`==`ldap`",
            "**ldap_bind_password**: if `idp_type`==`ldap`",
            "**ldap_certs**: if `idp_type`==`ldap`",
            "**ldap_client_cert**: if `idp_type`==`ldap`",
            "**ldap_client_key**: if `idp_type`==`ldap`",
            "**ldap_group_attr**: if `idp_type`==`ldap`",
            "**ldap_group_dn**: if `ldap_type`==`custom`",
            "**ldap_group_filter**: if `ldap_type`==`custom`",
            "**ldap_server_hosts**: if `idp_type`==`ldap`",
            "**ldap_type**: if `idp_type`==`ldap` (default: ad)",
            "**ldap_user_filter**: * if `ldap_type`==`ad`: \"(CN=%s)\"",
            "**modified_time**",
            "**msp_id**",
            "**name**: name",
            "**nameid_format**: if `idp_type`==`saml` (default: email)",
            "**oauth_cc_client_id**: if `oauth_type`==`okta`, Client Credentials",
            "**oauth_cc_client_secret**: if `oauth_type`==`okta`, oauth_cc_client_secret is RSA private key, of the form \"-----BEGIN RSA PRIVATE KEY--....\"",
            "**oauth_discovery_url**: if `idp_type`==`oauth`",
            "**oauth_ropc_client_id**: ropc = Resource Owner Password Credentials",
            "**oauth_ropc_secret**: oauth_ropc_client_secret can be empty if oauth_type is azure",
            "**oauth_tenant_id**: if `oauth_type`==`okta`, oauth_tenant_id",
            "**oauth_type** (default: azure)",
            "**org_id**",
            "**role_attr_extraction**: optional, custom role attribute parsing scheme",
            "**role_attr_from**:  name of the attribute in SAML Assertion to extract role from (default: role)",
            "**site_id**",
            "**type**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
