{
  "name": "updateOrgService",
  "description": "update Org Service",
  "parameters": {
    "type": "object",
    "properties": {
      "org_id": {
        "example": "000000ab-00ab-00ab-00ab-0000000000ab",
        "format": "uuid",
        "type": "string"
      },
      "service_id": {
        "example": "000000ab-00ab-00ab-00ab-0000000000ab",
        "format": "uuid",
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/service"
      }
    },
    "required": [
      "org_id",
      "service_id"
    ],
    "$defs": {
      "service": {
        "description": "WIP",
        "properties": {
          "addresses": {
            "description": "if `type`==`custom`, the subnets where the service resides (if more specific is required)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "app_caetgories": {
            "description": "list of application categories are available through /api/v1/const/app_categories",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "apps": {
            "description": "when `type`==`app`, comes from `/api/v1/const/apps`\nwhen `type`==`app_categories`, comes from `/api/v1/const/app_categories`",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_time": {
            "readOnly": true,
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "dscp": {
            "description": "when `traffic_type`==`custom`",
            "type": "integer"
          },
          "failover_policy": {
            "default": "revertable",
            "enum": [
              "revertable",
              "non-revertable"
            ],
            "type": "string"
          },
          "hostnames": {
            "description": "if `type`==`custom`",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "max_jitter": {
            "description": "when `traffic_type`==`custom`, for uplink selection",
            "type": "integer"
          },
          "max_latency": {
            "description": "when `traffic_type`==`custom`, for uplink selection",
            "type": "string"
          },
          "max_loss": {
            "description": "when `traffic_type`==`custom`, for uplink selection",
            "type": "integer"
          },
          "modified_time": {
            "readOnly": true,
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "org_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "sle_enabled": {
            "default": false,
            "description": "whether to enable measure SLE",
            "type": "boolean"
          },
          "specs": {
            "description": "when `type`==`addresses` or `type`==`hostnames`",
            "items": {
              "properties": {
                "port_range": {
                  "type": "integer"
                },
                "protocol": {
                  "default": "any",
                  "description": "`https`/ `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`.\n`protocol_number` is between 1-254",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "uniqueItems": true
          },
          "traffic_class": {
            "default": "best_effort",
            "description": "when `traffic_type`==`custom`",
            "enum": [
              "best_effort",
              "high",
              "medium",
              "low"
            ],
            "type": "string"
          },
          "traffic_type": {
            "default": "data_best_effort",
            "description": "values from `/api/v1/consts/traffic_types`\n* when `type`==`apps`, we'll choose traffic_type automatically\n* when `type`==`addresses` or `type`==`hostnames`, you can provide your own settings (optional)",
            "type": "string"
          },
          "type": {
            "default": "custom",
            "enum": [
              "app",
              "app_categories",
              "custom"
            ],
            "type": "string"
          },
          "vpn_name": {
            "enum": [
              "addresses",
              "apps",
              "local",
              "hostname"
            ],
            "type": "string"
          }
        },
        "type": "object",
        "x-examples": {
          "example-1": {
            "addresses": [
              "string"
            ],
            "app_caetgories": [
              "string"
            ],
            "apps": [
              "string"
            ],
            "created_time": 0,
            "dscp": 0,
            "failover_policy": "revertable",
            "hostnames": [
              "string"
            ],
            "id": "497f6eca-6276-5017-bfeb-53cbbbba6f08",
            "max_jitter": 0,
            "max_latency": "string",
            "max_loss": 0,
            "modified_time": 0,
            "name": "string",
            "org_id": "a40f5d1f-d889-42e9-94ea-b9b33585fc6b",
            "sle_enabled": false,
            "specs": [
              {
                "port_range": 0,
                "protocol": "any"
              }
            ],
            "traffic_class": "best_effort",
            "traffic_type": "data_best_effort",
            "type": "custom",
            "vpn_name": "addresses"
          }
        }
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://api.mist.com/api/v1/orgs/{org_id}/services/{service_id}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "WIP",
        "**Key properties:**",
        {
          "$ul": [
            "**addresses**: if `type`==`custom`, the subnets where the service resides (if more specific is required)",
            "**app_caetgories**: list of application categories are available through /api/v1/const/app_categories",
            "**apps**: when `type`==`app`, comes from `/api/v1/const/apps`",
            "**created_time**",
            "**description**",
            "**dscp**: when `traffic_type`==`custom`",
            "**failover_policy** (default: revertable)",
            "**hostnames**: if `type`==`custom`",
            "**id**",
            "**max_jitter**: when `traffic_type`==`custom`, for uplink selection",
            "**max_latency**: when `traffic_type`==`custom`, for uplink selection",
            "**max_loss**: when `traffic_type`==`custom`, for uplink selection",
            "**modified_time**",
            "**name**",
            "**org_id**",
            "**sle_enabled**: whether to enable measure SLE (default: false)",
            "**specs**: when `type`==`addresses` or `type`==`hostnames`",
            "**traffic_class**: when `traffic_type`==`custom` (default: best_effort)",
            "**traffic_type**: values from `/api/v1/consts/traffic_types` (default: data_best_effort)",
            "**type** (default: custom)",
            "**vpn_name**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
