{
  "name": "createOrgSecPolicies",
  "description": "Create Org Security Policy",
  "parameters": {
    "type": "object",
    "properties": {
      "org_id": {
        "example": "000000ab-00ab-00ab-00ab-0000000000ab",
        "format": "uuid",
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/secpolicy"
      }
    },
    "required": [
      "org_id"
    ],
    "$defs": {
      "secpolicy": {
        "description": "Security Policy is designed to audit / catch discripancies between “what’s intended to be running” versus “what’s actually running” in a network. Many big organizations have separated Security and IT team (for good reasons). Each site can be assigned a security policy. Whenever an AP is provisioned, the configuration will be checked against the security policy. Any violations will be flagged in Device Config History where you can search for the when and where the violation occurs.",
        "properties": {
          "created_time": {
            "readOnly": true,
            "type": "number"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "modified_time": {
            "readOnly": true,
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "org_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "site_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "wlans": {
            "items": {
              "$ref": "#/$defs/wlan"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object",
        "x-examples": {
          "example-1": {
            "name": "string",
            "wlans": [
              {
                "acct_interim_interval": 0,
                "acct_servers": [
                  {
                    "host": "string",
                    "port": 0,
                    "secret": "string"
                  }
                ],
                "airwatch": {
                  "api_key": "string",
                  "console_url": "string",
                  "enabled": true,
                  "password": "string",
                  "username": "string"
                },
                "allow_ipv6_ndp": true,
                "allow_mdns": true,
                "ap_ids": [
                  "string"
                ],
                "app_limit": {
                  "apps": {},
                  "enabled": true,
                  "wxtag_ids": {}
                },
                "app_qos": {
                  "apps": {
                    "skype-business-video": {
                      "dscp": 0,
                      "dst_subnet": "string",
                      "src_subnet": "string"
                    },
                    "skype-business-voice": {
                      "dscp": 0
                    }
                  },
                  "enabled": true,
                  "others": [
                    {
                      "dscp": 0,
                      "dst_subnet": "string",
                      "port_ranges": "string",
                      "protocol": "string",
                      "src_subnet": "string"
                    }
                  ]
                },
                "apply_to": "string",
                "arp_filter": true,
                "auth": {
                  "eap_reauth": true,
                  "enable_mac_auth": true,
                  "key_idx": 1,
                  "keys": [
                    "string"
                  ],
                  "multi_psk_only": true,
                  "owe": "string",
                  "private_wlan": true,
                  "psk": "string123",
                  "type": "string",
                  "wep_as_secondary_auth": true
                },
                "auth_server_selection": "ordered",
                "auth_servers": [
                  {
                    "host": "string",
                    "port": 0,
                    "secret": "string"
                  }
                ],
                "auth_servers_nas_id": "string",
                "auth_servers_nas_ip": "string",
                "auth_servers_retries": 0,
                "auth_servers_timeout": 0,
                "band": "string",
                "band_steer": true,
                "band_steer_force_band5": true,
                "block_blacklist_clients": true,
                "bonjour": {
                  "additional_vlan_ids": [
                    0
                  ],
                  "enabled": true,
                  "services": {
                    "$service_name": {
                      "disable_local": true,
                      "radius_groups": [
                        "string"
                      ],
                      "scope": "string"
                    }
                  }
                },
                "cisco_cwa": {
                  "allowed_hostnames": [
                    "string"
                  ],
                  "allowed_subnets": [
                    "string"
                  ],
                  "enabled": true
                },
                "client_limit_down": 0,
                "client_limit_down_enabled": true,
                "client_limit_up": 0,
                "client_limit_up_enabled": true,
                "coa_servers": [
                  {
                    "disable_event_timestamp_check": true,
                    "enabled": true,
                    "ip": "string",
                    "port": 0,
                    "secret": "string"
                  }
                ],
                "disable_11ax": true,
                "disable_uapsd": true,
                "disable_wmm": true,
                "dns_server_rewrite": {
                  "enabled": true,
                  "radius_groups": {}
                },
                "dtim": 0,
                "dynamic_psk": {
                  "enabled": true
                },
                "dynamic_vlan": {
                  "default_vlan_id": 1,
                  "enabled": true,
                  "local_vlan_ids": [
                    null
                  ],
                  "type": "string",
                  "vlans": [
                    {}
                  ]
                },
                "enable_wireless_bridging": true,
                "enabled": true,
                "hide_ssid": true,
                "hostname_ie": true,
                "hotspot20": {
                  "enabled": true,
                  "operators": [
                    null
                  ],
                  "venue_name": "string"
                },
                "interface": "string",
                "isolation": true,
                "legacy_overds": true,
                "limit_bcast": true,
                "limit_probe_response": true,
                "max_idletime": 60,
                "mxtunnel_id": "string",
                "no_static_dns": true,
                "no_static_ip": true,
                "portal": {
                  "amazon_client_id": "string",
                  "amazon_client_secret": "string",
                  "amazon_email_domains": [
                    "string"
                  ],
                  "amazon_enabled": true,
                  "auth": "string",
                  "azure_client_id": "string",
                  "azure_client_secret": "string",
                  "azure_enabled": true,
                  "azure_tenant_id": "string",
                  "bypass_when_cloud_down": true,
                  "email_enabled": true,
                  "enabled": true,
                  "expire": 0,
                  "external_portal_url": "string",
                  "facebook_client_id": "string",
                  "facebook_client_secret": "string",
                  "facebook_email_domains": [
                    "string"
                  ],
                  "facebook_enabled": true,
                  "forward": true,
                  "forward_url": "string",
                  "google_email_domains": [
                    "string"
                  ],
                  "google_enabled": true,
                  "microsoft_client_id": "string",
                  "microsoft_client_secret": "string",
                  "microsoft_email_domains": [
                    "string"
                  ],
                  "microsoft_enabled": true,
                  "passphrase_enabled": true,
                  "password": "string",
                  "portal_allowed_hostnames": "string",
                  "portal_allowed_subnets": "string",
                  "portal_api_secret": "string",
                  "portal_denied_hostnames": "string",
                  "portal_image": "string",
                  "portal_sso_url": "string",
                  "privacy": true,
                  "sms_enabled": true,
                  "sms_provider": "string",
                  "sponsor_email_domains": [
                    "string"
                  ],
                  "sponsor_enabled": true,
                  "sponsor_link_validity_duration": "60",
                  "sso_default_role": "string",
                  "sso_idp_cert": "string",
                  "sso_idp_sign_algo": "string",
                  "sso_idp_sso_url": "string",
                  "sso_issuer": "string",
                  "thumbnail": "string",
                  "twilio_auth_token": "string",
                  "twilio_phone_number": "string",
                  "twilio_sid": "string"
                },
                "portal_allowed_hostnames": [
                  "string"
                ],
                "portal_allowed_subnets": [
                  "string"
                ],
                "portal_api_secret": "string",
                "portal_denied_hostnames": [
                  "string"
                ],
                "portal_image": "http://example.com",
                "portal_sso_url": "string",
                "portal_template_url": "string",
                "qos": {
                  "class": "string",
                  "overwrite": true
                },
                "radsec": {
                  "enabled": true,
                  "server_name": "string",
                  "servers": [
                    {
                      "host": "string",
                      "port": 0
                    }
                  ]
                },
                "rateset": {
                  "5": {
                    "ht": "string",
                    "legacy": [
                      "string"
                    ],
                    "min_rssi": 0,
                    "template": "string",
                    "vht": "string"
                  },
                  "24": {
                    "ht": "string",
                    "legacy": [
                      "string"
                    ],
                    "min_rssi": 0,
                    "template": "string",
                    "vht": "string"
                  }
                },
                "roam_mode": "11r",
                "schedule": {
                  "enabled": true,
                  "hours": {}
                },
                "sle_excluded": true,
                "ssid": "string",
                "thumbnail": "http://example.com",
                "use_eapol_v1": true,
                "vlan_enabled": true,
                "vlan_id": 1,
                "vlan_ids": [
                  0
                ],
                "vlan_pooling": true,
                "wlan_limit_down": 0,
                "wlan_limit_down_enabled": true,
                "wlan_limit_up": 0,
                "wlan_limit_up_enabled": true,
                "wxtag_ids": [
                  "string"
                ],
                "wxtunnel_id": "string",
                "wxtunnel_remote_id": "string"
              }
            ]
          }
        }
      },
      "wlan": {
        "description": "WLAN\n\n**Note**: portal_template will be forked out of wlan objects soon. To fetch portal_template, please query portal_template_url. To update portal_template, use Wlan Portal Template.",
        "properties": {
          "acct_interim_interval": {
            "default": 0,
            "description": "how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled",
            "maximum": 65535,
            "minimum": 0,
            "type": "integer"
          },
          "acct_servers": {
            "description": "list of RADIUS accounting servers, optional, order matters where the first one is treated as primary",
            "items": {
              "$ref": "#/$defs/acct_server"
            },
            "type": "array"
          },
          "airwatch": {
            "$ref": "#/$defs/wlan_airwatch"
          },
          "allow_ipv6_ndp": {
            "default": true,
            "description": "only applicable when limit_bcast==true, which allows or disallows ipv6 Neighbor Discovery packets to go through",
            "type": "boolean"
          },
          "allow_mdns": {
            "default": false,
            "description": "only applicable when limit_bcast==true, which allows mDNS / Bonjour packets to go through",
            "type": "boolean"
          },
          "allow_ssdp": {
            "default": false,
            "description": "only applicable when `limit_bcast`==`tru`e, which allows SSDP",
            "type": "boolean"
          },
          "ap_ids": {
            "description": "list of device ids",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "app_limit": {
            "description": "bandwidth limiting for apps (applies to up/down)",
            "properties": {
              "apps": {
                "description": "map from app key to bandwidth in kbps. app key defined in Get Application List",
                "type": "object"
              },
              "enabled": {
                "type": "boolean"
              },
              "wxtag_ids": {
                "description": "map from wxtag_id of Hostname Wxlan Tags to bandwidth in kbps",
                "type": "object"
              }
            },
            "type": "object"
          },
          "app_qos": {
            "$ref": "#/$defs/wlan_app_qos"
          },
          "apply_to": {
            "enum": [
              "site",
              "wxtags",
              "aps"
            ],
            "nullable": true,
            "type": "string"
          },
          "arp_filter": {
            "default": false,
            "description": "whether to enable smart arp filter",
            "type": "boolean"
          },
          "auth": {
            "$ref": "#/$defs/wlan_auth"
          },
          "auth_server_selection": {
            "default": "ordered",
            "description": "When ordered, AP will prefer and go back to the first server if possible",
            "enum": [
              "ordered",
              "unordered"
            ],
            "nullable": true,
            "type": "string"
          },
          "auth_servers": {
            "description": "list of RADIUS authentication servers, at least one is needed if `auth type`==`eap`, order matters where the first one is treated as primary",
            "items": {
              "$ref": "#/$defs/auth_server"
            },
            "type": "array"
          },
          "auth_servers_nas_id": {
            "description": "optional, up to 48 bytes, will be dynamically generated if not provided. used only for authentication servers",
            "nullable": true,
            "type": "string"
          },
          "auth_servers_nas_ip": {
            "description": "optional, NAS-IP-ADDRESS to use",
            "nullable": true,
            "type": "string"
          },
          "auth_servers_retries": {
            "default": 2,
            "description": "radius auth session retries",
            "type": "integer"
          },
          "auth_servers_timeout": {
            "default": 5,
            "description": "radius auth session timeout",
            "type": "integer"
          },
          "band": {
            "deprecated": true,
            "description": "`band` is deprecated and kept for backward compability. Use bands instead",
            "type": "string"
          },
          "band_steer": {
            "default": false,
            "description": "whether to enable band_steering, this works only when band==both",
            "type": "boolean"
          },
          "band_steer_force_band5": {
            "default": false,
            "description": "force dual-band capable client to connect to 5G",
            "type": "boolean"
          },
          "bands": {
            "default": [
              "24",
              "5"
            ],
            "description": "list of radios that the wlan should apply to",
            "items": {
              "enum": [
                "24",
                "5",
                "6"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "block_blacklist_clients": {
            "description": "whether to block the clients in the blacklist (up to first 256 macs)",
            "type": "boolean"
          },
          "bonjour": {
            "$ref": "#/$defs/wlan_bonjour"
          },
          "cisco_cwa": {
            "$ref": "#/$defs/wlan_cisco_cwa"
          },
          "client_limit_down": {
            "description": "kbps",
            "type": "integer"
          },
          "client_limit_down_enabled": {
            "default": false,
            "description": "if downlink limiting per-client is enabled",
            "type": "boolean"
          },
          "client_limit_up": {
            "description": "kbps",
            "type": "integer"
          },
          "client_limit_up_enabled": {
            "default": false,
            "description": "if uplink limiting per-client is enabled",
            "type": "boolean"
          },
          "coa_servers": {
            "description": "list of COA (change of authorization) servers, optional",
            "items": {
              "$ref": "#/$defs/coa_server"
            },
            "nullable": true,
            "type": "array"
          },
          "created_time": {
            "readOnly": true,
            "type": "number"
          },
          "disable_11ax": {
            "default": false,
            "description": "some old WLAN drivers may not be compatible",
            "type": "boolean"
          },
          "disable_ht_vht_rates": {
            "default": false,
            "description": "to disable ht or vht rates",
            "type": "boolean"
          },
          "disable_uapsd": {
            "default": false,
            "description": "whether to disable U-APSD",
            "type": "boolean"
          },
          "disable_v1_roam_notify": {
            "default": true,
            "description": "disable sending v2 roam notification messages",
            "type": "boolean"
          },
          "disable_v2_roam_notify": {
            "default": false,
            "description": "disable sending v2 roam notification messages",
            "type": "boolean"
          },
          "disable_wmm": {
            "default": false,
            "description": "whether to disable WMM",
            "type": "boolean"
          },
          "dns_server_rewrite": {
            "description": "for radius_group-based DNS server (rewrite DNS request depending on the Group RADIUS server returns)",
            "nullable": true,
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "radius_groups": {
                "description": "map between radius_group and the desired DNS server (IPv4 only)",
                "type": "object"
              }
            },
            "type": "object"
          },
          "dtim": {
            "default": 2,
            "type": "integer"
          },
          "dynamic_psk": {
            "description": "for dynamic PSK where we get per-user PSK from Radius\ndynamic_psk allows PSK to be selected at runtime depending on context (wlan/site/user/...) thus following configurations are assumed (currently)\n- PSK will come from RADIUS server\n- AP sends client MAC as username ans password (i.e. `enable_mac_auth` is assumed)\n- AP sends BSSID:SSID as Caller-Station-ID\n- `auth_servers` is required\n- PSK will come from cloud WLC if source is cloud_psks\n- default_psk will be used if cloud WLC is not available\n- `multi_psk_only` and `psk` is ignored\n- `pairwise` can only be wpa2-ccmp (for now, wpa3 support on the roadmap)",
            "nullable": true,
            "properties": {
              "default_psk": {
                "description": "default PSK to use if cloud WLC is not available, 8-63 characters",
                "maxLength": 63,
                "minLength": 8,
                "type": "string"
              },
              "default_vlan_id": {
                "nullable": true,
                "type": "integer"
              },
              "enabled": {
                "type": "boolean"
              },
              "source": {
                "default": "radius",
                "enum": [
                  "radius",
                  "cloud_psks"
                ],
                "type": "string"
              },
              "vlan_ids": {
                "items": {
                  "maximum": 4094,
                  "minimum": 1,
                  "nullable": true,
                  "type": "integer"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "dynamic_vlan": {
            "description": "for 802.1x",
            "nullable": true,
            "properties": {
              "default_vlan_id": {
                "default": 999,
                "description": "vlan_id to use when there’s no match from RADIUS",
                "maximum": 4094,
                "minimum": 1,
                "nullable": true,
                "type": "integer"
              },
              "enabled": {
                "default": false,
                "description": "whether to enable dynamic vlan",
                "type": "boolean"
              },
              "local_vlan_ids": {
                "description": "vlan_ids to be locally bridged",
                "items": {
                  "maximum": 4094,
                  "minimum": 1,
                  "nullable": true,
                  "type": "integer"
                },
                "type": "array"
              },
              "type": {
                "description": "standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco)",
                "enum": [
                  "standard",
                  "airespace-interface-name"
                ],
                "nullable": true,
                "type": "string"
              },
              "vlans": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping",
                "type": "object"
              }
            },
            "type": "object"
          },
          "enable_local_keycaching": {
            "default": false,
            "description": "enable AP-AP keycaching via multicast",
            "type": "boolean"
          },
          "enable_wireless_bridging": {
            "description": "whether to enable wireless bridging, which allows more broadcast packets to go through\n(allows forwarding of DHCP response to client not associated with the AP)",
            "type": "boolean"
          },
          "enabled": {
            "default": true,
            "description": "if this wlan is enabled",
            "type": "boolean"
          },
          "for_site": {
            "readOnly": true,
            "type": "boolean"
          },
          "hide_ssid": {
            "default": false,
            "description": "whether to hide SSID in beacon",
            "type": "boolean"
          },
          "hostname_ie": {
            "default": false,
            "description": "include hostname inside IE in AP beacons / probe responses",
            "type": "boolean"
          },
          "hotspot20": {
            "$ref": "#/$defs/wlan_hotspot_20"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "interface": {
            "default": "all",
            "description": "where this WLAN will be connected to",
            "enum": [
              "all",
              "eth0",
              "eth1",
              "eth2",
              "eth3",
              "wxtunnel",
              "mxtunnel",
              "site_mxedge"
            ],
            "type": "string"
          },
          "isolation": {
            "default": false,
            "description": "whether to allow clients to talk to each other",
            "type": "boolean"
          },
          "l2_isolation": {
            "default": false,
            "description": "if isolation is enabled, whether to deny clients to talk to L2 on the LAN",
            "type": "boolean"
          },
          "legacy_overds": {
            "description": "legacy devices requires the Over-DS (for Fast BSS Transition) bit set (while our chip doesn’t support it). Warning! Enabling this will cause problem for iOS devices.",
            "type": "boolean"
          },
          "limit_bcast": {
            "default": false,
            "description": "whether to limit broadcast packets going to wireless (i.e. only allow certain bcast packets to go through)",
            "type": "boolean"
          },
          "limit_probe_response": {
            "description": "limit probe response base on some heuristic rules",
            "type": "boolean"
          },
          "max_idletime": {
            "default": 1800,
            "description": "max idle time in seconds",
            "maximum": 86400,
            "minimum": 60,
            "type": "integer"
          },
          "mist_nac": {
            "properties": {
              "enabled": {
                "description": "when enabled:\n* `auth_servers` is ignored\n* `acct_servers` is ignored\n* `auth_servers_*` are ignored\n* `coa_servers` is ignored\n* `radsec` is ignored",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "modified_time": {
            "readOnly": true,
            "type": "number"
          },
          "msp_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "mxtunnel": {
            "description": "when `interface`=`site_medge`, the definition of the Mist Tunnels (key is the name)",
            "type": "object"
          },
          "mxtunnel_id": {
            "description": "when `interface`=`mxtunnel`, id of the Mist Tunnel",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "mxtunnel_name": {
            "default": "default",
            "description": "when `interface`=`site_medge`, name of the mxtunnel that in mxtunnels under Site Setting",
            "nullable": true,
            "type": "string"
          },
          "no_static_dns": {
            "default": false,
            "description": "whether to only allow client to use DNS that we’ve learned from DHCP response",
            "type": "boolean"
          },
          "no_static_ip": {
            "default": false,
            "description": "whether to only allow client that we’ve learned from DHCP exchange to talk",
            "type": "boolean"
          },
          "org_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "portal": {
            "$ref": "#/$defs/wlan_portal"
          },
          "portal_allowed_hostnames": {
            "description": "list of hostnames without http(s):// (matched by substring)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "portal_allowed_subnets": {
            "description": "list of CIDRs",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "portal_api_secret": {
            "description": "api secret (auto-generated) that can be used to sign guest authorization requests",
            "nullable": true,
            "type": "string"
          },
          "portal_denied_hostnames": {
            "description": "list of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "portal_image": {
            "description": "Url of portal background image",
            "format": "uri",
            "nullable": true,
            "type": "string"
          },
          "portal_sso_url": {
            "nullable": true,
            "type": "string"
          },
          "portal_template_url": {
            "description": "N.B portal_template will be forked out of wlan objects soon. To fetch portal_template, please query portal_template_url. To update portal_template, use Wlan Portal Template.",
            "nullable": true,
            "type": "string"
          },
          "qos": {
            "properties": {
              "class": {
                "default": "best_effort",
                "enum": [
                  "background",
                  "best_effort",
                  "video",
                  "voice"
                ],
                "type": "string"
              },
              "overwrite": {
                "default": false,
                "description": "whether to overwrite QoS",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "radsec": {
            "$ref": "#/$defs/radsec"
          },
          "rateset": {
            "properties": {
              "5": {
                "$ref": "#/$defs/wlan_datarates"
              },
              "24": {
                "$ref": "#/$defs/wlan_datarates"
              }
            },
            "type": "object"
          },
          "roam_mode": {
            "default": "none",
            "enum": [
              "none",
              "NONE",
              "OKC",
              "11r"
            ],
            "nullable": true,
            "type": "string"
          },
          "schedule": {
            "description": "WLAN operating schedule, default is disabled",
            "properties": {
              "enabled": {
                "default": false,
                "type": "boolean"
              },
              "hours": {
                "description": "time ranges, the key is mon / tue / wed / thu / fri / sat / sun, the value is time range in “HH:MM-HH:MM” (24-hour format), the minimum resolution is 30 minute",
                "type": "object"
              }
            },
            "type": "object"
          },
          "site_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "sle_excluded": {
            "default": false,
            "description": "whether to exclude this WLAN from SLE metrics",
            "type": "boolean"
          },
          "ssid": {
            "description": "the name of the SSID",
            "type": "string"
          },
          "template_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "thumbnail": {
            "description": "Url of portal background image thumbnail",
            "format": "uri",
            "nullable": true,
            "type": "string"
          },
          "use_eapol_v1": {
            "default": false,
            "description": "if `auth.type`==’eap’ or ‘psk’, should only be set for legacy client, such as pre-2004, 802.11b devices",
            "type": "boolean"
          },
          "vlan_enabled": {
            "default": false,
            "description": "if vlan tagging is enabled",
            "type": "boolean"
          },
          "vlan_id": {
            "maximum": 4094,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "vlan_ids": {
            "description": "list of VLAN ids",
            "items": {
              "maximum": 4094,
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "type": "array"
          },
          "vlan_pooling": {
            "default": false,
            "description": "vlan pooling allows AP to place client on different VLAN using a deterministic algorithm",
            "type": "boolean"
          },
          "wlan_limit_down": {
            "description": "kbps",
            "type": "integer"
          },
          "wlan_limit_down_enabled": {
            "default": false,
            "description": "if downlink limiting for whole wlan is enabled",
            "type": "boolean"
          },
          "wlan_limit_up": {
            "description": "kbps",
            "type": "integer"
          },
          "wlan_limit_up_enabled": {
            "default": false,
            "description": "if uplink limiting for whole wlan is enabled",
            "type": "boolean"
          },
          "wxtag_ids": {
            "description": "list of wxtag_ids",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "wxtunnel_id": {
            "description": "when `interface`=`wxtunnel`, id of the WXLAN Tunnel",
            "nullable": true,
            "type": "string"
          },
          "wxtunnel_remote_id": {
            "description": "when `interface`=`wxtunnel`, remote tunnel identifier",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "ssid"
        ],
        "type": "object",
        "x-examples": {
          "example-1": {
            "acct_interim_interval": 0,
            "acct_servers": [
              {
                "host": "string",
                "port": 0,
                "secret": "string"
              }
            ],
            "airwatch": {
              "api_key": "string",
              "console_url": "string",
              "enabled": true,
              "password": "string",
              "username": "string"
            },
            "allow_ipv6_ndp": true,
            "allow_mdns": true,
            "ap_ids": [
              "string"
            ],
            "app_limit": {
              "apps": {},
              "enabled": true,
              "wxtag_ids": {}
            },
            "app_qos": {
              "apps": {
                "skype-business-video": {
                  "dscp": 0,
                  "dst_subnet": "string",
                  "src_subnet": "string"
                },
                "skype-business-voice": {
                  "dscp": 0
                }
              },
              "enabled": true,
              "others": [
                {
                  "dscp": 0,
                  "dst_subnet": "string",
                  "port_ranges": "string",
                  "protocol": "string",
                  "src_subnet": "string"
                }
              ]
            },
            "apply_to": "string",
            "arp_filter": true,
            "auth": {
              "eap_reauth": true,
              "enable_mac_auth": true,
              "key_idx": 1,
              "keys": [
                "string"
              ],
              "multi_psk_only": true,
              "owe": "string",
              "pairwise": [
                "string"
              ],
              "private_wlan": true,
              "psk": "string123",
              "type": "string",
              "wep_as_secondary_auth": true
            },
            "auth_server_selection": "ordered",
            "auth_servers": [
              {
                "host": "string",
                "port": 0,
                "secret": "string"
              }
            ],
            "auth_servers_nas_id": "string",
            "auth_servers_nas_ip": "string",
            "auth_servers_retries": 0,
            "auth_servers_timeout": 0,
            "band": "string",
            "band_steer": true,
            "band_steer_force_band5": true,
            "block_blacklist_clients": true,
            "bonjour": {
              "additional_vlan_ids": [
                0
              ],
              "enabled": true,
              "services": {
                "$service_name": {
                  "disable_local": true,
                  "radius_groups": [
                    "string"
                  ],
                  "scope": "string"
                }
              }
            },
            "cisco_cwa": {
              "allowed_hostnames": [
                "string"
              ],
              "allowed_subnets": [
                "string"
              ],
              "enabled": true
            },
            "client_limit_down": 0,
            "client_limit_down_enabled": true,
            "client_limit_up": 0,
            "client_limit_up_enabled": true,
            "coa_servers": [
              {
                "disable_event_timestamp_check": true,
                "enabled": true,
                "ip": "string",
                "port": 0,
                "secret": "string"
              }
            ],
            "disable_11ax": true,
            "disable_uapsd": true,
            "disable_wmm": true,
            "dns_server_rewrite": {
              "enabled": true,
              "radius_groups": {}
            },
            "dtim": 0,
            "dynamic_psk": {
              "enabled": true
            },
            "dynamic_vlan": {
              "default_vlan_id": 1,
              "enabled": true,
              "local_vlan_ids": [
                0
              ],
              "type": "string",
              "vlans": [
                {}
              ]
            },
            "enable_wireless_bridging": true,
            "enabled": true,
            "hide_ssid": true,
            "hostname_ie": true,
            "hotspot20": {
              "enabled": true,
              "operators": [
                null
              ],
              "venue_name": "string"
            },
            "interface": "string",
            "isolation": true,
            "legacy_overds": true,
            "limit_bcast": true,
            "limit_probe_response": true,
            "max_idletime": 60,
            "mxtunnel_id": "string",
            "no_static_dns": true,
            "no_static_ip": true,
            "portal": {
              "amazon_client_id": "string",
              "amazon_client_secret": "string",
              "amazon_email_domains": [
                "string"
              ],
              "amazon_enabled": true,
              "auth": "string",
              "azure_client_id": "string",
              "azure_client_secret": "string",
              "azure_enabled": true,
              "azure_tenant_id": "string",
              "bypass_when_cloud_down": true,
              "email_enabled": true,
              "enabled": true,
              "expire": 0,
              "external_portal_url": "string",
              "facebook_client_id": "string",
              "facebook_client_secret": "string",
              "facebook_email_domains": [
                "string"
              ],
              "facebook_enabled": true,
              "forward": true,
              "forward_url": "string",
              "google_email_domains": [
                "string"
              ],
              "google_enabled": true,
              "microsoft_client_id": "string",
              "microsoft_client_secret": "string",
              "microsoft_email_domains": [
                "string"
              ],
              "microsoft_enabled": true,
              "passphrase_enabled": true,
              "password": "string",
              "portal_allowed_hostnames": "string",
              "portal_allowed_subnets": "string",
              "portal_api_secret": "string",
              "portal_denied_hostnames": "string",
              "portal_image": "string",
              "portal_sso_url": "string",
              "privacy": true,
              "sms_enabled": true,
              "sms_provider": "string",
              "sponsor_email_domains": [
                "string"
              ],
              "sponsor_enabled": true,
              "sponsor_link_validity_duration": "60",
              "sso_default_role": "string",
              "sso_idp_cert": "string",
              "sso_idp_sign_algo": "string",
              "sso_idp_sso_url": "string",
              "sso_issuer": "string",
              "thumbnail": "string",
              "twilio_auth_token": "string",
              "twilio_phone_number": "string",
              "twilio_sid": "string"
            },
            "portal_allowed_hostnames": [
              "string"
            ],
            "portal_allowed_subnets": [
              "string"
            ],
            "portal_api_secret": "string",
            "portal_denied_hostnames": [
              "string"
            ],
            "portal_image": "http://example.com",
            "portal_sso_url": "string",
            "portal_template_url": "string",
            "qos": {
              "class": "string",
              "overwrite": true
            },
            "radsec": {
              "enabled": true,
              "server_name": "string",
              "servers": [
                {
                  "host": "string",
                  "port": 0
                }
              ]
            },
            "rateset": {
              "5": {
                "ht": "string",
                "legacy": [
                  "string"
                ],
                "min_rssi": 0,
                "template": "string",
                "vht": "string"
              },
              "24": {
                "ht": "string",
                "legacy": [
                  "string"
                ],
                "min_rssi": 0,
                "template": "string",
                "vht": "string"
              }
            },
            "roam_mode": "11r",
            "schedule": {
              "enabled": true,
              "hours": {}
            },
            "sle_excluded": true,
            "ssid": "string",
            "thumbnail": "http://example.com",
            "use_eapol_v1": true,
            "vlan_enabled": true,
            "vlan_id": 1,
            "vlan_ids": [
              0
            ],
            "vlan_pooling": true,
            "wlan_limit_down": 0,
            "wlan_limit_down_enabled": true,
            "wlan_limit_up": 0,
            "wlan_limit_up_enabled": true,
            "wxtag_ids": [
              "string"
            ],
            "wxtunnel_id": "string",
            "wxtunnel_remote_id": "string"
          }
        }
      },
      "acct_server": {
        "description": "",
        "properties": {
          "host": {
            "description": "ip / hostname of RADIUS server",
            "type": "string"
          },
          "keywrap_enabled": {
            "type": "boolean"
          },
          "keywrap_format": {
            "type": "string"
          },
          "keywrap_kek": {
            "type": "string"
          },
          "keywrap_mack": {
            "type": "string"
          },
          "port": {
            "default": 1813,
            "description": "Acct port of RADIUS server",
            "type": "integer"
          },
          "secret": {
            "description": "secret of RADIUS server",
            "type": "string"
          }
        },
        "required": [
          "host",
          "port",
          "secret"
        ],
        "type": "object"
      },
      "wlan_airwatch": {
        "description": "airwatch wlan settings",
        "properties": {
          "api_key": {
            "description": "API Key",
            "type": "string"
          },
          "console_url": {
            "description": "console URL",
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "password": {
            "description": "password",
            "type": "string"
          },
          "username": {
            "description": "username",
            "type": "string"
          }
        },
        "type": "object"
      },
      "wlan_app_qos": {
        "description": "app qos wlan settings",
        "properties": {
          "apps": {
            "properties": {
              "skype-business-video": {
                "properties": {
                  "dscp": {
                    "type": "integer"
                  },
                  "dst_subnet": {
                    "type": "string"
                  },
                  "src_subnet": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "skype-business-voice": {
                "properties": {
                  "dscp": {
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "enabled": {
            "type": "boolean"
          },
          "others": {
            "items": {
              "properties": {
                "dscp": {
                  "type": "integer"
                },
                "dst_subnet": {
                  "type": "string"
                },
                "port_ranges": {
                  "type": "string"
                },
                "protocol": {
                  "type": "string"
                },
                "src_subnet": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object",
        "x-examples": {
          "example-1": {
            "apps": {
              "skype-business-video": {
                "dscp": 32,
                "dst_subnet": "10.2.0.0/16",
                "src_subnet": "10.2.0.0/16"
              },
              "skype-business-voice": {
                "dscp": 46
              }
            },
            "enabled": true,
            "others": [
              {
                "dscp": 32,
                "dst_subnet": "10.2.0.0/16",
                "port_ranges": "80,1024-65535",
                "protocol": "udp",
                "src_subnet": "10.2.0.0/16"
              }
            ]
          }
        }
      },
      "wlan_auth": {
        "description": "authentication wlan settings",
        "properties": {
          "anticlog_threshold": {
            "default": 16,
            "description": "SAE anti-clogging token threshold",
            "maximum": 32,
            "minimum": 16,
            "type": "integer"
          },
          "eap_reauth": {
            "default": false,
            "description": "whether to trigger EAP reauth when the session ends",
            "type": "boolean"
          },
          "enable_mac_auth": {
            "default": false,
            "description": "whether to enable MAC Auth, uses the same auth_servers",
            "type": "boolean"
          },
          "key_idx": {
            "default": 1,
            "description": "when type=wep",
            "maximum": 4,
            "minimum": 1,
            "type": "integer"
          },
          "keys": {
            "description": "when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length",
            "items": {
              "nullable": true,
              "type": "string"
            },
            "type": "array"
          },
          "multi_psk_only": {
            "default": false,
            "description": "whether to only use multi_psk",
            "type": "boolean"
          },
          "owe": {
            "type": "string"
          },
          "pairwise": {
            "default": [
              "wpa2-ccmp"
            ],
            "description": "when type=psk / eap, one or more of wpa2-ccmp / wpa1-tkip / wpa1-ccmp / wpa2-tkip",
            "items": {
              "nullable": true,
              "type": "string"
            },
            "type": "array"
          },
          "private_wlan": {
            "description": "whether private wlan is enabled. only applicable to multi_psk mode",
            "type": "boolean"
          },
          "psk": {
            "description": "when type=psk, 8-64 characters, or 64 hex characters",
            "maxLength": 64,
            "minLength": 8,
            "nullable": true,
            "type": "string"
          },
          "type": {
            "default": "open",
            "enum": [
              "open",
              "psk",
              "wep",
              "eap",
              "psk-tkip",
              "psk-wpa2-tkip"
            ],
            "type": "string"
          },
          "wep_as_secondary_auth": {
            "description": "enable WEP as secondary auth",
            "type": "boolean"
          }
        },
        "required": [
          "type"
        ],
        "type": "object",
        "x-examples": {
          "example-1": {
            "eap_reauth": true,
            "enable_mac_auth": true,
            "key_idx": 1,
            "keys": [
              "string"
            ],
            "multi_psk_only": true,
            "owe": "string",
            "private_wlan": true,
            "psk": "string123",
            "type": "string",
            "wep_as_secondary_auth": true
          }
        }
      },
      "auth_server": {
        "description": "Authentication Server",
        "properties": {
          "host": {
            "description": "ip / hostname of RADIUS server",
            "type": "string"
          },
          "keywrap_enabled": {
            "type": "boolean"
          },
          "keywrap_format": {
            "type": "string"
          },
          "keywrap_kek": {
            "type": "string"
          },
          "keywrap_mack": {
            "type": "string"
          },
          "port": {
            "default": 1812,
            "description": "Auth port of RADIUS server",
            "type": "integer"
          },
          "secret": {
            "description": "secret of RADIUS server",
            "type": "string"
          }
        },
        "required": [
          "host",
          "port",
          "secret"
        ],
        "type": "object"
      },
      "wlan_bonjour": {
        "description": "bonjour gateway wlan settings",
        "properties": {
          "additional_vlan_ids": {
            "description": "additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "enabled": {
            "default": false,
            "description": "whether to enable bonjour for this WLAN. Once enabled, limit_bcast is assumed true, allow_mdns is assumed false",
            "type": "boolean"
          },
          "services": {
            "additionalProperties": {
              "properties": {
                "disable_local": {
                  "default": false,
                  "description": "whether to prevent wireless clients to discover bonjour devices on the same WLAN",
                  "type": "boolean"
                },
                "radius_groups": {
                  "description": "optional, if the service is further restricted for certain RADIUS groups",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "scope": {
                  "description": "how bonjour services should be discovered for the same WLAN, same_site (default) / same_map / same_ap",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "what services are allowed",
            "type": "object"
          }
        },
        "required": [
          "services",
          "additional_vlan_ids"
        ],
        "type": "object",
        "x-examples": {
          "example-1": {
            "additional_vlan_ids": [
              80
            ],
            "enabled": true,
            "services": {
              "airplay": {
                "radius_groups": [
                  "teachers"
                ],
                "scope": "same_ap"
              },
              "airprint": {
                "scope": "same_map"
              }
            }
          }
        }
      },
      "wlan_cisco_cwa": {
        "description": "Cisco CWA (central web authentication) required RADIUS with COA in order to work. See CWA: https://www.cisco.com/c/en/us/support/docs/security/identity-services-engine/115732-central-web-auth-00.html\n",
        "properties": {
          "allowed_hostnames": {
            "description": "list of hostnames without http(s):// (matched by substring)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "allowed_subnets": {
            "description": "list of CIDRs",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "blocked_subnets": {
            "description": "list of blocked CIDRs",
            "items": {
              "example": "192.168.0.0/16",
              "type": "string"
            },
            "type": "array"
          },
          "enabled": {
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "coa_server": {
        "description": "CoA Server",
        "properties": {
          "disable_event_timestamp_check": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "ip": {
            "format": "ipv4",
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "enabled",
          "ip",
          "port",
          "secret",
          "disable_event_timestamp_check"
        ],
        "type": "object"
      },
      "wlan_hotspot_20": {
        "description": "hostspot 2.0 wlan settings",
        "properties": {
          "enabled": {
            "description": "whether to enable hotspot 2.0 config",
            "type": "boolean"
          },
          "operators": {
            "description": "list of operators to support, options: att, google, tmobile, charter, boingo, hughes_systique, single_digits, global_reach",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "venue_name": {
            "description": "venue name, default is site name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "wlan_portal": {
        "description": "portal wlan settings",
        "properties": {
          "allow_wlan_id_roam": {
            "default": false,
            "description": "whether to allow guest roam between different wlan_ids (same ssid). requires cross_site enabled",
            "type": "boolean"
          },
          "amazon_client_id": {
            "description": "amazon OAuth2 client id. This is optional. If not provided, it will use a default one.",
            "nullable": true,
            "type": "string"
          },
          "amazon_client_secret": {
            "description": "amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.",
            "nullable": true,
            "type": "string"
          },
          "amazon_email_domains": {
            "description": "Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "amazon_enabled": {
            "description": "whether amazon is enabled as a login method",
            "type": "boolean"
          },
          "auth": {
            "default": "none",
            "description": "authentication scheme",
            "enum": [
              "none",
              "email",
              "external",
              "sso"
            ],
            "nullable": true,
            "type": "string"
          },
          "azure_client_id": {
            "description": "azure active directory app client id",
            "nullable": true,
            "type": "string"
          },
          "azure_client_secret": {
            "description": "azure active directory app client secret",
            "nullable": true,
            "type": "string"
          },
          "azure_enabled": {
            "description": "whether Azure Active Directory is enabled as a login method",
            "type": "boolean"
          },
          "azure_tenant_id": {
            "description": "azure active directory tenant id.",
            "nullable": true,
            "type": "string"
          },
          "broadnet_password": {
            "description": "when `sms_provider`==`broadnet`",
            "type": "string"
          },
          "broadnet_sid": {
            "description": "when `sms_provider`==`broadnet`",
            "type": "string"
          },
          "broadnet_user_id": {
            "description": "when `sms_provider`==`broadnet`",
            "type": "string"
          },
          "bypass_when_cloud_down": {
            "default": false,
            "description": "whether to bypass the guest portal when cloud not reachable (and apply the default policies)",
            "type": "boolean"
          },
          "clickatell_api_key": {
            "description": "when `sms_provider`==`clickatell`",
            "type": "string"
          },
          "cross_site": {
            "default": false,
            "description": "whether to allow guest to roam between sites of same org without reauthentication",
            "type": "boolean"
          },
          "email_enabled": {
            "description": "whether email (access code verification) is enabled as a login method",
            "type": "boolean"
          },
          "enabled": {
            "default": false,
            "description": "whether guest portal is enabled",
            "type": "boolean"
          },
          "expire": {
            "default": 1440,
            "description": "how long to remain authorized, in minutes",
            "type": "number"
          },
          "external_portal_url": {
            "description": "external portal URL (e.g. https://host/url) where we can append our query parameters to",
            "type": "string"
          },
          "facebook_client_id": {
            "description": "facebook OAuth2 app id. This is optional. If not provided, it will use a default one.",
            "nullable": true,
            "type": "string"
          },
          "facebook_client_secret": {
            "description": "facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.",
            "nullable": true,
            "type": "string"
          },
          "facebook_email_domains": {
            "description": "Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "facebook_enabled": {
            "description": "whether facebook is enabled as a login method",
            "type": "boolean"
          },
          "forward": {
            "default": false,
            "description": "whether to forward the user to another URL after authorized",
            "type": "boolean"
          },
          "forward_url": {
            "description": "the URL to forward the user to",
            "nullable": true,
            "type": "string"
          },
          "google_client_id": {
            "description": "Google OAuth2 app id. This is optional. If not provided, it will use a default one.",
            "nullable": true,
            "type": "string"
          },
          "google_client_secret": {
            "description": "Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.",
            "nullable": true,
            "type": "string"
          },
          "google_email_domains": {
            "description": "Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "google_enabled": {
            "description": "whether google is enabled as login method",
            "type": "boolean"
          },
          "gupshup_password": {
            "description": "when `sms_provider`==`gupshup`",
            "type": "string"
          },
          "gupshup_userid": {
            "description": "when `sms_provider`==`gupshup`",
            "type": "string"
          },
          "microsoft_client_id": {
            "description": "microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.",
            "nullable": true,
            "type": "string"
          },
          "microsoft_client_secret": {
            "description": "microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.",
            "nullable": true,
            "type": "string"
          },
          "microsoft_email_domains": {
            "description": "Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "microsoft_enabled": {
            "description": "whether microsoft 365 is enabled as a login method",
            "type": "boolean"
          },
          "passphrase_enabled": {
            "description": "whether password is enabled",
            "type": "boolean"
          },
          "password": {
            "description": "passphrase",
            "nullable": true,
            "type": "string"
          },
          "portal_allowed_hostnames": {
            "description": "list of hostnames without http(s):// (matched by substring)",
            "type": "string"
          },
          "portal_allowed_subnets": {
            "description": "list of CIDRs",
            "type": "string"
          },
          "portal_api_secret": {
            "description": "api secret (auto-generated) that can be used to sign guest authorization requests",
            "type": "string"
          },
          "portal_denied_hostnames": {
            "description": "list of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames",
            "type": "string"
          },
          "portal_image": {
            "description": "Url of portal background image",
            "type": "string"
          },
          "portal_sso_url": {
            "description": "for SAML, this is used as the ACS URL",
            "type": "string"
          },
          "predefined_sponsors_enabled": {
            "default": true,
            "description": "whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains\\",
            "type": "boolean"
          },
          "privacy": {
            "type": "boolean"
          },
          "puzzel_password": {
            "description": "when `sms_provider`==`puzzel`",
            "type": "string"
          },
          "puzzel_service_id": {
            "description": "when `sms_provider`==`puzzel`",
            "type": "string"
          },
          "puzzel_username": {
            "description": "when `sms_provider`==`puzzel`",
            "type": "string"
          },
          "smsMessageFormat": {
            "type": "string"
          },
          "sms_enabled": {
            "description": "whether sms is enabled as a login method",
            "type": "boolean"
          },
          "sms_provider": {
            "default": "manual",
            "enum": [
              "manual",
              "twilio",
              "broadnet",
              "clickatell",
              "puzzel",
              "gupshup",
              "telstra"
            ],
            "type": "string"
          },
          "sponsor_auto_approve": {
            "default": false,
            "description": "whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled",
            "type": "boolean"
          },
          "sponsor_email_domains": {
            "description": "list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sponsor_enabled": {
            "description": "whether sponsor is enabled",
            "type": "boolean"
          },
          "sponsor_link_validity_duration": {
            "description": "how long to remain valid sponsored guest request approve/deny link received in email, in minutes.",
            "type": "string"
          },
          "sponsor_notify_all": {
            "default": false,
            "description": "whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.",
            "type": "boolean"
          },
          "sponsors": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "object of allowed sponsors email with name. Required if `sponsor_enabled` is `true` and `sponsor_email_domains` is empty.",
            "type": "object"
          },
          "sso_default_role": {
            "description": "default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched",
            "type": "string"
          },
          "sso_forced_role": {
            "type": "string"
          },
          "sso_idp_cert": {
            "description": "IDP Cert (used to verify the signed response)",
            "type": "string"
          },
          "sso_idp_sign_algo": {
            "description": "signing algorithm for SAML Assertion",
            "type": "string"
          },
          "sso_idp_sso_url": {
            "description": "IDP Single-Sign-On URL",
            "type": "string"
          },
          "sso_issuer": {
            "description": "IDP issuer URL",
            "type": "string"
          },
          "sso_nameid_format": {
            "default": "email",
            "enum": [
              "email",
              "unspecified"
            ],
            "type": "string"
          },
          "telstra_client_id": {
            "description": "when `sms_provider`==`telstra`, Client ID provided by Telstra",
            "type": "string"
          },
          "telstra_client_secret": {
            "description": "when `sms_provider`==`telstra`, Client secret provided by Telstra",
            "type": "string"
          },
          "thumbnail": {
            "description": "Url of portal background image thumbnail",
            "type": "string"
          },
          "twilio_auth_token": {
            "description": "when `sms_provider`==`twilio`, Auth token account with twilio account",
            "nullable": true,
            "type": "string"
          },
          "twilio_phone_number": {
            "description": "when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.",
            "nullable": true,
            "type": "string"
          },
          "twilio_sid": {
            "description": "when `sms_provider`==`twilio`, Account SID provided by Twilio",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object",
        "x-examples": {
          "example-1": {
            "amazon_client_id": "string",
            "amazon_client_secret": "string",
            "amazon_email_domains": [
              "string"
            ],
            "amazon_enabled": true,
            "auth": "none",
            "azure_client_id": "string",
            "azure_client_secret": "string",
            "azure_enabled": true,
            "azure_tenant_id": "string",
            "broadnet_password": "string",
            "broadnet_sid": "string",
            "broadnet_user_id": "string",
            "bypass_when_cloud_down": false,
            "clickatell_api_key": "string",
            "email_enabled": true,
            "enabled": false,
            "expire": 1440,
            "external_portal_url": "string",
            "facebook_client_id": "string",
            "facebook_client_secret": "string",
            "facebook_email_domains": [
              "string"
            ],
            "facebook_enabled": true,
            "forward": false,
            "forward_url": "string",
            "google_client_id": "string",
            "google_client_secret": "string",
            "google_email_domains": [
              "string"
            ],
            "google_enabled": true,
            "gupshup_password": "string",
            "gupshup_userid": "string",
            "microsoft_client_id": "string",
            "microsoft_client_secret": "string",
            "microsoft_email_domains": [
              "string"
            ],
            "microsoft_enabled": true,
            "passphrase_enabled": true,
            "password": "string",
            "portal_allowed_hostnames": "string",
            "portal_allowed_subnets": "string",
            "portal_api_secret": "string",
            "portal_denied_hostnames": "string",
            "portal_image": "string",
            "portal_sso_url": "string",
            "predefined_sponsors_enabled": true,
            "privacy": true,
            "puzzel_password": "string",
            "puzzel_service_id": "string",
            "puzzel_username": "string",
            "smsMessageFormat": "string",
            "sms_enabled": true,
            "sms_provider": "manual",
            "sponsor_email_domains": [
              "string"
            ],
            "sponsor_enabled": true,
            "sponsor_link_validity_duration": "string",
            "sponsor_notify_all": false,
            "sponsors": {
              "property1": "string",
              "property2": "string"
            },
            "sso_default_role": "string",
            "sso_forced_role": "string",
            "sso_idp_cert": "string",
            "sso_idp_sign_algo": "string",
            "sso_idp_sso_url": "string",
            "sso_issuer": "string",
            "sso_nameid_format": "email",
            "thumbnail": "string",
            "twilio_auth_token": "string",
            "twilio_phone_number": "string",
            "twilio_sid": "string"
          }
        }
      },
      "radsec": {
        "description": "Radsec settings",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "idle_timeout": {
            "type": "integer"
          },
          "mxcluster_ids": {
            "description": "To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.\nOrg mxedge(s) identified by mxcluster_ids",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "server_name": {
            "description": "name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.",
            "type": "string"
          },
          "servers": {
            "description": "List of Radsec Servers. Only if not Mist Edge.",
            "items": {
              "properties": {
                "host": {
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array",
            "uniqueItems": true
          },
          "use_mxedge": {
            "description": "use mxedge(s) as radsecproxy",
            "type": "boolean"
          },
          "use_site_mxedge": {
            "default": false,
            "description": "To use Site mxedges when this WLAN does not use mxtunnel",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "wlan_datarates": {
        "description": "data rates wlan settings",
        "properties": {
          "ht": {
            "description": "MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)",
            "nullable": true,
            "type": "string"
          },
          "legacy": {
            "description": "list of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "min_rssi": {
            "description": "Minimum RSSI for client to connect, 0 means not enforcing",
            "type": "integer"
          },
          "template": {
            "description": "* `no-legacy`: no 11b\n* `compatible`: all, like before, default setting that Broadcom/Atheros used\n* `legacy-only`: disable 802.11n and 802.11ac \n* `high-density`: no 11b, no low rates\n* `custom`: user defined",
            "nullable": true,
            "type": "string"
          },
          "vht": {
            "description": "MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://api.mist.com/api/v1/orgs/{org_id}/secpolicies"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Security Policy is designed to audit / catch discripancies between “what’s intended to be running” versus “what’s actually running” in a network. Many big organizations have separated Security and IT team (for good reasons). Each site can be assigned a security policy. Whenever an AP is provisioned, the configuration will be checked against the security policy. Any violations will be flagged in Device Config History where you can search for the when and where the violation occurs.",
        "**Key properties:**",
        {
          "$ul": [
            "**created_time**",
            "**id**",
            "**modified_time**",
            "**name**",
            "**org_id**",
            "**site_id**",
            "**wlans**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
