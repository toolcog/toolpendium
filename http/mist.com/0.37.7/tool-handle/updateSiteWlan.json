{
  "name": "updateSiteWlan",
  "description": "Update Site WLAN",
  "parameters": {
    "type": "object",
    "properties": {
      "site_id": {
        "example": "000000ab-00ab-00ab-00ab-0000000000ab",
        "format": "uuid",
        "type": "string"
      },
      "wlan_id": {
        "example": "000000ab-00ab-00ab-00ab-0000000000ab",
        "format": "uuid",
        "type": "string"
      },
      "body": {
        "$ref": "#/components/schemas/wlan",
        "description": "Request Body"
      }
    },
    "required": [
      "site_id",
      "wlan_id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://api.mist.com/api/v1/sites/{site_id}/wlans/{wlan_id}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "WLAN\n\n**Note**: portal_template will be forked out of wlan objects soon. To fetch portal_template, please query portal_template_url. To update portal_template, use Wlan Portal Template.",
        "**Key properties:**",
        {
          "$ul": [
            "**acct_interim_interval**: how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled (default: 0)",
            "**acct_servers**: list of RADIUS accounting servers, optional, order matters where the first one is treated as primary",
            [
              "**airwatch**: airwatch wlan settings",
              {
                "$ul": [
                  "**api_key**: API Key",
                  "**console_url**: console URL",
                  "**enabled**",
                  "**password**: password",
                  "**username**: username"
                ]
              }
            ],
            "**allow_ipv6_ndp**: only applicable when limit_bcast==true, which allows or disallows ipv6 Neighbor Discovery packets to go through (default: true)",
            "**allow_mdns**: only applicable when limit_bcast==true, which allows mDNS / Bonjour packets to go through (default: false)",
            "**allow_ssdp**: only applicable when `limit_bcast`==`tru`e, which allows SSDP (default: false)",
            "**ap_ids**: list of device ids",
            [
              "**app_limit**: bandwidth limiting for apps (applies to up/down)",
              {
                "$ul": [
                  "**apps**: map from app key to bandwidth in kbps. app key defined in Get Application List",
                  "**enabled**",
                  "**wxtag_ids**: map from wxtag_id of Hostname Wxlan Tags to bandwidth in kbps"
                ]
              }
            ],
            [
              "**app_qos**: app qos wlan settings",
              {
                "$ul": [
                  [
                    "**apps**",
                    {
                      "$ul": [
                        [
                          "**skype-business-video**",
                          {
                            "$ul": [
                              "**dscp**",
                              "**dst_subnet**",
                              "**src_subnet**"
                            ]
                          }
                        ],
                        [
                          "**skype-business-voice**",
                          {
                            "$ul": [
                              "**dscp**"
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**enabled**",
                  "**others**"
                ]
              }
            ],
            "**apply_to**",
            "**arp_filter**: whether to enable smart arp filter (default: false)",
            [
              "**auth**: authentication wlan settings",
              {
                "$ul": [
                  "**anticlog_threshold**: SAE anti-clogging token threshold (default: 16)",
                  "**eap_reauth**: whether to trigger EAP reauth when the session ends (default: false)",
                  "**enable_mac_auth**: whether to enable MAC Auth, uses the same auth_servers (default: false)",
                  "**key_idx**: when type=wep (default: 1)",
                  "**keys**: when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length",
                  "**multi_psk_only**: whether to only use multi_psk (default: false)",
                  "**owe**",
                  "**pairwise**: when type=psk / eap, one or more of wpa2-ccmp / wpa1-tkip / wpa1-ccmp / wpa2-tkip (default: wpa2-ccmp)",
                  "**private_wlan**: whether private wlan is enabled. only applicable to multi_psk mode",
                  "**psk**: when type=psk, 8-64 characters, or 64 hex characters",
                  "**type** (default: open)",
                  "**wep_as_secondary_auth**: enable WEP as secondary auth"
                ]
              }
            ],
            "**auth_server_selection**: When ordered, AP will prefer and go back to the first server if possible (default: ordered)",
            "**auth_servers**: list of RADIUS authentication servers, at least one is needed if `auth type`==`eap`, order matters where the first one is treated as primary",
            "**auth_servers_nas_id**: optional, up to 48 bytes, will be dynamically generated if not provided. used only for authentication servers",
            "**auth_servers_nas_ip**: optional, NAS-IP-ADDRESS to use",
            "**auth_servers_retries**: radius auth session retries (default: 2)",
            "**auth_servers_timeout**: radius auth session timeout (default: 5)",
            "**band**: `band` is deprecated and kept for backward compability. Use bands instead",
            "**band_steer**: whether to enable band_steering, this works only when band==both (default: false)",
            "**band_steer_force_band5**: force dual-band capable client to connect to 5G (default: false)",
            "**bands**: list of radios that the wlan should apply to (default: 24,5)",
            "**block_blacklist_clients**: whether to block the clients in the blacklist (up to first 256 macs)",
            [
              "**bonjour**: bonjour gateway wlan settings",
              {
                "$ul": [
                  "**additional_vlan_ids**: additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses",
                  "**enabled**: whether to enable bonjour for this WLAN. Once enabled, limit_bcast is assumed true, allow_mdns is assumed false (default: false)",
                  "**services**: what services are allowed"
                ]
              }
            ],
            [
              "**cisco_cwa**: Cisco CWA (central web authentication) required RADIUS with COA in order to work. See CWA: https://www.cisco.com/c/en/us/support/docs/security/identity-services-engine/115732-central-web-auth-00.html",
              {
                "$ul": [
                  "**allowed_hostnames**: list of hostnames without http(s):// (matched by substring)",
                  "**allowed_subnets**: list of CIDRs",
                  "**blocked_subnets**: list of blocked CIDRs",
                  "**enabled** (default: false)"
                ]
              }
            ],
            "**client_limit_down**: kbps",
            "**client_limit_down_enabled**: if downlink limiting per-client is enabled (default: false)",
            "**client_limit_up**: kbps",
            "**client_limit_up_enabled**: if uplink limiting per-client is enabled (default: false)",
            "**coa_servers**: list of COA (change of authorization) servers, optional",
            "**created_time**",
            "**disable_11ax**: some old WLAN drivers may not be compatible (default: false)",
            "**disable_ht_vht_rates**: to disable ht or vht rates (default: false)",
            "**disable_uapsd**: whether to disable U-APSD (default: false)",
            "**disable_v1_roam_notify**: disable sending v2 roam notification messages (default: true)",
            "**disable_v2_roam_notify**: disable sending v2 roam notification messages (default: false)",
            "**disable_wmm**: whether to disable WMM (default: false)",
            [
              "**dns_server_rewrite**: for radius_group-based DNS server (rewrite DNS request depending on the Group RADIUS server returns)",
              {
                "$ul": [
                  "**enabled**",
                  "**radius_groups**: map between radius_group and the desired DNS server (IPv4 only)"
                ]
              }
            ],
            "**dtim** (default: 2)",
            [
              "**dynamic_psk**: for dynamic PSK where we get per-user PSK from Radius",
              {
                "$ul": [
                  "**default_psk**: default PSK to use if cloud WLC is not available, 8-63 characters",
                  "**default_vlan_id**",
                  "**enabled**",
                  "**source** (default: radius)",
                  "**vlan_ids**"
                ]
              }
            ],
            [
              "**dynamic_vlan**: for 802.1x",
              {
                "$ul": [
                  "**default_vlan_id**: vlan_id to use when there’s no match from RADIUS (default: 999)",
                  "**enabled**: whether to enable dynamic vlan (default: false)",
                  "**local_vlan_ids**: vlan_ids to be locally bridged",
                  "**type**: standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco)",
                  "**vlans**: map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping"
                ]
              }
            ],
            "**enable_local_keycaching**: enable AP-AP keycaching via multicast (default: false)",
            "**enable_wireless_bridging**: whether to enable wireless bridging, which allows more broadcast packets to go through",
            "**enabled**: if this wlan is enabled (default: true)",
            "**for_site**",
            "**hide_ssid**: whether to hide SSID in beacon (default: false)",
            "**hostname_ie**: include hostname inside IE in AP beacons / probe responses (default: false)",
            [
              "**hotspot20**: hostspot 2.0 wlan settings",
              {
                "$ul": [
                  "**enabled**: whether to enable hotspot 2.0 config",
                  "**operators**: list of operators to support, options: att, google, tmobile, charter, boingo, hughes_systique, single_digits, global_reach",
                  "**venue_name**: venue name, default is site name"
                ]
              }
            ],
            "**id**",
            "**interface**: where this WLAN will be connected to (default: all)",
            "**isolation**: whether to allow clients to talk to each other (default: false)",
            "**l2_isolation**: if isolation is enabled, whether to deny clients to talk to L2 on the LAN (default: false)",
            "**legacy_overds**: legacy devices requires the Over-DS (for Fast BSS Transition) bit set (while our chip doesn’t support it). Warning! Enabling this will cause problem for iOS devices.",
            "**limit_bcast**: whether to limit broadcast packets going to wireless (i.e. only allow certain bcast packets to go through) (default: false)",
            "**limit_probe_response**: limit probe response base on some heuristic rules",
            "**max_idletime**: max idle time in seconds (default: 1800)",
            [
              "**mist_nac**",
              {
                "$ul": [
                  "**enabled**: when enabled:"
                ]
              }
            ],
            "**modified_time**",
            "**msp_id**",
            "**mxtunnel**: when `interface`=`site_medge`, the definition of the Mist Tunnels (key is the name)",
            "**mxtunnel_id**: when `interface`=`mxtunnel`, id of the Mist Tunnel",
            "**mxtunnel_name**: when `interface`=`site_medge`, name of the mxtunnel that in mxtunnels under Site Setting (default: default)",
            "**no_static_dns**: whether to only allow client to use DNS that we’ve learned from DHCP response (default: false)",
            "**no_static_ip**: whether to only allow client that we’ve learned from DHCP exchange to talk (default: false)",
            "**org_id**",
            [
              "**portal**: portal wlan settings",
              {
                "$ul": [
                  "**allow_wlan_id_roam**: whether to allow guest roam between different wlan_ids (same ssid). requires cross_site enabled (default: false)",
                  "**amazon_client_id**: amazon OAuth2 client id. This is optional. If not provided, it will use a default one.",
                  "**amazon_client_secret**: amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.",
                  "**amazon_email_domains**: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.",
                  "**amazon_enabled**: whether amazon is enabled as a login method",
                  "**auth**: authentication scheme (default: none)",
                  "**azure_client_id**: azure active directory app client id",
                  "**azure_client_secret**: azure active directory app client secret",
                  "**azure_enabled**: whether Azure Active Directory is enabled as a login method",
                  "**azure_tenant_id**: azure active directory tenant id.",
                  "**broadnet_password**: when `sms_provider`==`broadnet`",
                  "**broadnet_sid**: when `sms_provider`==`broadnet`",
                  "**broadnet_user_id**: when `sms_provider`==`broadnet`",
                  "**bypass_when_cloud_down**: whether to bypass the guest portal when cloud not reachable (and apply the default policies) (default: false)",
                  "**clickatell_api_key**: when `sms_provider`==`clickatell`",
                  "**cross_site**: whether to allow guest to roam between sites of same org without reauthentication (default: false)",
                  "**email_enabled**: whether email (access code verification) is enabled as a login method",
                  "**enabled**: whether guest portal is enabled (default: false)",
                  "**expire**: how long to remain authorized, in minutes (default: 1440)",
                  "**external_portal_url**: external portal URL (e.g. https://host/url) where we can append our query parameters to",
                  "**facebook_client_id**: facebook OAuth2 app id. This is optional. If not provided, it will use a default one.",
                  "**facebook_client_secret**: facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.",
                  "**facebook_email_domains**: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.",
                  "**facebook_enabled**: whether facebook is enabled as a login method",
                  "**forward**: whether to forward the user to another URL after authorized (default: false)",
                  "**forward_url**: the URL to forward the user to",
                  "**google_client_id**: Google OAuth2 app id. This is optional. If not provided, it will use a default one.",
                  "**google_client_secret**: Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.",
                  "**google_email_domains**: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.",
                  "**google_enabled**: whether google is enabled as login method",
                  "**gupshup_password**: when `sms_provider`==`gupshup`",
                  "**gupshup_userid**: when `sms_provider`==`gupshup`",
                  "**microsoft_client_id**: microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.",
                  "**microsoft_client_secret**: microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.",
                  "**microsoft_email_domains**: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.",
                  "**microsoft_enabled**: whether microsoft 365 is enabled as a login method",
                  "**passphrase_enabled**: whether password is enabled",
                  "**password**: passphrase",
                  "**portal_allowed_hostnames**: list of hostnames without http(s):// (matched by substring)",
                  "**portal_allowed_subnets**: list of CIDRs",
                  "**portal_api_secret**: api secret (auto-generated) that can be used to sign guest authorization requests",
                  "**portal_denied_hostnames**: list of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames",
                  "**portal_image**: Url of portal background image",
                  "**portal_sso_url**: for SAML, this is used as the ACS URL",
                  "**predefined_sponsors_enabled**: whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains\\ (default: true)",
                  "**privacy**",
                  "**puzzel_password**: when `sms_provider`==`puzzel`",
                  "**puzzel_service_id**: when `sms_provider`==`puzzel`",
                  "**puzzel_username**: when `sms_provider`==`puzzel`",
                  "**smsMessageFormat**",
                  "**sms_enabled**: whether sms is enabled as a login method",
                  "**sms_provider** (default: manual)",
                  "**sponsor_auto_approve**: whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled (default: false)",
                  "**sponsor_email_domains**: list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.",
                  "**sponsor_enabled**: whether sponsor is enabled",
                  "**sponsor_link_validity_duration**: how long to remain valid sponsored guest request approve/deny link received in email, in minutes.",
                  "**sponsor_notify_all**: whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order. (default: false)",
                  "**sponsors**: object of allowed sponsors email with name. Required if `sponsor_enabled` is `true` and `sponsor_email_domains` is empty.",
                  "**sso_default_role**: default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched",
                  "**sso_forced_role**",
                  "**sso_idp_cert**: IDP Cert (used to verify the signed response)",
                  "**sso_idp_sign_algo**: signing algorithm for SAML Assertion",
                  "**sso_idp_sso_url**: IDP Single-Sign-On URL",
                  "**sso_issuer**: IDP issuer URL",
                  "**sso_nameid_format** (default: email)",
                  "**telstra_client_id**: when `sms_provider`==`telstra`, Client ID provided by Telstra",
                  "**telstra_client_secret**: when `sms_provider`==`telstra`, Client secret provided by Telstra",
                  "**thumbnail**: Url of portal background image thumbnail",
                  "**twilio_auth_token**: when `sms_provider`==`twilio`, Auth token account with twilio account",
                  "**twilio_phone_number**: when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.",
                  "**twilio_sid**: when `sms_provider`==`twilio`, Account SID provided by Twilio"
                ]
              }
            ],
            "**portal_allowed_hostnames**: list of hostnames without http(s):// (matched by substring)",
            "**portal_allowed_subnets**: list of CIDRs",
            "**portal_api_secret**: api secret (auto-generated) that can be used to sign guest authorization requests",
            "**portal_denied_hostnames**: list of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames",
            "**portal_image**: Url of portal background image",
            "**portal_sso_url**",
            "**portal_template_url**: N.B portal_template will be forked out of wlan objects soon. To fetch portal_template, please query portal_template_url. To update portal_template, use Wlan Portal Template.",
            [
              "**qos**",
              {
                "$ul": [
                  "**class** (default: best_effort)",
                  "**overwrite**: whether to overwrite QoS (default: false)"
                ]
              }
            ],
            [
              "**radsec**: Radsec settings",
              {
                "$ul": [
                  "**enabled**",
                  "**idle_timeout**",
                  "**mxcluster_ids**: To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.",
                  "**server_name**: name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.",
                  "**servers**: List of Radsec Servers. Only if not Mist Edge.",
                  "**use_mxedge**: use mxedge(s) as radsecproxy",
                  "**use_site_mxedge**: To use Site mxedges when this WLAN does not use mxtunnel (default: false)"
                ]
              }
            ],
            [
              "**rateset**",
              {
                "$ul": [
                  [
                    "**5**: data rates wlan settings",
                    {
                      "$ul": [
                        "**ht**: MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)",
                        "**legacy**: list of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values",
                        "**min_rssi**: Minimum RSSI for client to connect, 0 means not enforcing",
                        "**template**: * `no-legacy`: no 11b",
                        "**vht**: MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams."
                      ]
                    }
                  ],
                  [
                    "**24**: data rates wlan settings",
                    {
                      "$ul": [
                        "**ht**: MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)",
                        "**legacy**: list of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values",
                        "**min_rssi**: Minimum RSSI for client to connect, 0 means not enforcing",
                        "**template**: * `no-legacy`: no 11b",
                        "**vht**: MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**roam_mode** (default: none)",
            [
              "**schedule**: WLAN operating schedule, default is disabled",
              {
                "$ul": [
                  "**enabled** (default: false)",
                  "**hours**: time ranges, the key is mon / tue / wed / thu / fri / sat / sun, the value is time range in “HH:MM-HH:MM” (24-hour format), the minimum resolution is 30 minute"
                ]
              }
            ],
            "**site_id**",
            "**sle_excluded**: whether to exclude this WLAN from SLE metrics (default: false)",
            "**ssid**: the name of the SSID",
            "**template_id**",
            "**thumbnail**: Url of portal background image thumbnail",
            "**use_eapol_v1**: if `auth.type`==’eap’ or ‘psk’, should only be set for legacy client, such as pre-2004, 802.11b devices (default: false)",
            "**vlan_enabled**: if vlan tagging is enabled (default: false)",
            "**vlan_id**",
            "**vlan_ids**: list of VLAN ids",
            "**vlan_pooling**: vlan pooling allows AP to place client on different VLAN using a deterministic algorithm (default: false)",
            "**wlan_limit_down**: kbps",
            "**wlan_limit_down_enabled**: if downlink limiting for whole wlan is enabled (default: false)",
            "**wlan_limit_up**: kbps",
            "**wlan_limit_up_enabled**: if uplink limiting for whole wlan is enabled (default: false)",
            "**wxtag_ids**: list of wxtag_ids",
            "**wxtunnel_id**: when `interface`=`wxtunnel`, id of the WXLAN Tunnel",
            "**wxtunnel_remote_id**: when `interface`=`wxtunnel`, remote tunnel identifier"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
