{
  "name": "getVideos",
  "description": "List videos",
  "parameters": {
    "type": "object",
    "properties": {
      "categoryOneOf": {
        "oneOf": [
          {
            "$ref": "#/$defs/VideoCategorySet"
          },
          {
            "items": {
              "$ref": "#/$defs/VideoCategorySet"
            },
            "type": "array"
          }
        ],
        "description": "category id of the video (see [/videos/categories](#operation/getCategories))"
      },
      "isLive": {
        "type": "boolean",
        "description": "whether or not the video is a live"
      },
      "tagsOneOf": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "items": {
              "type": "string"
            },
            "maxItems": 5,
            "type": "array"
          }
        ],
        "description": "tag(s) of the video"
      },
      "tagsAllOf": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        ],
        "description": "tag(s) of the video, where all should be present in the video"
      },
      "licenceOneOf": {
        "oneOf": [
          {
            "$ref": "#/$defs/VideoLicenceSet"
          },
          {
            "items": {
              "$ref": "#/$defs/VideoLicenceSet"
            },
            "type": "array"
          }
        ],
        "description": "licence id of the video (see [/videos/licences](#operation/getLicences))"
      },
      "languageOneOf": {
        "oneOf": [
          {
            "$ref": "#/$defs/VideoLanguageSet"
          },
          {
            "items": {
              "$ref": "#/$defs/VideoLanguageSet"
            },
            "type": "array"
          }
        ],
        "description": "language id of the video (see [/videos/languages](#operation/getLanguages)). Use `_unknown` to filter on videos that don't have a video language"
      },
      "nsfw": {
        "enum": [
          "true",
          "false"
        ],
        "type": "string",
        "description": "whether to include nsfw videos, if any"
      },
      "isLocal": {
        "type": "boolean",
        "description": "**PeerTube >= 4.0** Display only local or remote videos"
      },
      "include": {
        "enum": [
          0,
          1,
          2,
          4,
          8
        ],
        "type": "integer",
        "description": "**PeerTube >= 4.0** Include additional videos in results (can be combined using bitwise or operator)\n- `0` NONE\n- `1` NOT_PUBLISHED_STATE\n- `2` BLACKLISTED\n- `4` BLOCKED_OWNER\n- `8` FILES\n"
      },
      "privacyOneOf": {
        "$ref": "#/components/schemas/VideoPrivacySet",
        "description": "**PeerTube >= 4.0** Display only videos in this specific privacy/privacies"
      },
      "hasHLSFiles": {
        "type": "boolean",
        "description": "**PeerTube >= 4.0** Display only videos that have HLS files"
      },
      "hasWebtorrentFiles": {
        "type": "boolean",
        "description": "**PeerTube >= 4.0** Display only videos that have WebTorrent files"
      },
      "skipCount": {
        "default": "false",
        "enum": [
          "true",
          "false"
        ],
        "type": "string",
        "description": "if you don't need the `total` in the response"
      },
      "start": {
        "minimum": 0,
        "type": "integer",
        "description": "Offset used to paginate results"
      },
      "count": {
        "default": 15,
        "maximum": 100,
        "minimum": 1,
        "type": "integer",
        "description": "Number of items to return"
      },
      "sort": {
        "description": "Sort videos by criteria (prefixing with `-` means `DESC` order):\n  * `hot` - Adaptation of Reddit \"hot\" algorithm taking into account video views, likes, dislikes and comments and publication date\n  * `best` - Same than `hot`, but also takes into account user video history\n  * `trending` - Sort videos by recent views (\"recent\" is defined by the admin)\n  * `views` - Sort videos using their `views` counter\n  * `publishedAt` - Sort by video publication date (when it became publicly available)\n",
        "enum": [
          "name",
          "-duration",
          "-createdAt",
          "-publishedAt",
          "-views",
          "-likes",
          "-trending",
          "-hot",
          "-best"
        ],
        "type": "string"
      },
      "excludeAlreadyWatched": {
        "type": "boolean",
        "description": "Whether or not to exclude videos that are in the user's video history"
      }
    },
    "$defs": {
      "VideoCategorySet": {
        "description": "category id of the video (see [/videos/categories](#operation/getCategories))",
        "example": 15,
        "type": "integer"
      },
      "VideoLicenceSet": {
        "description": "licence id of the video (see [/videos/licences](#operation/getLicences))",
        "example": 2,
        "type": "integer"
      },
      "VideoLanguageSet": {
        "description": "language id of the video (see [/videos/languages](#operation/getLanguages))",
        "example": "en",
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://peertube2.cpy.re/api/v1/videos{?categoryOneOf,isLive,tagsOneOf,tagsAllOf,licenceOneOf,languageOneOf,nsfw,isLocal,include,privacyOneOf,hasHLSFiles,hasWebtorrentFiles,skipCount,start,count,sort,excludeAlreadyWatched}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**data**",
            "**total**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
