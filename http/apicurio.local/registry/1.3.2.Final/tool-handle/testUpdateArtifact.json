{
  "name": "testUpdateArtifact",
  "description": "Tests whether an update to the artifact's content *would* succeed for the provided content.\nUltimately, this applies any rules configured for the artifact against the given content\nto determine whether the rules would pass or fail, but without actually updating the artifact\ncontent.\n\nThe body of the request should be the raw content of the artifact.  This is typically in \nJSON format for *most* of the supported types, but may be in another format for a few \n(for example, `PROTOBUF`).\n\nThe registry attempts to figure out what kind of artifact is being added from the following  supported list: \n\n* Avro (`AVRO`)  \n* Protobuf (`PROTOBUF`)  \n* Protobuf File Descriptor (`PROTOBUF_FD`)  \n* JSON Schema (`JSON`)  \n* Kafka Connect (`KCONNECT`) \n* OpenAPI (`OPENAPI`)  \n* AsyncAPI (`ASYNCAPI`) \n* GraphQL (`GRAPHQL`) \n* Web Services Description Language (`WSDL`) \n* XML Schema (`XSD`)\n\nAlternatively, you can explicitly specify the artifact type using the `X-Registry-ArtifactType` \nHTTP request header, or by including a hint in the request's `Content-Type`.  For example:\n\n```\nContent-Type: application/json; artifactType=AVRO\n```\n\nThe update could fail for a number of reasons including:\n\n* Provided content (request body) was empty (HTTP error `400`)\n* No artifact with the `artifactId` exists (HTTP error `404`)\n* The new content violates one of the rules configured for the artifact (HTTP error `409`)\n* The provided artifact type is not recognized (HTTP error `404`)\n* A server error occurred (HTTP error `500`)\n\nWhen successful, this operation simply returns a *No Content* response.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Registry-ArtifactType": {
        "enum": [
          "AVRO",
          "PROTOBUF",
          "PROTOBUF_FD",
          "JSON",
          "OPENAPI",
          "ASYNCAPI",
          "GRAPHQL",
          "KCONNECT",
          "WSDL",
          "XSD",
          "XML"
        ],
        "type": "string",
        "description": "This header parameter can be used to indicate the type of the artifact being added.  Possible values include: \n* Avro (`AVRO`)  \n* Protobuf (`PROTOBUF`)  \n* Protobuf File Descriptor (`PROTOBUF_FD`)  \n* JSON Schema (`JSON`)  \n* Kafka Connect (`KCONNECT`)  \n* OpenAPI (`OPENAPI`)  \n* AsyncAPI (`ASYNCAPI`) \n* GraphQL (`GRAPHQL`)  \n* Web Services Description Language (`WSDL`)  \n* XML Schema (`XSD`)"
      },
      "artifactId": {
        "type": "string",
        "description": "The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier."
      }
    },
    "required": [
      "artifactId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://apicurio.local/artifacts/{artifactId}/test"
    },
    "headers": {
      "X-Registry-ArtifactType": {
        "$": "X-Registry-ArtifactType"
      }
    }
  },
  "responses": {
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Root Type for Error"
        },
        "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody.",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Full details about the error.  This might contain a server stack trace, for example.",
            "**error_code**: The server-side error code.",
            "**message**: The short error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "409": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Root Type for Error"
        },
        "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody.",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Full details about the error.  This might contain a server stack trace, for example.",
            "**error_code**: The server-side error code.",
            "**message**: The short error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Root Type for Error"
        },
        "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody.",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Full details about the error.  This might contain a server stack trace, for example.",
            "**error_code**: The server-side error code.",
            "**message**: The short error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
