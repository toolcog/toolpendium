{
  "name": "createArtifact",
  "description": "Creates a new artifact by posting the artifact content.  The body of the request should\nbe the raw content of the artifact.  This is typically in JSON format for *most* of the \nsupported types, but may be in another format for a few (for example, `PROTOBUF`).\n\nThe registry attempts to figure out what kind of artifact is being added from the\nfollowing supported list:\n\n* Avro (`AVRO`)\n* Protobuf (`PROTOBUF`)\n* Protobuf File Descriptor (`PROTOBUF_FD`)\n* JSON Schema (`JSON`)\n* Kafka Connect (`KCONNECT`)\n* OpenAPI (`OPENAPI`)\n* AsyncAPI (`ASYNCAPI`)\n* GraphQL (`GRAPHQL`)\n* Web Services Description Language (`WSDL`)\n* XML Schema (`XSD`)\n\nAlternatively, you can specify the artifact type using the `X-Registry-ArtifactType` \nHTTP request header, or include a hint in the request's `Content-Type`.  For example:\n\n```\nContent-Type: application/json; artifactType=AVRO\n```\n\nAn artifact is created using the content provided in the body of the request.  This\ncontent is created under a unique artifact ID that can be provided in the request\nusing the `X-Registry-ArtifactId` request header.  If not provided in the request,\nthe server generates a unique ID for the artifact.  It is typically recommended\nthat callers provide the ID, because this is typically a meaningful identifier, \nand for most use cases should be supplied by the caller.\n\nIf an artifact with the provided artifact ID already exists, the default behavior\nis for the server to reject the content with a 409 error.  However, the caller can\nsupply the `ifExists` query parameter to alter this default behavior. The `ifExists`\nquery parameter can have one of the following values:\n\n* `FAIL` (*default*) - server rejects the content with a 409 error\n* `UPDATE` - server updates the existing artifact and returns the new metadata\n* `RETURN` - server does not create or add content to the server, but instead \nreturns the metadata for the existing artifact\n* `RETURN_OR_UPDATE` - server returns an existing **version** that matches the \nprovided content if such a version exists, otherwise a new version is created\n\nThis operation may fail for one of the following reasons:\n\n* An invalid `ArtifactType` was indicated (HTTP error `400`)\n* No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`)\n* Provided content (request body) was empty (HTTP error `400`)\n* An artifact with the provided ID already exists (HTTP error `409`)\n* The content violates one of the configured global rules (HTTP error `409`)\n* A server error occurred (HTTP error `500`)\n",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Registry-ArtifactType": {
        "enum": [
          "AVRO",
          "PROTOBUF",
          "PROTOBUF_FD",
          "JSON",
          "OPENAPI",
          "ASYNCAPI",
          "GRAPHQL",
          "KCONNECT",
          "WSDL",
          "XSD",
          "XML"
        ],
        "type": "string",
        "description": "Specifies the type of the artifact being added. Possible values include:\n\n* Avro (`AVRO`)\n* Protobuf (`PROTOBUF`)\n* Protobuf File Descriptor (`PROTOBUF_FD`)\n* JSON Schema (`JSON`)\n* Kafka Connect (`KCONNECT`)\n* OpenAPI (`OPENAPI`)\n* AsyncAPI (`ASYNCAPI`)\n* GraphQL (`GRAPHQL`)\n* Web Services Description Language (`WSDL`)\n* XML Schema (`XSD`)"
      },
      "X-Registry-ArtifactId": {
        "type": "string",
        "description": "A client-provided, globally unique identifier for the new artifact."
      },
      "ifExists": {
        "enum": [
          "FAIL",
          "UPDATE",
          "RETURN",
          "RETURN_OR_UPDATE"
        ],
        "type": "string",
        "description": "Set this option to instruct the server on what to do if the artifact already exists."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://apicurio.local/artifacts{?ifExists}"
    },
    "headers": {
      "X-Registry-ArtifactType": {
        "$": "X-Registry-ArtifactType"
      },
      "X-Registry-ArtifactId": {
        "$": "X-Registry-ArtifactId"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Root Type for ArtifactMetaData"
        },
        "",
        "**Key properties:**",
        {
          "$ul": [
            "**createdBy**",
            "**createdOn**",
            "**description**",
            "**globalId**: ",
            "**id**: ",
            "**labels**: ",
            "**modifiedBy**",
            "**modifiedOn**",
            "**name**",
            "**properties**: User-defined name-value pairs. Name and value must be strings.",
            "**state**: Describes the state of an artifact or artifact version.  The following states",
            "**type**: ",
            "**version**: "
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Root Type for Error"
        },
        "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody.",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Full details about the error.  This might contain a server stack trace, for example.",
            "**error_code**: The server-side error code.",
            "**message**: The short error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "409": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Root Type for Error"
        },
        "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody.",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Full details about the error.  This might contain a server stack trace, for example.",
            "**error_code**: The server-side error code.",
            "**message**: The short error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Root Type for Error"
        },
        "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody.",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Full details about the error.  This might contain a server stack trace, for example.",
            "**error_code**: The server-side error code.",
            "**message**: The short error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
