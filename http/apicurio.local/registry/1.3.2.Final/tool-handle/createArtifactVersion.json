{
  "name": "createArtifactVersion",
  "description": "Creates a new version of the artifact by uploading new content.  The configured rules for\nthe artifact are applied, and if they all pass, the new content is added as the most recent \nversion of the artifact.  If any of the rules fail, an error is returned.\n\nThe body of the request should be the raw content of the new artifact version.  This \nis typically in JSON format for *most* of the supported types, but may be in another \nformat for a few (for example, `PROTOBUF`).\n\nThe registry attempts to figure out what kind of artifact is being added from the\nfollowing supported list:\n\n* Avro (`AVRO`)\n* Protobuf (`PROTOBUF`)\n* Protobuf File Descriptor (`PROTOBUF_FD`)\n* JSON Schema (`JSON`)\n* Kafka Connect (`KCONNECT`)\n* OpenAPI (`OPENAPI`)\n* AsyncAPI (`ASYNCAPI`)\n* GraphQL (`GRAPHQL`)\n* Web Services Description Language (`WSDL`)\n* XML Schema (`XSD`)\n\nAlternatively, you can explicitly specify the artifact type using the `X-Registry-ArtifactType` \nHTTP request header, or by including a hint in the request's `Content-Type`.\n\nFor example:\n\n```\nContent-Type: application/json; artifactType=AVRO\n```\n\nThis operation can fail for the following reasons:\n\n* Provided content (request body) was empty (HTTP error `400`)\n* No artifact with this `artifactId` exists (HTTP error `404`)\n* The new content violates one of the rules configured for the artifact (HTTP error `409`)\n* A server error occurred (HTTP error `500`)\n",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Registry-ArtifactType": {
        "enum": [
          "AVRO",
          "PROTOBUF",
          "PROTOBUF_FD",
          "JSON",
          "OPENAPI",
          "ASYNCAPI",
          "GRAPHQL",
          "KCONNECT",
          "WSDL",
          "XSD",
          "XML"
        ],
        "type": "string",
        "description": "This header parameter can be used to indicate the type of the artifact being added. Possible values include: \n* Avro (`AVRO`)   \n* Protobuf (`PROTOBUF`)  \n* Protobuf File Descriptor (`PROTOBUF_FD`)   \n* JSON Schema (`JSON`)   \n* Kafka Connect (`KCONNECT`)   \n* OpenAPI (`OPENAPI`)   \n* AsyncAPI (`ASYNCAPI`)  \n* GraphQL (`GRAPHQL`)   \n* Web Services Description Language (`WSDL`)   \n* XML Schema (`XSD`)"
      },
      "artifactId": {
        "type": "string",
        "description": "The artifact ID.  Can be a string (client-provided) or integer (server-generated) representing the unique artifact identifier."
      }
    },
    "required": [
      "artifactId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://apicurio.local/artifacts/{artifactId}/versions"
    },
    "headers": {
      "X-Registry-ArtifactType": {
        "$": "X-Registry-ArtifactType"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Root Type for ArtifactVersionMetaData"
        },
        "",
        "**Key properties:**",
        {
          "$ul": [
            "**createdBy**",
            "**createdOn**",
            "**description**",
            "**globalId**: ",
            "**id**: The artifact id.",
            "**labels**: ",
            "**name**",
            "**properties**: User-defined name-value pairs. Name and value must be strings.",
            "**state**: Describes the state of an artifact or artifact version.  The following states",
            "**type**: ",
            "**version**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Root Type for Error"
        },
        "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody.",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Full details about the error.  This might contain a server stack trace, for example.",
            "**error_code**: The server-side error code.",
            "**message**: The short error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "409": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Root Type for Error"
        },
        "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody.",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Full details about the error.  This might contain a server stack trace, for example.",
            "**error_code**: The server-side error code.",
            "**message**: The short error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Root Type for Error"
        },
        "All error responses, whether `4xx` or `5xx` will include one of these as the response\nbody.",
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Full details about the error.  This might contain a server stack trace, for example.",
            "**error_code**: The server-side error code.",
            "**message**: The short error message."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
