{
  "name": "updateCustomField",
  "description": "A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged\nWhen using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field.\nA custom field’s `type` cannot be updated.\nAn enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`.\nLocked custom fields can only be updated by the user who locked the field.\nReturns the complete updated custom field record.",
  "parameters": {
    "type": "object",
    "properties": {
      "custom_field_gid": {
        "type": "string",
        "description": "Globally unique identifier for the custom field."
      },
      "opt_pretty": {
        "type": "boolean",
        "description": "Provides “pretty” output.\nProvides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging."
      },
      "opt_fields": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "Defines fields to return.\nSome requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.\nThe id of included objects will always be returned, regardless of the field options."
      },
      "body": {
        "properties": {
          "data": {
            "$ref": "#/$defs/CustomFieldRequest"
          }
        },
        "type": "object",
        "description": "The custom field object with all updated properties."
      }
    },
    "required": [
      "custom_field_gid"
    ],
    "$defs": {
      "CustomFieldRequest": {
        "allOf": [
          {
            "$ref": "#/$defs/CustomFieldBase"
          },
          {
            "properties": {
              "people_value": {
                "description": "*Conditional*. Only relevant for custom fields of type `people`. This array of user GIDs reflects the users to be written to a `people` custom field. Note that *write* operations will replace existing users (if any) in the custom field with the users specified in this array.",
                "example": [
                  "12345"
                ],
                "items": {
                  "description": "The GID of a user.",
                  "type": "string"
                },
                "type": "array"
              },
              "workspace": {
                "description": "*Create-Only* The workspace to create a custom field in.",
                "example": "1331",
                "type": "string"
              }
            },
            "required": [
              "workspace"
            ],
            "type": "object"
          }
        ]
      },
      "CustomFieldBase": {
        "allOf": [
          {
            "$ref": "#/$defs/CustomFieldCompact"
          },
          {
            "properties": {
              "asana_created_field": {
                "description": "*Conditional*. A unique identifier to associate this field with the template source of truth.",
                "enum": [
                  "a_v_requirements",
                  "account_name",
                  "actionable",
                  "align_shipping_link",
                  "align_status",
                  "allotted_time",
                  "appointment",
                  "approval_stage",
                  "approved",
                  "article_series",
                  "board_committee",
                  "browser",
                  "campaign_audience",
                  "campaign_project_status",
                  "campaign_regions",
                  "channel_primary",
                  "client_topic_type",
                  "complete_by",
                  "contact",
                  "contact_email_address",
                  "content_channels",
                  "content_channels_needed",
                  "content_stage",
                  "content_type",
                  "contract",
                  "contract_status",
                  "cost",
                  "creation_stage",
                  "creative_channel",
                  "creative_needed",
                  "creative_needs",
                  "data_sensitivity",
                  "deal_size",
                  "delivery_appt",
                  "delivery_appt_date",
                  "department",
                  "department_responsible",
                  "design_request_needed",
                  "design_request_type",
                  "discussion_category",
                  "do_this_task",
                  "editorial_content_status",
                  "editorial_content_tag",
                  "editorial_content_type",
                  "effort",
                  "effort_level",
                  "est_completion_date",
                  "estimated_time",
                  "estimated_value",
                  "expected_cost",
                  "external_steps_needed",
                  "favorite_idea",
                  "feedback_type",
                  "financial",
                  "funding_amount",
                  "grant_application_process",
                  "hiring_candidate_status",
                  "idea_status",
                  "ids_link",
                  "ids_patient_link",
                  "implementation_stage",
                  "insurance",
                  "interview_area",
                  "interview_question_score",
                  "itero_scan_link",
                  "job_s_applied_to",
                  "lab",
                  "launch_status",
                  "lead_status",
                  "localization_language",
                  "localization_market_team",
                  "localization_status",
                  "meeting_minutes",
                  "meeting_needed",
                  "minutes",
                  "mrr",
                  "must_localize",
                  "name_of_foundation",
                  "need_to_follow_up",
                  "next_appointment",
                  "next_steps_sales",
                  "num_people",
                  "number_of_user_reports",
                  "office_location",
                  "onboarding_activity",
                  "owner",
                  "participants_needed",
                  "patient_date_of_birth",
                  "patient_email",
                  "patient_phone",
                  "patient_status",
                  "phone_number",
                  "planning_category",
                  "point_of_contact",
                  "position",
                  "post_format",
                  "prescription",
                  "priority",
                  "priority_level",
                  "product",
                  "product_stage",
                  "progress",
                  "project_size",
                  "project_status",
                  "proposed_budget",
                  "publish_status",
                  "reason_for_scan",
                  "referral",
                  "request_type",
                  "research_status",
                  "responsible_department",
                  "responsible_team",
                  "risk_assessment_status",
                  "room_name",
                  "sales_counterpart",
                  "sentiment",
                  "shipping_link",
                  "social_channels",
                  "stage",
                  "status",
                  "status_design",
                  "status_of_initiative",
                  "system_setup",
                  "task_progress",
                  "team",
                  "team_marketing",
                  "team_responsible",
                  "time_it_takes_to_complete_tasks",
                  "timeframe",
                  "treatment_type",
                  "type_work_requests_it",
                  "use_agency",
                  "user_name",
                  "vendor_category",
                  "vendor_type",
                  "word_count"
                ],
                "example": "priority",
                "nullable": true,
                "readOnly": true,
                "type": "string"
              },
              "currency_code": {
                "description": "ISO 4217 currency code to format this custom field. This will be null if the `format` is not `currency`.",
                "example": "EUR",
                "nullable": true,
                "type": "string"
              },
              "custom_label": {
                "description": "This is the string that appears next to the custom field value. This will be null if the `format` is not `custom`.",
                "example": "gold pieces",
                "nullable": true,
                "type": "string"
              },
              "custom_label_position": {
                "description": "Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.",
                "enum": [
                  "prefix",
                  "suffix"
                ],
                "example": "suffix",
                "type": "string"
              },
              "description": {
                "description": "[Opt In](/docs/input-output-options). The description of the custom field.",
                "example": "Development team priority",
                "type": "string"
              },
              "enum_options": {
                "description": "*Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).",
                "items": {
                  "$ref": "#/$defs/EnumOption"
                },
                "type": "array"
              },
              "format": {
                "description": "The format of this custom field.",
                "enum": [
                  "currency",
                  "identifier",
                  "percentage",
                  "custom",
                  "none"
                ],
                "example": "custom",
                "type": "string"
              },
              "has_notifications_enabled": {
                "description": "*Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.",
                "example": true,
                "type": "boolean"
              },
              "is_global_to_workspace": {
                "description": "This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.",
                "example": true,
                "readOnly": true,
                "type": "boolean"
              },
              "precision": {
                "description": "Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.\nFor percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.\nThe identifier format will always have a precision of 0.",
                "example": 2,
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "CustomFieldCompact": {
        "allOf": [
          {
            "$ref": "#/$defs/AsanaResource"
          },
          {
            "description": "Custom Fields store the metadata that is used in order to add user-specified information to tasks in Asana. Be sure to reference the [Custom Fields](/docs/asana-custom-fields) developer documentation for more information about how custom fields relate to various resources in Asana.\n\nUsers in Asana can [lock custom fields](https://asana.com/guide/help/premium/custom-fields#gl-lock-fields), which will make them read-only when accessed by other users. Attempting to edit a locked custom field will return HTTP error code `403 Forbidden`.",
            "properties": {
              "date_value": {
                "description": "*Conditional*. Only relevant for custom fields of type `date`. This object reflects the chosen date (and optionally, time) value of a `date` custom field. If no date is selected, the value of `date_value` will be `null`.",
                "properties": {
                  "date": {
                    "description": "A string representing the date in YYYY-MM-DD format.",
                    "example": "2024-08-23",
                    "type": "string"
                  },
                  "date_time": {
                    "description": "A string representing the date in ISO 8601 format. If no time value is selected, the value of `date-time` will be `null`.",
                    "example": "2024-08-23T22:00:00.000Z",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "display_value": {
                "description": "A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.",
                "example": "blue",
                "nullable": true,
                "readOnly": true,
                "type": "string"
              },
              "enabled": {
                "description": "*Conditional*. Determines if the custom field is enabled or not.",
                "example": true,
                "type": "boolean"
              },
              "enum_options": {
                "description": "*Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).",
                "items": {
                  "$ref": "#/$defs/EnumOption"
                },
                "type": "array"
              },
              "enum_value": {
                "allOf": [
                  {
                    "$ref": "#/$defs/EnumOption"
                  },
                  {
                    "description": "*Conditional*. Only relevant for custom fields of type `enum`. This object is the chosen value of an `enum` custom field.",
                    "type": "object"
                  }
                ]
              },
              "multi_enum_values": {
                "description": "*Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a `multi_enum` custom field.",
                "items": {
                  "$ref": "#/$defs/EnumOption"
                },
                "type": "array"
              },
              "name": {
                "description": "The name of the custom field.",
                "example": "Status",
                "type": "string"
              },
              "number_value": {
                "description": "*Conditional*. This number is the value of a `number` custom field.",
                "example": 5.2,
                "type": "number"
              },
              "resource_subtype": {
                "description": "The type of the custom field. Must be one of the given values.\n",
                "enum": [
                  "text",
                  "enum",
                  "multi_enum",
                  "number",
                  "date",
                  "people"
                ],
                "example": "text",
                "type": "string"
              },
              "text_value": {
                "description": "*Conditional*. This string is the value of a `text` custom field.",
                "example": "Some Value",
                "type": "string"
              },
              "type": {
                "description": "*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values.\n",
                "enum": [
                  "text",
                  "enum",
                  "multi_enum",
                  "number"
                ],
                "readOnly": true,
                "type": "string"
              }
            },
            "type": "object",
            "x-docs-overrides": {
              "properties.resource_type.example": "custom_field"
            }
          }
        ]
      },
      "AsanaResource": {
        "description": "A generic Asana Resource, containing a globally unique identifier.",
        "properties": {
          "gid": {
            "description": "Globally unique identifier of the resource, as a string.",
            "example": "12345",
            "readOnly": true,
            "type": "string",
            "x-insert-after": false
          },
          "resource_type": {
            "description": "The base type of this resource.",
            "example": "task",
            "readOnly": true,
            "type": "string",
            "x-insert-after": "gid"
          }
        },
        "type": "object"
      },
      "EnumOption": {
        "allOf": [
          {
            "$ref": "#/$defs/AsanaResource"
          },
          {
            "description": "Enum options are the possible values which an enum custom field can adopt. An enum custom field must contain at least 1 enum option but no more than 500.\n\nYou can add enum options to a custom field by using the `POST /custom_fields/custom_field_gid/enum_options` endpoint.\n\n**It is not possible to remove or delete an enum option**. Instead, enum options can be disabled by updating the `enabled` field to false with the `PUT /enum_options/enum_option_gid` endpoint. Other attributes can be updated similarly.\n\nOn creation of an enum option, `enabled` is always set to `true`, meaning the enum option is a selectable value for the custom field. Setting `enabled=false` is equivalent to “trashing” the enum option in the Asana web app within the “Edit Fields” dialog. The enum option will no longer be selectable but, if the enum option value was previously set within a task, the task will retain the value.\n\nEnum options are an ordered list and by default new enum options are inserted at the end. Ordering in relation to existing enum options can be specified on creation by using `insert_before` or `insert_after` to reference an existing enum option. Only one of `insert_before` and `insert_after` can be provided when creating a new enum option.\n\nAn enum options list can be reordered with the `POST /custom_fields/custom_field_gid/enum_options/insert` endpoint.",
            "properties": {
              "color": {
                "description": "The color of the enum option. Defaults to ‘none’.",
                "example": "blue",
                "type": "string"
              },
              "enabled": {
                "description": "Whether or not the enum option is a selectable value for the custom field.",
                "example": true,
                "type": "boolean"
              },
              "name": {
                "description": "The name of the enum option.",
                "example": "Low",
                "type": "string"
              }
            },
            "type": "object",
            "x-docs-overrides": {
              "properties.resource_type.example": "enum_option"
            }
          }
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://app.asana.com/api/1.0/custom_fields/{custom_field_gid}{?opt_pretty,opt_fields}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**data**: A generic Asana Resource, containing a globally unique identifier.",
              {
                "$ul": [
                  "**gid**: Globally unique identifier of the resource, as a string.",
                  "**resource_type**: The base type of this resource.",
                  [
                    "**date_value**: *Conditional*. Only relevant for custom fields of type `date`. This object reflects the chosen date (and optionally, time) value of a `date` custom field. If no date is selected, the value of `date_value` will be `null`.",
                    {
                      "$ul": [
                        "**date**: A string representing the date in YYYY-MM-DD format.",
                        "**date_time**: A string representing the date in ISO 8601 format. If no time value is selected, the value of `date-time` will be `null`."
                      ]
                    }
                  ],
                  "**display_value**: A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.",
                  "**enabled**: *Conditional*. Determines if the custom field is enabled or not.",
                  "**enum_options**: *Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).",
                  [
                    "**enum_value**: A generic Asana Resource, containing a globally unique identifier.",
                    {
                      "$ul": [
                        "**gid**: Globally unique identifier of the resource, as a string.",
                        "**resource_type**: The base type of this resource.",
                        "**color**: The color of the enum option. Defaults to ‘none’.",
                        "**enabled**: Whether or not the enum option is a selectable value for the custom field.",
                        "**name**: The name of the enum option."
                      ]
                    }
                  ],
                  "**multi_enum_values**: *Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a `multi_enum` custom field.",
                  "**name**: The name of the custom field.",
                  "**number_value**: *Conditional*. This number is the value of a `number` custom field.",
                  "**resource_subtype**: The type of the custom field. Must be one of the given values.",
                  "**text_value**: *Conditional*. This string is the value of a `text` custom field.",
                  "**type**: *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values.",
                  "**asana_created_field**: *Conditional*. A unique identifier to associate this field with the template source of truth.",
                  "**currency_code**: ISO 4217 currency code to format this custom field. This will be null if the `format` is not `currency`.",
                  "**custom_label**: This is the string that appears next to the custom field value. This will be null if the `format` is not `custom`.",
                  "**custom_label_position**: Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.",
                  "**description**: [Opt In](/docs/input-output-options). The description of the custom field.",
                  "**format**: The format of this custom field.",
                  "**has_notifications_enabled**: *Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.",
                  "**is_global_to_workspace**: This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.",
                  "**precision**: Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.",
                  [
                    "**created_by**: A generic Asana Resource, containing a globally unique identifier.",
                    {
                      "$ul": [
                        "**gid**: Globally unique identifier of the resource, as a string.",
                        "**resource_type**: The base type of this resource.",
                        "**name**: *Read-only except when same user as requester*. The user’s name."
                      ]
                    }
                  ],
                  "**people_value**: *Conditional*. Only relevant for custom fields of type `people`. This array of [compact user](/docs/user-compact) objects reflects the values of a `people` custom field."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
