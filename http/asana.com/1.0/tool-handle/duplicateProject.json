{
  "name": "duplicateProject",
  "description": "Creates and returns a job that will asynchronously handle the duplication.",
  "parameters": {
    "type": "object",
    "properties": {
      "project_gid": {
        "type": "string",
        "description": "Globally unique identifier for the project."
      },
      "opt_pretty": {
        "type": "boolean",
        "description": "Provides “pretty” output.\nProvides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging."
      },
      "opt_fields": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "Defines fields to return.\nSome requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.\nThe id of included objects will always be returned, regardless of the field options."
      },
      "body": {
        "properties": {
          "data": {
            "$ref": "#/$defs/ProjectDuplicateRequest"
          }
        },
        "type": "object",
        "description": "Describes the duplicate's name and the elements that will be duplicated."
      }
    },
    "required": [
      "project_gid"
    ],
    "$defs": {
      "ProjectDuplicateRequest": {
        "properties": {
          "include": {
            "description": "The elements that will be duplicated to the new project. Tasks are always included.",
            "enum": [
              "members",
              "notes",
              "forms",
              "task_notes",
              "task_assignee",
              "task_subtasks",
              "task_attachments",
              "task_dates",
              "task_dependencies",
              "task_followers",
              "task_tags",
              "task_projects"
            ],
            "example": [
              "members",
              "task_notes"
            ],
            "type": "string"
          },
          "name": {
            "description": "The name of the new project.",
            "example": "New Project Name",
            "type": "string"
          },
          "schedule_dates": {
            "description": "A dictionary of options to auto-shift dates. `task_dates` must be included to use this option. Requires either `start_on` or `due_on`, but not both.",
            "properties": {
              "due_on": {
                "description": "Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.",
                "example": "2019-05-21",
                "type": "string"
              },
              "should_skip_weekends": {
                "description": "Determines if the auto-shifted dates should skip weekends.",
                "example": true,
                "type": "boolean"
              },
              "start_on": {
                "description": "Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.",
                "example": "2019-05-21",
                "type": "string"
              }
            },
            "required": [
              "should_skip_weekends"
            ],
            "type": "object"
          },
          "team": {
            "description": "Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.",
            "example": "12345",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://app.asana.com/api/1.0/projects/{project_gid}/duplicate{?opt_pretty,opt_fields}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**data**: A generic Asana Resource, containing a globally unique identifier.",
              {
                "$ul": [
                  "**gid**: Globally unique identifier of the resource, as a string.",
                  "**resource_type**: The base type of this resource.",
                  [
                    "**new_project**: A generic Asana Resource, containing a globally unique identifier.",
                    {
                      "$ul": [
                        "**gid**: Globally unique identifier of the resource, as a string.",
                        "**resource_type**: The base type of this resource.",
                        "**name**: Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer."
                      ]
                    }
                  ],
                  [
                    "**new_project_template**: A generic Asana Resource, containing a globally unique identifier.",
                    {
                      "$ul": [
                        "**gid**: Globally unique identifier of the resource, as a string.",
                        "**resource_type**: The base type of this resource.",
                        "**name**: Name of the project template."
                      ]
                    }
                  ],
                  [
                    "**new_task**: A generic Asana Resource, containing a globally unique identifier.",
                    {
                      "$ul": [
                        "**gid**: Globally unique identifier of the resource, as a string.",
                        "**resource_type**: The base type of this resource.",
                        "**name**: The name of the task.",
                        "**resource_subtype**: The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning."
                      ]
                    }
                  ],
                  "**resource_subtype**: The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.",
                  "**status**: The current status of this job. The value is one of: `not_started`, `in_progress`, `succeeded`, or `failed`."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
