{
  "name": "createSubtaskForTask",
  "description": "Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.",
  "parameters": {
    "type": "object",
    "properties": {
      "task_gid": {
        "type": "string",
        "description": "The task to operate on."
      },
      "opt_pretty": {
        "type": "boolean",
        "description": "Provides “pretty” output.\nProvides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging."
      },
      "opt_fields": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "Defines fields to return.\nSome requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.\nThe id of included objects will always be returned, regardless of the field options."
      },
      "body": {
        "properties": {
          "data": {
            "$ref": "#/$defs/TaskRequest"
          }
        },
        "type": "object",
        "description": "The new subtask to create."
      }
    },
    "required": [
      "task_gid",
      "body"
    ],
    "$defs": {
      "TaskRequest": {
        "allOf": [
          {
            "$ref": "#/$defs/TaskBase"
          },
          {
            "properties": {
              "assignee": {
                "description": "Gid of a user.",
                "example": "12345",
                "nullable": true,
                "readOnly": false,
                "type": "string",
                "x-env-variable": true
              },
              "assignee_section": {
                "description": "The *assignee section* is a subdivision of a project that groups tasks together in the assignee's \"My Tasks\" list. It can either be a header above a list of tasks in a list view or a column in a board view of \"My Tasks.\"\nThe `assignee_section` property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to `assignee_section` with the gid of an existing section visible in the user's \"My Tasks\" list.",
                "example": "12345",
                "nullable": true,
                "type": "string"
              },
              "custom_fields": {
                "additionalProperties": {
                  "description": "\"{custom_field_gid}\" => Value (Can be text, number, etc.)",
                  "type": "string"
                },
                "description": "An object where each key is a Custom Field GID and each value is an enum GID, string, number, object, or array.",
                "example": {
                  "4578152156": "Not Started",
                  "5678904321": "On Hold"
                },
                "type": "object"
              },
              "followers": {
                "description": "*Create-Only* An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user. In order to change followers on an existing task use `addFollowers` and `removeFollowers`.",
                "example": [
                  "12345"
                ],
                "items": {
                  "description": "Gid of a user.",
                  "type": "string"
                },
                "type": "array"
              },
              "parent": {
                "description": "Gid of a task.",
                "example": "12345",
                "nullable": true,
                "readOnly": false,
                "type": "string",
                "x-env-variable": true
              },
              "projects": {
                "description": "*Create-Only* Array of project gids. In order to change projects on an existing task use `addProject` and `removeProject`.",
                "example": [
                  "12345"
                ],
                "items": {
                  "description": "Gid of a project.",
                  "type": "string"
                },
                "type": "array"
              },
              "tags": {
                "description": "*Create-Only* Array of tag gids. In order to change tags on an existing task use `addTag` and `removeTag`.",
                "example": [
                  "12345"
                ],
                "items": {
                  "description": "Gid of a tag.",
                  "type": "string"
                },
                "type": "array"
              },
              "workspace": {
                "description": "Gid of a workspace.",
                "example": "12345",
                "readOnly": false,
                "type": "string",
                "x-env-variable": true
              }
            },
            "type": "object"
          }
        ]
      },
      "TaskBase": {
        "allOf": [
          {
            "$ref": "#/$defs/TaskCompact"
          },
          {
            "properties": {
              "actual_time_minutes": {
                "description": "This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.",
                "example": 200,
                "nullable": true,
                "readOnly": true,
                "type": "number"
              },
              "approval_status": {
                "description": "*Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.",
                "enum": [
                  "pending",
                  "approved",
                  "rejected",
                  "changes_requested"
                ],
                "example": "pending",
                "type": "string"
              },
              "assignee_status": {
                "description": "*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.",
                "enum": [
                  "today",
                  "upcoming",
                  "later",
                  "new",
                  "inbox"
                ],
                "example": "upcoming",
                "type": "string"
              },
              "completed": {
                "description": "True if the task is currently marked complete, false if not.",
                "example": false,
                "type": "boolean"
              },
              "completed_at": {
                "description": "The time at which this task was completed, or null if the task is incomplete.",
                "example": "2012-02-22T02:06:58.147Z",
                "format": "date-time",
                "nullable": true,
                "readOnly": true,
                "type": "string"
              },
              "completed_by": {
                "$ref": "#/$defs/UserCompact"
              },
              "created_at": {
                "description": "The time at which this resource was created.",
                "example": "2012-02-22T02:06:58.147Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "dependencies": {
                "description": "[Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.",
                "items": {
                  "$ref": "#/$defs/AsanaResource"
                },
                "readOnly": true,
                "type": "array"
              },
              "dependents": {
                "description": "[Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.",
                "items": {
                  "$ref": "#/$defs/AsanaResource"
                },
                "readOnly": true,
                "type": "array"
              },
              "due_at": {
                "description": "The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.",
                "example": "2019-09-15T02:06:58.147Z",
                "format": "date",
                "nullable": true,
                "type": "string"
              },
              "due_on": {
                "description": "The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.",
                "example": "2019-09-15",
                "format": "date",
                "nullable": true,
                "type": "string"
              },
              "external": {
                "description": "*OAuth Required*. *Conditional*. This field is returned only if external values are set or included by using [Opt In] (/docs/input-output-options).\nThe external field allows you to store app-specific metadata on tasks, including a gid that can be used to retrieve tasks and a data blob that can store app-specific character strings. Note that you will need to authenticate with Oauth to access or modify this data. Once an external gid is set, you can use the notation `external:custom_gid` to reference your object anywhere in the API where you may use the original object gid. See the page on Custom External Data for more details.",
                "example": {
                  "data": "A blob of information",
                  "gid": "my_gid"
                },
                "properties": {
                  "data": {
                    "example": "A blob of information.",
                    "type": "string"
                  },
                  "gid": {
                    "example": "1234",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "hearted": {
                "description": "*Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.",
                "example": true,
                "readOnly": true,
                "type": "boolean"
              },
              "hearts": {
                "description": "*Deprecated - please use likes instead* Array of likes for users who have hearted this task.",
                "items": {
                  "$ref": "#/$defs/Like"
                },
                "readOnly": true,
                "type": "array"
              },
              "html_notes": {
                "description": "[Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.",
                "example": "<body>Mittens <em>really</em> likes the stuff from Humboldt.</body>",
                "type": "string"
              },
              "is_rendered_as_separator": {
                "description": "[Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.",
                "example": false,
                "readOnly": true,
                "type": "boolean"
              },
              "liked": {
                "description": "True if the task is liked by the authorized user, false if not.",
                "example": true,
                "type": "boolean"
              },
              "likes": {
                "description": "Array of likes for users who have liked this task.",
                "items": {
                  "$ref": "#/$defs/Like"
                },
                "readOnly": true,
                "type": "array"
              },
              "memberships": {
                "description": "*Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.",
                "items": {
                  "properties": {
                    "project": {
                      "$ref": "#/$defs/ProjectCompact"
                    },
                    "section": {
                      "$ref": "#/$defs/SectionCompact"
                    }
                  },
                  "type": "object"
                },
                "readOnly": true,
                "type": "array"
              },
              "modified_at": {
                "description": "The time at which this task was last modified.\n\n*Note: This does not currently reflect any changes in\nassociations such as projects or comments that may have been\nadded or removed from the task.*",
                "example": "2012-02-22T02:06:58.147Z",
                "format": "date-time",
                "readOnly": true,
                "type": "string"
              },
              "name": {
                "description": "Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.",
                "example": "Buy catnip",
                "type": "string"
              },
              "notes": {
                "description": "Free-form textual information associated with the task (i.e. its description).",
                "example": "Mittens really likes the stuff from Humboldt.",
                "type": "string"
              },
              "num_hearts": {
                "description": "*Deprecated - please use likes instead* The number of users who have hearted this task.",
                "example": 5,
                "readOnly": true,
                "type": "integer"
              },
              "num_likes": {
                "description": "The number of users who have liked this task.",
                "example": 5,
                "readOnly": true,
                "type": "integer"
              },
              "num_subtasks": {
                "description": "[Opt In](/docs/input-output-options). The number of subtasks on this task.\n",
                "example": 3,
                "readOnly": true,
                "type": "integer"
              },
              "start_at": {
                "description": "Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`.\n*Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*",
                "example": "2019-09-14T02:06:58.147Z",
                "format": "date",
                "nullable": true,
                "type": "string"
              },
              "start_on": {
                "description": "The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`.\n*Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*",
                "example": "2019-09-14",
                "format": "date",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "TaskCompact": {
        "allOf": [
          {
            "$ref": "#/$defs/AsanaResource"
          },
          {
            "description": "The *task* is the basic object around which many operations in Asana are centered.",
            "properties": {
              "name": {
                "description": "The name of the task.",
                "example": "Bug Task",
                "type": "string"
              },
              "resource_subtype": {
                "description": "The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.\nThe resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.",
                "enum": [
                  "default_task",
                  "milestone",
                  "section",
                  "approval"
                ],
                "example": "default_task",
                "type": "string"
              }
            },
            "type": "object",
            "x-docs-overrides": {
              "properties.resource_type.example": "task"
            }
          }
        ]
      },
      "AsanaResource": {
        "description": "A generic Asana Resource, containing a globally unique identifier.",
        "properties": {
          "gid": {
            "description": "Globally unique identifier of the resource, as a string.",
            "example": "12345",
            "readOnly": true,
            "type": "string",
            "x-insert-after": false
          },
          "resource_type": {
            "description": "The base type of this resource.",
            "example": "task",
            "readOnly": true,
            "type": "string",
            "x-insert-after": "gid"
          }
        },
        "type": "object"
      },
      "UserCompact": {
        "allOf": [
          {
            "$ref": "#/$defs/AsanaResource"
          },
          {
            "description": "A *user* object represents an account in Asana that can be given access to various workspaces, projects, and tasks.",
            "properties": {
              "name": {
                "description": "*Read-only except when same user as requester*. The user’s name.",
                "example": "Greg Sanchez",
                "type": "string"
              }
            },
            "type": "object",
            "x-docs-overrides": {
              "properties.resource_type.example": "user"
            }
          }
        ]
      },
      "Like": {
        "description": "An object to represent a user's like.",
        "properties": {
          "gid": {
            "description": "Globally unique identifier of the object, as a string.",
            "example": "12345",
            "readOnly": true,
            "type": "string"
          },
          "user": {
            "$ref": "#/$defs/UserCompact"
          }
        },
        "type": "object"
      },
      "ProjectCompact": {
        "allOf": [
          {
            "$ref": "#/$defs/AsanaResource"
          },
          {
            "description": "A *project* represents a prioritized list of tasks in Asana or a board with columns of tasks represented as cards. It exists in a single workspace or organization and is accessible to a subset of users in that workspace or organization, depending on its permissions.",
            "properties": {
              "name": {
                "description": "Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.",
                "example": "Stuff to buy",
                "type": "string"
              }
            },
            "type": "object",
            "x-docs-overrides": {
              "properties.resource_type.example": "project"
            }
          }
        ]
      },
      "SectionCompact": {
        "allOf": [
          {
            "$ref": "#/$defs/AsanaResource"
          },
          {
            "description": "A *section* is a subdivision of a project that groups tasks together. It can either be a header above a list of tasks in a list view or a column in a board view of a project.",
            "properties": {
              "name": {
                "description": "The name of the section (i.e. the text displayed as the section header).",
                "example": "Next Actions",
                "type": "string"
              }
            },
            "type": "object",
            "x-docs-overrides": {
              "properties.resource_type.example": "section"
            }
          }
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://app.asana.com/api/1.0/tasks/{task_gid}/subtasks{?opt_pretty,opt_fields}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**data**: A generic Asana Resource, containing a globally unique identifier.",
              {
                "$ul": [
                  "**gid**: Globally unique identifier of the resource, as a string.",
                  "**resource_type**: The base type of this resource.",
                  "**name**: Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.",
                  "**resource_subtype**: The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.",
                  "**actual_time_minutes**: This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.",
                  "**approval_status**: *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.",
                  "**assignee_status**: *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.",
                  "**completed**: True if the task is currently marked complete, false if not.",
                  "**completed_at**: The time at which this task was completed, or null if the task is incomplete.",
                  [
                    "**completed_by**: A generic Asana Resource, containing a globally unique identifier.",
                    {
                      "$ul": [
                        "**gid**: Globally unique identifier of the resource, as a string.",
                        "**resource_type**: The base type of this resource.",
                        "**name**: *Read-only except when same user as requester*. The user’s name."
                      ]
                    }
                  ],
                  "**created_at**: The time at which this resource was created.",
                  "**dependencies**: [Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.",
                  "**dependents**: [Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.",
                  "**due_at**: The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.",
                  "**due_on**: The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.",
                  [
                    "**external**: *OAuth Required*. *Conditional*. This field is returned only if external values are set or included by using [Opt In] (/docs/input-output-options).",
                    {
                      "$ul": [
                        "**data**",
                        "**gid**"
                      ]
                    }
                  ],
                  "**hearted**: *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.",
                  "**hearts**: *Deprecated - please use likes instead* Array of likes for users who have hearted this task.",
                  "**html_notes**: [Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.",
                  "**is_rendered_as_separator**: [Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.",
                  "**liked**: True if the task is liked by the authorized user, false if not.",
                  "**likes**: Array of likes for users who have liked this task.",
                  "**memberships**: *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.",
                  "**modified_at**: The time at which this task was last modified.",
                  "**notes**: Free-form textual information associated with the task (i.e. its description).",
                  "**num_hearts**: *Deprecated - please use likes instead* The number of users who have hearted this task.",
                  "**num_likes**: The number of users who have liked this task.",
                  "**num_subtasks**: [Opt In](/docs/input-output-options). The number of subtasks on this task.",
                  "**start_at**: Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`.",
                  "**start_on**: The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`.",
                  [
                    "**assignee**: A generic Asana Resource, containing a globally unique identifier.",
                    {
                      "$ul": [
                        "**gid**: Globally unique identifier of the resource, as a string.",
                        "**resource_type**: The base type of this resource.",
                        "**name**: *Read-only except when same user as requester*. The user’s name."
                      ]
                    }
                  ],
                  "**assignee_section**",
                  "**custom_fields**: Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type `enum`, a `text_value` property for custom fields of type `text`, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field-gid` endpoint.",
                  "**followers**: Array of users following this task.",
                  [
                    "**parent**: A generic Asana Resource, containing a globally unique identifier.",
                    {
                      "$ul": [
                        "**gid**: Globally unique identifier of the resource, as a string.",
                        "**resource_type**: The base type of this resource.",
                        "**name**: The name of the task.",
                        "**resource_subtype**: The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning."
                      ]
                    }
                  ],
                  "**permalink_url**: A url that points directly to the object within Asana.",
                  "**projects**: *Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.",
                  "**tags**: Array of tags associated with this task. In order to change tags on an existing task use `addTag` and `removeTag`.",
                  [
                    "**workspace**: A generic Asana Resource, containing a globally unique identifier.",
                    {
                      "$ul": [
                        "**gid**: Globally unique identifier of the resource, as a string.",
                        "**resource_type**: The base type of this resource.",
                        "**name**: The name of the workspace."
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Sadly, sometimes requests to the API are not successful. Failures can\noccur for a wide range of reasons. In all cases, the API should return\nan HTTP Status Code that indicates the nature of the failure,\nwith a response body in JSON format containing additional information.\n\n\nIn the event of a server error the response body will contain an error\nphrase. These phrases are automatically generated using the\n[node-asana-phrase\nlibrary](https://github.com/Asana/node-asana-phrase) and can be used by\nAsana support to quickly look up the incident that caused the server\nerror.",
        "**Key properties:**",
        {
          "$ul": [
            "**errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
