{
  "name": "requestUsers",
  "description": "### Description:  \nReturns a list of DRACOON users.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.\n\n### Postcondition:\nList of users is returned.\n\n### Further Information:\n\n### Filtering:\nAll filter fields are connected via logical conjunction (**AND**)  \nExcept for `login`, `firstName` and  `lastName` - these are connected via logical disjunction (**OR**)  \nFilter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`login:cn:searchString_1|firstName:cn:searchString_2|lockStatus:eq:2`  \nFilter users by login contains `searchString_1` **OR** firstName contains `searchString_2` **AND** those who are **NOT** locked.\n\n</details>\n\n### Filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR`  | Operator Description | `VALUE`                                                                                                                                                                                                                                                                                                                                                                                              |\n| :--- | :--- |:------------| :--- |:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `email` | Email filter | `eq`, `cn`  | Email contains value. | `search String`                                                                                                                                                                                                                                                                                                                                                                                      |\n| `userName` | User name filter | `eq`, `cn`  | UserName contains value. | `search String`                                                                                                                                                                                                                                                                                                                                                                                      |\n| `firstName` | User first name filter | `cn`        | User first name contains value. | `search String`                                                                                                                                                                                                                                                                                                                                                                                      |\n| `lastName` | User last name filter | `cn`        | User last name contains value. | `search String`                                                                                                                                                                                                                                                                                                                                                                                      |\n| `isLocked` | User lock status filter | `eq`        |  | `true or false`                                                                                                                                                                                                                                                                                                                                                                                      |\n| `effectiveRoles` | Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles<ul><li>`false`: DIRECT roles</li><li>`true`: DIRECT **AND** EFFECTIVE roles</li></ul>DIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.<br>EFFECTIVE means: e.g. user gets role through **group membership**. | `eq`        |  | `true or false`<br>default: `false`                                                                                                                                                                                                                                                                                                                                                                  |\n| `createdAt` | Creation date filter | `ge, le`    | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)`                                                                                                                                                                                                                                                                                                                                                                                  |\n| `phone` | Phone filter | `eq`        | Phone equals value. | `search String`                                                                                                                                                                                                                                                                                                                                                                                      |\n| `isEncryptionEnabled` | Encryption status filter<ul><li>client-side encryption</li><li>private key possession</li></ul> | `eq`        |  | `true or false`                                                                                                                                                                                                                                                                                                                                                                                      |\n| `hasRole` | User role filter<br>Depends on **effectiveRoles**.<br>For more Roles information please call `GET /roles API` | `eq`, `neq` | User role  equals value. | <ul><li>`CONFIG_MANAGER` - Manage global configs</li><li>`USER_MANAGER` - Manage Users</li><li>`GROUP_MANAGER` - Manage User-Groups</li><li>`ROOM_MANAGER` - Manage top level Data Rooms</li><li>`LOG_AUDITOR` - Read logs</li><li>`NONMEMBER_VIEWER` - View users and groups when having room manage permission</li><li>`USER` - Regular User role</li><li>`GUEST_USER` - Guest User role</li></ul> |\n\n</details>\n\n### Deprecated filtering options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |\n| :--- | :--- | :--- | :--- | :--- |\n| <del>`lockStatus`</del> | User lock status filter | `eq` | User lock status equals value. | <ul><li>`0` - Locked</li><li>`1` - Web access allowed</li><li>`2` - Web and mobile access allowed</li></ul> |\n| <del>`login`</del> | User login filter | `cn` | User login contains value. | `search String` |\n\n</details>\n\n---\n\n### Sorting:\nSort string syntax: `FIELD_NAME:ORDER`  \n`ORDER` can be `asc` or `desc`.  \nMultiple sort fields are supported.  \n\n<details style=\"padding-left: 10px\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>\n\n`firstName:asc|lastLoginSuccessAt:desc`  \nSort by `firstName` ascending **AND** by `lastLoginSuccessAt` descending.\n\n</details>\n\n### Sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| `userName` | User name |\n| `email` | User email |\n| `firstName` | User first name |\n| `lastName` | User last name |\n| `isLocked` | User lock status |\n| `lastLoginSuccessAt` | Last successful login date |\n| `expireAt` | Expiration date |\n| `createdAt` | Creation date |\n\n</details>\n\n### Deprecated sorting options:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| `FIELD_NAME` | Description |\n| :--- | :--- |\n| <del>`gender`</del> | Gender |\n| <del>`lockStatus`</del> | User lock status |\n| <del>`login`</del> | User login |\n\n</details>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Sds-Date-Format": {
        "enum": [
          "UTC",
          "LOCAL",
          "OFFSET",
          "EPOCH",
          "LEET"
        ],
        "type": "string",
        "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))"
      },
      "offset": {
        "format": "int32",
        "type": "integer",
        "description": "Range offset"
      },
      "limit": {
        "format": "int32",
        "type": "integer",
        "description": "Range limit.\n\nMaximum 500.\n\n For more results please use paging (`offset` + `limit`)."
      },
      "filter": {
        "type": "string",
        "description": "Filter string"
      },
      "sort": {
        "type": "string",
        "description": "Sort string"
      },
      "include_attributes": {
        "type": "boolean",
        "description": "Include custom user attributes."
      },
      "include_roles": {
        "type": "boolean",
        "description": "Include roles"
      },
      "include_manageable_rooms": {
        "type": "boolean",
        "description": "Include hasManageableRooms (deprecated)"
      },
      "X-Sds-Auth-Token": {
        "type": "string",
        "description": "Authentication token"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "/api/v4/users{?offset,limit,filter,sort,include_attributes,include_roles,include_manageable_rooms}"
    },
    "headers": {
      "X-Sds-Date-Format": {
        "$": "X-Sds-Date-Format"
      },
      "X-Sds-Auth-Token": {
        "$": "X-Sds-Auth-Token"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "List of users",
        "**Key properties:**",
        {
          "$ul": [
            "**items**: List of users",
            [
              "**range**: Range information",
              {
                "$ul": [
                  "**limit**: Range limit. Maximum 500.",
                  "**offset**: Range offset",
                  "**total**: Total items available"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "406": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "412": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
