{
  "name": "changePasswordPoliciesConfig",
  "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.14.0</h3>\n\n### Description:  \nChange current password policies for any password types:  \n* `login`\n* `shares`\n* `encryption`\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nPassword policies get changed.\n\n### Further Information:\nNone.\n\n### Available password policies:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Value | Recommended Value | Password Type |\n| :--- | :--- | :--- | :--- | :--- |\n| `mustContainCharacters` | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! \" # $ % ( ) * + , - . / : ; = ? @ [ \\ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li><li>`all` - combination of `uppercase`, `lowercase`, `numeric` and `special`</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li><li>`all`</li></ul> | <ul><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li></ul>  | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.<br>e.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4`<br><br>default:<ul><li>`none` - `0`</li><li>`all` - `4`</li><li>otherwise - amount of distinct values<br>cf. `mustContainCharacters` matrix</li></ul> | `3` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`: `12`</li><li>`shares`: `12`</li><li>`encryption`: `14`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `core-service.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li></ul> |\n| `rejectUserInfo` | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |\n| `numberOfArchivedPasswords` | Number of passwords to archive. | `Integer between 0 and 10`<br>Set `0` to disable password history. | `3` | <ul><li>`login`</li></ul> |\n| `passwordExpiration.enabled` | Determines whether password expiration is enabled.<br>Password expiration policy can only be enabled in context with `enforceLoginPasswordChange`. | `true or false` | `false` | <ul><li>`login`</li></ul> |\n| `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` |  | <ul><li>`login`</li></ul> |\n| `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | `true` | <ul><li>`login`</li></ul> |\n| `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | `5` | <ul><li>`login`</li></ul> |\n| `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt<br>after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | `10` | <ul><li>`login`</li></ul> |\n\n</details>\n\n### Deprecated password policies:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Value | Recommended Value | Password Type |\n| :--- | :--- | :--- | :--- | :--- |\n| <del>`enforceLoginPasswordChange`</del> | Determines whether a login password change should be enforced for all users.<br>Only takes effect, if login password policies get stricter.<br>Use `POST /system/config/policies/passwords/enforce_change` API to enforce a login password change. | `true or false`<br>default: `false` |  | <ul><li>`login`</li></ul> |\n\n</details>\n\n### `mustContainCharacters` matrix:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n|  | `alpha` | `uppercase` | `lowercase` | `numeric` | `special` | `all` | `none` |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| `alpha` | `alpha` | `uppercase` | `lowercase` | `alpha`<br>`numeric` | `alpha`<br>`special` | `all` | `none` |\n| `uppercase` | `uppercase` | `uppercase` | `uppercase`<br>`lowercase` | `uppercase`<br>`numeric` | `uppercase`<br>`special` | `all` | `none` |\n| `lowercase` | `lowercase` | `uppercase`<br>`lowercase` | `lowercase` | `lowercase`<br>`numeric` | `lowercase`<br>`special` | `all` | `none` |\n| `numeric` | `alpha`<br>`numeric` | `uppercase`<br>`numeric` | `lowercase`<br>`numeric` | `numeric` | `numeric`<br>`special` | `all` | `none` |\n| `special` | `alpha`<br>`special` | `uppercase`<br>`special` | `lowercase`<br>`special` | `numeric`<br>`special` | `special` | `all` | `none` |\n| `all` | `all` | `all` | `all` | `all` | `all` | `all` | `none` |\n| `none` | `none` | `none` |  `none` | `none` | `none` | `none` | `none` |\n\n</details>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Sds-Auth-Token": {
        "type": "string",
        "description": "Authentication token"
      },
      "body": {
        "$ref": "#/$defs/UpdatePasswordPoliciesConfig"
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "UpdatePasswordPoliciesConfig": {
        "description": "Request model for updating a set of password policies",
        "properties": {
          "encryptionPasswordPolicies": {
            "$ref": "#/$defs/UpdateEncryptionPasswordPolicies"
          },
          "loginPasswordPolicies": {
            "$ref": "#/$defs/UpdateLoginPasswordPolicies"
          },
          "sharesPasswordPolicies": {
            "$ref": "#/$defs/UpdateSharesPasswordPolicies"
          }
        },
        "type": "object"
      },
      "UpdateEncryptionPasswordPolicies": {
        "description": "Request model for updating encryption password policies",
        "properties": {
          "characterRules": {
            "$ref": "#/$defs/CharacterRules"
          },
          "minLength": {
            "description": "Minimum number of characters a password must contain",
            "format": "int32",
            "maximum": 1024,
            "minimum": 1,
            "type": "integer"
          },
          "rejectKeyboardPatterns": {
            "description": "Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)\n\n(min. 4 character pattern)",
            "type": "boolean"
          },
          "rejectUserInfo": {
            "description": "Determines whether a password must NOT contain user info (first name, last name, email, user name)",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CharacterRules": {
        "description": "Password character rules",
        "properties": {
          "mustContainCharacters": {
            "description": "Characters which a password must contain:\n\n* `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)\n\n* `uppercase` - at least one uppercase character\n\n* `lowercase` - at least one lowercase character\n\n* `numeric` - at least one numeric character\n\n* `special` - at least one special character (letters and digits excluded)\n\n* `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)\n\n* `none` - none of the above",
            "enum": [
              "alpha",
              "uppercase",
              "lowercase",
              "numeric",
              "special",
              "all",
              "none"
            ],
            "items": {
              "description": "Characters which a password must contain:\n\n* `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)\n\n* `uppercase` - at least one uppercase character\n\n* `lowercase` - at least one lowercase character\n\n* `numeric` - at least one numeric character\n\n* `special` - at least one special character (letters and digits excluded)\n\n* `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)\n\n* `none` - none of the above",
              "enum": [
                "alpha",
                "uppercase",
                "lowercase",
                "numeric",
                "special",
                "all",
                "none"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "numberOfCharacteristicsToEnforce": {
            "description": "Number of characteristics to enforce\n\ne.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`\n\nall 4 character sets can be enforced; but also only 2 of them",
            "format": "int32",
            "maximum": 4,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "mustContainCharacters",
          "numberOfCharacteristicsToEnforce"
        ],
        "type": "object"
      },
      "UpdateLoginPasswordPolicies": {
        "description": "Request model for updating login password policies",
        "properties": {
          "characterRules": {
            "$ref": "#/$defs/CharacterRules"
          },
          "enforceLoginPasswordChange": {
            "default": false,
            "deprecated": true,
            "description": "&#128679; Deprecated since v4.24.0\n\nDetermines whether a login password change should be enforced for all users\n\nOnly takes effect, if login password policies get stricter",
            "type": "boolean"
          },
          "minLength": {
            "description": "Minimum number of characters a password must contain",
            "format": "int32",
            "maximum": 1024,
            "minimum": 1,
            "type": "integer"
          },
          "numberOfArchivedPasswords": {
            "description": "Number of passwords to archive\n\n(must be between `0` and `10`; `0` means that password history is disabled)",
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "type": "integer"
          },
          "passwordExpiration": {
            "$ref": "#/$defs/PasswordExpiration"
          },
          "rejectDictionaryWords": {
            "description": "Determines whether a password must NOT contain word(s) from a dictionary",
            "type": "boolean"
          },
          "rejectKeyboardPatterns": {
            "description": "Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)\n\n(min. 4 character pattern)",
            "type": "boolean"
          },
          "rejectUserInfo": {
            "description": "Determines whether a password must NOT contain user info (first name, last name, email, user name)",
            "type": "boolean"
          },
          "userLockout": {
            "$ref": "#/$defs/UserLockout"
          }
        },
        "type": "object"
      },
      "PasswordExpiration": {
        "description": "Password expiration information",
        "properties": {
          "enabled": {
            "description": "Determines whether password expiration is enabled",
            "type": "boolean"
          },
          "maxPasswordAge": {
            "description": "Maximum allowed password age (in days)",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "enabled"
        ],
        "type": "object"
      },
      "UserLockout": {
        "description": "User lockout information",
        "properties": {
          "enabled": {
            "description": "Determines whether user lockout is enabled",
            "type": "boolean"
          },
          "lockoutPeriod": {
            "description": "Amount of minutes a user has to wait to make another login attempt after `maxNumberOfLoginFailures` has been exceeded",
            "format": "int32",
            "type": "integer"
          },
          "maxNumberOfLoginFailures": {
            "description": "Maximum allowed number of failed login attempts",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "enabled"
        ],
        "type": "object"
      },
      "UpdateSharesPasswordPolicies": {
        "description": "Request model for updating shares password policies",
        "properties": {
          "characterRules": {
            "$ref": "#/$defs/CharacterRules"
          },
          "minLength": {
            "description": "Minimum number of characters a password must contain",
            "format": "int32",
            "maximum": 1024,
            "minimum": 1,
            "type": "integer"
          },
          "rejectDictionaryWords": {
            "description": "Determines whether a password must NOT contain word(s) from a dictionary",
            "type": "boolean"
          },
          "rejectKeyboardPatterns": {
            "description": "Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)\n\n(min. 4 character pattern)",
            "type": "boolean"
          },
          "rejectUserInfo": {
            "description": "Determines whether a password must NOT contain user info (first name, last name, email, user name)",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "/api/v4/system/config/policies/passwords"
    },
    "headers": {
      "X-Sds-Auth-Token": {
        "$": "X-Sds-Auth-Token"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Set of password policies",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**encryptionPasswordPolicies**: Encryption password policies",
              {
                "$ul": [
                  [
                    "**characterRules**: Password character rules",
                    {
                      "$ul": [
                        "**mustContainCharacters**: Characters which a password must contain:",
                        "**numberOfCharacteristicsToEnforce**: Number of characteristics to enforce"
                      ]
                    }
                  ],
                  "**minLength**: Minimum number of characters a password must contain",
                  "**rejectKeyboardPatterns**: Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)",
                  "**rejectUserInfo**: Determines whether a password must NOT contain user info (first name, last name, email, user name)",
                  "**updatedAt**: Modification date",
                  [
                    "**updatedBy**: User information",
                    {
                      "$ul": [
                        "**avatarUuid**: &#128640; Since v4.11.0",
                        "**displayName**: &#128679; Deprecated since v4.11.0",
                        "**email**: &#128640; Since v4.11.0",
                        "**firstName**: &#128640; Since v4.11.0",
                        "**id**: Unique identifier for the user",
                        "**lastName**: &#128640; Since v4.11.0",
                        "**title**: &#128679; Deprecated since v4.18.0",
                        "**userName**: &#128640; Since v4.13.0",
                        "**userType**: &#128640; Since v4.11.0"
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**loginPasswordPolicies**: Login password policies",
              {
                "$ul": [
                  [
                    "**characterRules**: Password character rules",
                    {
                      "$ul": [
                        "**mustContainCharacters**: Characters which a password must contain:",
                        "**numberOfCharacteristicsToEnforce**: Number of characteristics to enforce"
                      ]
                    }
                  ],
                  "**minLength**: Minimum number of characters a password must contain",
                  "**numberOfArchivedPasswords**: Number of passwords to archive",
                  [
                    "**passwordExpiration**: Password expiration information",
                    {
                      "$ul": [
                        "**enabled**: Determines whether password expiration is enabled",
                        "**maxPasswordAge**: Maximum allowed password age (in days)"
                      ]
                    }
                  ],
                  "**rejectDictionaryWords**: Determines whether a password must NOT contain word(s) from a dictionary",
                  "**rejectKeyboardPatterns**: Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)",
                  "**rejectUserInfo**: Determines whether a password must NOT contain user info (first name, last name, email, user name)",
                  "**updatedAt**: Modification date",
                  [
                    "**updatedBy**: User information",
                    {
                      "$ul": [
                        "**avatarUuid**: &#128640; Since v4.11.0",
                        "**displayName**: &#128679; Deprecated since v4.11.0",
                        "**email**: &#128640; Since v4.11.0",
                        "**firstName**: &#128640; Since v4.11.0",
                        "**id**: Unique identifier for the user",
                        "**lastName**: &#128640; Since v4.11.0",
                        "**title**: &#128679; Deprecated since v4.18.0",
                        "**userName**: &#128640; Since v4.13.0",
                        "**userType**: &#128640; Since v4.11.0"
                      ]
                    }
                  ],
                  [
                    "**userLockout**: User lockout information",
                    {
                      "$ul": [
                        "**enabled**: Determines whether user lockout is enabled",
                        "**lockoutPeriod**: Amount of minutes a user has to wait to make another login attempt after `maxNumberOfLoginFailures` has been exceeded",
                        "**maxNumberOfLoginFailures**: Maximum allowed number of failed login attempts"
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**sharesPasswordPolicies**: Shares password policies",
              {
                "$ul": [
                  [
                    "**characterRules**: Password character rules",
                    {
                      "$ul": [
                        "**mustContainCharacters**: Characters which a password must contain:",
                        "**numberOfCharacteristicsToEnforce**: Number of characteristics to enforce"
                      ]
                    }
                  ],
                  "**minLength**: Minimum number of characters a password must contain",
                  "**rejectDictionaryWords**: Determines whether a password must NOT contain word(s) from a dictionary",
                  "**rejectKeyboardPatterns**: Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)",
                  "**rejectUserInfo**: Determines whether a password must NOT contain user info (first name, last name, email, user name)",
                  "**updatedAt**: Modification date",
                  [
                    "**updatedBy**: User information",
                    {
                      "$ul": [
                        "**avatarUuid**: &#128640; Since v4.11.0",
                        "**displayName**: &#128679; Deprecated since v4.11.0",
                        "**email**: &#128640; Since v4.11.0",
                        "**firstName**: &#128640; Since v4.11.0",
                        "**id**: Unique identifier for the user",
                        "**lastName**: &#128640; Since v4.11.0",
                        "**title**: &#128679; Deprecated since v4.18.0",
                        "**userName**: &#128640; Since v4.13.0",
                        "**userType**: &#128640; Since v4.11.0"
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "406": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "412": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
