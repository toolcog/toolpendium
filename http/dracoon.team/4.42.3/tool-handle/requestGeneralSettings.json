{
  "name": "requestGeneralSettings",
  "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>\n\n### Description:  \nDRACOON general settings configuration entry point.  \n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and\nrole <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.\n\n### Postcondition:\nReturns a list of configurable general settings.\n\n### Further Information:\n\n### Auth token restrictions:\n\nA restriction is a lower bound for a token timeout and defines a duration after which a token is invalidated when it wasn't used.  \nThe access/refresh token validity duration of the client is the upper bound. A token is invalidated - in any case - when it has passed.  \n\nAuth token restrictions are enabled by default.\n\n* Default access token validity: **2 hours**  \n* Default refresh token validity: **30 days**\n\n### Configurable general settings:\n<details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting | Description | Value |\n| :--- | :--- | :--- |\n| `sharePasswordSmsEnabled` | Determines whether sending of share passwords via SMS is allowed. | `true or false` |\n| `cryptoEnabled` | Determines whether client-side encryption is enabled.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |\n| `emailNotificationButtonEnabled` | Determines whether email notification button is enabled. | `true or false` |\n| `eulaEnabled` | Determines whether EULA is enabled.<br>Each user has to confirm the EULA at first login. | `true or false` |\n| `useS3Storage` | Defines if S3 is used as storage backend.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |\n| `s3TagsEnabled` | Determines whether S3 tags are enabled | `true or false` |\n| `authTokenRestrictions` | Determines auth token restrictions. (e.g. restricted access token validity) | `object` |\n\n</details>\n\n### Deprecated configurable general settings:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Setting                           | Description | Value |\n|:----------------------------------| :--- | :--- |\n| <del>`mediaServerEnabled`</del>   | Determines whether media server is enabled.<br>Returns boolean value dependent on conjunction of `mediaServerConfigEnabled` AND `mediaServerEnabled` | `true or false` |\n| <del>`weakPasswordEnabled`</del>  | Determines whether weak password is allowed.<br>Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |\n| <del>`hideLoginInputFields`</del> | Determines whether input fields for login should be enabled | `true or false` |\n\n</details>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Sds-Auth-Token": {
        "type": "string",
        "description": "Authentication token"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "/api/v4/system/config/settings/general"
    },
    "headers": {
      "X-Sds-Auth-Token": {
        "$": "X-Sds-Auth-Token"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "General settings",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**authTokenRestrictions**: Auth token restrictions",
              {
                "$ul": [
                  "**accessTokenValidity**: &#128640; Since v4.13.0",
                  "**refreshTokenValidity**: &#128640; Since v4.13.0",
                  "**restrictionEnabled**: &#128640; Since v4.13.0"
                ]
              }
            ],
            "**cryptoEnabled**: Activation status of client-side encryption.",
            "**emailNotificationButtonEnabled**: Enable email notification button",
            "**eulaEnabled**: Each user has to confirm the EULA at first login.",
            "**hideLoginInputFields**: &#128679; Deprecated since v4.42.0",
            "**mediaServerEnabled**: &#128679; Deprecated since v4.12.0",
            "**s3TagsEnabled**: &#128640; Since v4.9.0",
            "**sharePasswordSmsEnabled**: Allow sending of share passwords via SMS",
            "**useS3Storage**: Defines if S3 is used as storage backend",
            "**weakPasswordEnabled**: &#128679; Deprecated since v4.14.0"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "406": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "412": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
