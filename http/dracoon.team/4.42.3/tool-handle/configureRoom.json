{
  "name": "configureRoom",
  "description": "### Description:\nConfigure a room.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.\n\n### Postcondition:\nRoom's configuration is changed.\n\n### Further Information:\nProvided (or default) classification is taken from room when file gets uploaded without any classification.  \n\nTo set `adminIds` or `adminGroupIds` the `inheritPermissions` value has to be `false`. Otherwise use:\n* `PUT /nodes/rooms/{room_id}/groups`\n* `PUT /nodes/rooms/{room_id}/users `  \n\nAPIs.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Sds-Date-Format": {
        "enum": [
          "UTC",
          "LOCAL",
          "OFFSET",
          "EPOCH",
          "LEET"
        ],
        "type": "string",
        "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))"
      },
      "room_id": {
        "format": "int64",
        "type": "integer",
        "description": "Room ID"
      },
      "X-Sds-Auth-Token": {
        "type": "string",
        "description": "Authentication token"
      },
      "body": {
        "$ref": "#/$defs/ConfigRoomRequest"
      }
    },
    "required": [
      "room_id",
      "body"
    ],
    "$defs": {
      "ConfigRoomRequest": {
        "description": "Request model for configuring a room",
        "properties": {
          "adminGroupIds": {
            "description": "List of group ids\n\nA room requires at least one admin (user or group)",
            "items": {
              "description": "List of group ids\n\nA room requires at least one admin (user or group)",
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "adminIds": {
            "description": "List of user ids\n\nA room requires at least one admin (user or group)",
            "items": {
              "description": "List of user ids\n\nA room requires at least one admin (user or group)",
              "format": "int64",
              "type": "integer"
            },
            "type": "array"
          },
          "classification": {
            "default": 2,
            "description": "Classification ID:\n\n* `1` - public\n\n* `2` - internal\n\n* `3` - confidential\n\n* `4` - strictly confidential\n\n\n\nProvided (or default) classification is taken from room\n\nwhen file gets uploaded without any classification.",
            "enum": [
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "type": "integer"
          },
          "hasActivitiesLog": {
            "default": true,
            "description": "Is activities log active (for rooms only)",
            "type": "boolean"
          },
          "inheritPermissions": {
            "description": "Inherit permissions from parent room\n\n(default: `false` if `parentId` is `0`; otherwise: `true`)",
            "type": "boolean"
          },
          "newGroupMemberAcceptance": {
            "default": "autoallow",
            "description": "Behaviour when new users are added to the group:\n\n* `autoallow`\n\n* `pending`\n\n\n\nOnly relevant if `adminGroupIds` has items.",
            "enum": [
              "autoallow",
              "pending"
            ],
            "type": "string"
          },
          "recycleBinRetentionPeriod": {
            "description": "Retention period for deleted nodes in days",
            "format": "int32",
            "maximum": 9999,
            "minimum": 0,
            "type": "integer"
          },
          "takeOverPermissions": {
            "description": "Take over existing permissions",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "/api/v4/nodes/rooms/{room_id}/config"
    },
    "headers": {
      "X-Sds-Date-Format": {
        "$": "X-Sds-Date-Format"
      },
      "X-Sds-Auth-Token": {
        "$": "X-Sds-Auth-Token"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Node information (Node can be a room, folder or file)",
        "**Key properties:**",
        {
          "$ul": [
            "**authParentId**: &#128640; Since v4.15.0",
            "**branchVersion**: Version of last change in this node or a node further down the tree.",
            "**children**: &#128679; Deprecated since v4.10.0",
            "**classification**: Classification ID:",
            "**cntChildren**: &#128679; Deprecated since v4.11.0",
            "**cntComments**: Returns the number of comments of this node.",
            "**cntDeletedVersions**: Number of deleted versions of this file / folder",
            "**cntDownloadShares**: Returns the number of Download Shares of this node.",
            "**cntFiles**: &#128640; Since v4.11.0",
            "**cntFolders**: &#128640; Since v4.11.0",
            "**cntRooms**: &#128640; Since v4.11.0",
            "**cntUploadShares**: Returns the number of Upload Shares of this node.",
            "**createdAt**: Creation date",
            [
              "**createdBy**: User information",
              {
                "$ul": [
                  "**avatarUuid**: &#128640; Since v4.11.0",
                  "**displayName**: &#128679; Deprecated since v4.11.0",
                  "**email**: &#128640; Since v4.11.0",
                  "**firstName**: &#128640; Since v4.11.0",
                  "**id**: Unique identifier for the user",
                  "**lastName**: &#128640; Since v4.11.0",
                  "**title**: &#128679; Deprecated since v4.18.0",
                  "**userName**: &#128640; Since v4.13.0",
                  "**userType**: &#128640; Since v4.11.0"
                ]
              }
            ],
            [
              "**encryptionInfo**: Encryption states",
              {
                "$ul": [
                  "**dataSpaceKeyState**: DRACOON key state",
                  "**roomKeyState**: Room key state",
                  "**userKeyState**: User key state"
                ]
              }
            ],
            "**expireAt**: Expiration date",
            "**fileType**: File type / extension (for files only)",
            "**hasActivitiesLog**: Is activities log active (for rooms only) (default: true)",
            "**hash**: MD5 hash of file",
            "**id**: Node ID",
            "**inheritPermissions**: Inherit permissions from parent room",
            "**isBrowsable**: &#128640; Since v4.11.0",
            "**isEncrypted**: Encryption state",
            "**isFavorite**: Node is marked as favorite (for rooms / folders only)",
            "**mediaToken**: Media server media token",
            "**mediaType**: File media type (for files only)",
            "**name**: Name",
            "**notes**: User notes",
            "**parentId**: Parent node ID (room or folder)",
            "**parentPath**: Parent node path",
            [
              "**permissions**: Node permissions",
              {
                "$ul": [
                  "**change**: User / Group may update metadata of nodes: rename files and folders, change classification, etc.",
                  "**create**: User / Group may upload files, create folders and copy / move files to this room, overwriting is not possible.",
                  "**delete**: User / Group may overwrite and remove files / folders, move files from this room.",
                  "**deleteRecycleBin**: User / Group may permanently remove files / folders from the recycle bin.",
                  "**manage**: User / Group may grant all of the above permissions to other users and groups independently,",
                  "**manageDownloadShare**: User / Group may create Download Shares for files and containers view all previously created Download Shares in this room.",
                  "**manageUploadShare**: User / Group may create Upload Shares for containers, view all previously created Upload Shares in this room.",
                  "**read**: User / Group may see all rooms, files and folders in the room and download everything, copy files from this room.",
                  "**readRecycleBin**: User / Group may look up files / folders in the recycle bin.",
                  "**restoreRecycleBin**: User / Group may restore files / folders from recycle bin - room permissions required."
                ]
              }
            ],
            "**quota**: Quota in byte",
            "**recycleBinRetentionPeriod**: Retention period for deleted nodes in days",
            "**referenceId**: &#128640; Since v4.37.0",
            "**size**: Node size in byte",
            "**timestampCreation**: &#128640; Since v4.22.0",
            "**timestampModification**: &#128640; Since v4.22.0",
            "**type**: Node type",
            "**updatedAt**: Modification date",
            [
              "**updatedBy**: User information",
              {
                "$ul": [
                  "**avatarUuid**: &#128640; Since v4.11.0",
                  "**displayName**: &#128679; Deprecated since v4.11.0",
                  "**email**: &#128640; Since v4.11.0",
                  "**firstName**: &#128640; Since v4.11.0",
                  "**id**: Unique identifier for the user",
                  "**lastName**: &#128640; Since v4.11.0",
                  "**title**: &#128679; Deprecated since v4.18.0",
                  "**userName**: &#128640; Since v4.13.0",
                  "**userType**: &#128640; Since v4.11.0"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "406": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "409": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "412": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
