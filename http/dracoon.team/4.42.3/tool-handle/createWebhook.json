{
  "name": "createWebhook",
  "description": "<h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>\n\n### Description:  \nCreate a new webhook for the customer scope.\n\n### Precondition:\nRight <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.\n\n### Postcondition:\nWebhook is created for given event types.\n\n### Further Information:\nURL must begin with the `HTTPS` scheme.  \nWebhook names are limited to 150 characters.\n\n### Available event types:\n<details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\">\n<summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>\n\n| Name | Description | Scope |\n| :--- | :--- | :--- |\n| **`user.created`** | Triggered when a new user is created | Customer Admin Webhook |\n| **`user.deleted`** | Triggered when a user is deleted | Customer Admin Webhook |\n| **`user.locked`** | Triggered when a user gets locked | Customer Admin Webhook |\n|  |  |  |\n| **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Customer Admin Webhook |\n|  |  |  |\n| **`downloadshare.created`** | Triggered when a new download share is created in affected room | Node Webhook |\n| **`downloadshare.deleted`** | Triggered when a download share is deleted in affected room | Node Webhook |\n| **`downloadshare.used`** | Triggered when a download share is utilized in affected room | Node Webhook |\n| **`uploadshare.created`** | Triggered when a new upload share is created in affected room | Node Webhook |\n| **`uploadshare.deleted`** | Triggered when a upload share is deleted in affected room | Node Webhook |\n| **`uploadshare.used`** | Triggered when a new file is uploaded via the upload share in affected room | Node Webhook |\n| **`file.created`** | Triggered when a new file is uploaded in affected room | Node Webhook |\n| **`folder.created`** | Triggered when a new folder is created in affected room | Node Webhook |\n| **`room.created`** | Triggered when a new room is created (in affected room) | Node Webhook |\n| **`file.deleted`** | Triggered when a file is deleted in affected room | Node Webhook |\n| **`folder.deleted`** | Triggered when a folder is deleted in affected room | Node Webhook |\n| **`room.deleted`** | Triggered when a room is deleted in affected room | Node Webhook |\n\n</details>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Sds-Date-Format": {
        "enum": [
          "UTC",
          "LOCAL",
          "OFFSET",
          "EPOCH",
          "LEET"
        ],
        "type": "string",
        "description": "Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))"
      },
      "X-Sds-Auth-Token": {
        "type": "string",
        "description": "Authentication token"
      },
      "body": {
        "$ref": "#/$defs/CreateWebhookRequest"
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "CreateWebhookRequest": {
        "description": "Request model for creating a webhook",
        "properties": {
          "eventTypeNames": {
            "description": "List of names of event types",
            "items": {
              "description": "List of names of event types",
              "type": "string"
            },
            "type": "array"
          },
          "isEnabled": {
            "description": "Is enabled",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "secret": {
            "description": "Secret; used for event message signatures",
            "type": "string"
          },
          "triggerExampleEvent": {
            "description": "If set to true, an example event is being created",
            "type": "boolean"
          },
          "url": {
            "description": "URL (must begin with the `HTTPS` scheme)",
            "type": "string"
          }
        },
        "required": [
          "eventTypeNames",
          "name",
          "url"
        ],
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "/api/v4/settings/webhooks"
    },
    "headers": {
      "X-Sds-Date-Format": {
        "$": "X-Sds-Date-Format"
      },
      "X-Sds-Auth-Token": {
        "$": "X-Sds-Auth-Token"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Webhook information",
        "**Key properties:**",
        {
          "$ul": [
            "**createdAt**: Creation date",
            [
              "**createdBy**: User information",
              {
                "$ul": [
                  "**avatarUuid**: &#128640; Since v4.11.0",
                  "**displayName**: &#128679; Deprecated since v4.11.0",
                  "**email**: &#128640; Since v4.11.0",
                  "**firstName**: &#128640; Since v4.11.0",
                  "**id**: Unique identifier for the user",
                  "**lastName**: &#128640; Since v4.11.0",
                  "**title**: &#128679; Deprecated since v4.18.0",
                  "**userName**: &#128640; Since v4.13.0",
                  "**userType**: &#128640; Since v4.11.0"
                ]
              }
            ],
            "**eventTypeNames**: List of names of event types",
            "**expireAt**: Expiration date / time",
            "**failStatus**: Last HTTP status code when a webhook is disabled due to delivery failures",
            "**id**: ID",
            "**isEnabled**: Is enabled",
            "**name**: Name",
            "**secret**: Secret; used for event message signatures",
            "**updatedAt**: Modification date",
            [
              "**updatedBy**: User information",
              {
                "$ul": [
                  "**avatarUuid**: &#128640; Since v4.11.0",
                  "**displayName**: &#128679; Deprecated since v4.11.0",
                  "**email**: &#128640; Since v4.11.0",
                  "**firstName**: &#128640; Since v4.11.0",
                  "**id**: Unique identifier for the user",
                  "**lastName**: &#128640; Since v4.11.0",
                  "**title**: &#128679; Deprecated since v4.18.0",
                  "**userName**: &#128640; Since v4.13.0",
                  "**userType**: &#128640; Since v4.11.0"
                ]
              }
            ],
            "**url**: URL"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "406": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "412": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
