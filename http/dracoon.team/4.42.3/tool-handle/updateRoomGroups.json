{
  "name": "updateRoomGroups",
  "description": "### Description:\nAll existing group permissions will be overwritten.\n\n### Precondition:\nUser needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>. To add new members, the user needs the right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; non-members add</span>, which is included in any role.\n\n### Postcondition:\nGroup's permissions are changed.\n\n### Further Information:\nBatch function.  \n",
  "parameters": {
    "type": "object",
    "properties": {
      "room_id": {
        "format": "int64",
        "type": "integer",
        "description": "Room ID"
      },
      "X-Sds-Auth-Token": {
        "type": "string",
        "description": "Authentication token"
      },
      "body": {
        "$ref": "#/$defs/RoomGroupsAddBatchRequest"
      }
    },
    "required": [
      "room_id",
      "body"
    ],
    "$defs": {
      "RoomGroupsAddBatchRequest": {
        "description": "Request model for granting group(s) to the room",
        "properties": {
          "items": {
            "description": "List of room-group mappings",
            "items": {
              "$ref": "#/$defs/RoomGroupsAddBatchRequestItem"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "RoomGroupsAddBatchRequestItem": {
        "description": "Request item model for granting group to the room",
        "properties": {
          "id": {
            "description": "Unique identifier for the group",
            "format": "int64",
            "type": "integer"
          },
          "newGroupMemberAcceptance": {
            "default": "autoallow",
            "description": "Behaviour when new users are added to the group:\n\n* `autoallow`\n\n* `pending`\n\n\n\nOnly relevant if `adminGroupIds` has items.",
            "enum": [
              "autoallow",
              "pending"
            ],
            "type": "string"
          },
          "permissions": {
            "$ref": "#/$defs/NodePermissions"
          }
        },
        "required": [
          "id",
          "permissions"
        ],
        "type": "object"
      },
      "NodePermissions": {
        "description": "Node permissions",
        "properties": {
          "change": {
            "description": "User / Group may update metadata of nodes: rename files and folders, change classification, etc.",
            "type": "boolean"
          },
          "create": {
            "description": "User / Group may upload files, create folders and copy / move files to this room, overwriting is not possible.",
            "type": "boolean"
          },
          "delete": {
            "description": "User / Group may overwrite and remove files / folders, move files from this room.",
            "type": "boolean"
          },
          "deleteRecycleBin": {
            "description": "User / Group may permanently remove files / folders from the recycle bin.",
            "type": "boolean"
          },
          "manage": {
            "description": "User / Group may grant all of the above permissions to other users and groups independently,\n\nmay update room metadata and create / update / delete subordinary rooms, has all permissions.",
            "type": "boolean"
          },
          "manageDownloadShare": {
            "description": "User / Group may create Download Shares for files and containers view all previously created Download Shares in this room.",
            "type": "boolean"
          },
          "manageUploadShare": {
            "description": "User / Group may create Upload Shares for containers, view all previously created Upload Shares in this room.",
            "type": "boolean"
          },
          "read": {
            "description": "User / Group may see all rooms, files and folders in the room and download everything, copy files from this room.",
            "type": "boolean"
          },
          "readRecycleBin": {
            "description": "User / Group may look up files / folders in the recycle bin.",
            "type": "boolean"
          },
          "restoreRecycleBin": {
            "description": "User / Group may restore files / folders from recycle bin - room permissions required.",
            "type": "boolean"
          }
        },
        "required": [
          "change",
          "create",
          "delete",
          "deleteRecycleBin",
          "manage",
          "manageDownloadShare",
          "manageUploadShare",
          "read",
          "readRecycleBin",
          "restoreRecycleBin"
        ],
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "/api/v4/nodes/rooms/{room_id}/groups"
    },
    "headers": {
      "X-Sds-Auth-Token": {
        "$": "X-Sds-Auth-Token"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "406": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "412": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
