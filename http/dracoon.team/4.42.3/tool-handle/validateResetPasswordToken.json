{
  "name": "validateResetPasswordToken",
  "description": "### Description:  \nRequest all information for a password change dialogue e.g. real name of user.\n\n### Precondition:\nUser received a password reset token.\n\n### Postcondition:\nContext information is returned.\n\n### Further Information:\nNone.",
  "parameters": {
    "type": "object",
    "properties": {
      "token": {
        "type": "string",
        "description": "Password reset token"
      }
    },
    "required": [
      "token"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "/api/v4/auth/reset_password/{token}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Password reset information",
        "**Key properties:**",
        {
          "$ul": [
            "**allowSystemGlobalWeakPassword**: &#128679; Deprecated since v4.14.0",
            "**firstName**: User first name",
            "**gender**: &#128679; Deprecated since v4.12.0 (default: n)",
            "**lastName**: User last name",
            [
              "**loginPasswordPolicies**: Login password policies",
              {
                "$ul": [
                  [
                    "**characterRules**: Password character rules",
                    {
                      "$ul": [
                        "**mustContainCharacters**: Characters which a password must contain:",
                        "**numberOfCharacteristicsToEnforce**: Number of characteristics to enforce"
                      ]
                    }
                  ],
                  "**minLength**: Minimum number of characters a password must contain",
                  "**numberOfArchivedPasswords**: Number of passwords to archive",
                  [
                    "**passwordExpiration**: Password expiration information",
                    {
                      "$ul": [
                        "**enabled**: Determines whether password expiration is enabled",
                        "**maxPasswordAge**: Maximum allowed password age (in days)"
                      ]
                    }
                  ],
                  "**rejectDictionaryWords**: Determines whether a password must NOT contain word(s) from a dictionary",
                  "**rejectKeyboardPatterns**: Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)",
                  "**rejectUserInfo**: Determines whether a password must NOT contain user info (first name, last name, email, user name)",
                  "**updatedAt**: Modification date",
                  [
                    "**updatedBy**: User information",
                    {
                      "$ul": [
                        "**avatarUuid**: &#128640; Since v4.11.0",
                        "**displayName**: &#128679; Deprecated since v4.11.0",
                        "**email**: &#128640; Since v4.11.0",
                        "**firstName**: &#128640; Since v4.11.0",
                        "**id**: Unique identifier for the user",
                        "**lastName**: &#128640; Since v4.11.0",
                        "**title**: &#128679; Deprecated since v4.18.0",
                        "**userName**: &#128640; Since v4.13.0",
                        "**userType**: &#128640; Since v4.11.0"
                      ]
                    }
                  ],
                  [
                    "**userLockout**: User lockout information",
                    {
                      "$ul": [
                        "**enabled**: Determines whether user lockout is enabled",
                        "**lockoutPeriod**: Amount of minutes a user has to wait to make another login attempt after `maxNumberOfLoginFailures` has been exceeded",
                        "**maxNumberOfLoginFailures**: Maximum allowed number of failed login attempts"
                      ]
                    }
                  ]
                ]
              }
            ],
            "**title**: &#128679; Deprecated since v4.18.0"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "406": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error information",
        "**Key properties:**",
        {
          "$ul": [
            "**code**: HTTP status code",
            "**debugInfo**: Debug information",
            "**errorCode**: Internal error code",
            "**message**: HTTP status code description"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
