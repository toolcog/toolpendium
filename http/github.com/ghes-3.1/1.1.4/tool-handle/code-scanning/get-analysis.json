{
  "name": "code-scanning_get-analysis",
  "description": "Gets a specified code scanning analysis for a repository.\nYou must use an access token with the `security_events` scope to use this endpoint.\nGitHub Apps must have the `security_events` read permission to use this endpoint.\n\nThe default JSON response contains fields that describe the analysis.\nThis includes the Git reference and commit SHA to which the analysis relates,\nthe datetime of the analysis, the name of the code scanning tool,\nand the number of alerts.\n\nThe `rules_count` field in the default response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\nIf you use the Accept header `application/sarif+json`,\nthe response contains the analysis data that was uploaded.\nThis is formatted as\n[SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).\n\n**Deprecation notice**:\nThe `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.",
  "parameters": {
    "type": "object",
    "properties": {
      "owner": {
        "type": "string",
        "description": "The account owner of the repository. The name is not case sensitive."
      },
      "repo": {
        "type": "string",
        "description": "The name of the repository. The name is not case sensitive."
      },
      "analysis_id": {
        "type": "integer",
        "description": "The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation."
      }
    },
    "required": [
      "owner",
      "repo",
      "analysis_id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "http://HOSTNAME/api/v3/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**analysis_key**: Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.",
            "**category**: Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.",
            "**commit_sha**: The SHA of the commit to which the analysis you are uploading relates.",
            "**created_at**: The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "**deletable**",
            "**environment**: Identifies the variable values associated with the environment in which this analysis was performed.",
            "**error**",
            "**id**: Unique identifier for this analysis.",
            "**ref**: The full Git reference, formatted as `refs/heads/<branch name>`,",
            "**results_count**: The total number of results in the analysis.",
            "**rules_count**: The total number of rules used in the analysis.",
            "**sarif_id**: An identifier for the upload.",
            [
              "**tool**",
              {
                "$ul": [
                  "**guid**: The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.",
                  "**name**: The name of the tool used to generate the code scanning analysis.",
                  "**version**: The version of the tool used to generate the code scanning analysis."
                ]
              }
            ],
            "**tool_name**",
            "**url**: The REST API URL of the analysis resource.",
            "**warning**: Warning generated when processing the analysis"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error"
        },
        "Basic Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**message**",
            "**status**",
            "**url**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error"
        },
        "Basic Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**message**",
            "**status**",
            "**url**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "503": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**",
            "**documentation_url**",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
