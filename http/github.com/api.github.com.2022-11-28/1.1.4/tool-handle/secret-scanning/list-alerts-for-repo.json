{
  "name": "secret-scanning_list-alerts-for-repo",
  "description": "Lists secret scanning alerts for an eligible repository, from newest to oldest.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.",
  "parameters": {
    "type": "object",
    "properties": {
      "owner": {
        "type": "string",
        "description": "The account owner of the repository. The name is not case sensitive."
      },
      "repo": {
        "type": "string",
        "description": "The name of the repository. The name is not case sensitive."
      },
      "state": {
        "enum": [
          "open",
          "resolved"
        ],
        "type": "string",
        "description": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state."
      },
      "secret_type": {
        "type": "string",
        "description": "A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types."
      },
      "resolution": {
        "type": "string",
        "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`."
      },
      "sort": {
        "default": "created",
        "enum": [
          "created",
          "updated"
        ],
        "type": "string",
        "description": "The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved."
      },
      "direction": {
        "default": "desc",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string",
        "description": "The direction to sort the results by."
      },
      "page": {
        "default": 1,
        "type": "integer",
        "description": "Page number of the results to fetch."
      },
      "per_page": {
        "default": 30,
        "type": "integer",
        "description": "The number of results per page (max 100)."
      },
      "before": {
        "type": "string",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string."
      },
      "after": {
        "type": "string",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string."
      }
    },
    "required": [
      "owner",
      "repo"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://github.com//repos/{owner}/{repo}/secret-scanning/alerts{?state,secret_type,resolution,sort,direction,page,per_page,before,after}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "List"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**created_at**: The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "**html_url**: The GitHub URL of the alert resource.",
            "**locations_url**: The REST API URL of the code locations for this alert.",
            "**number**: The security alert number.",
            "**push_protection_bypassed**: Whether push protection was bypassed for the detected secret.",
            "**push_protection_bypassed_at**: The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            [
              "**push_protection_bypassed_by**: A GitHub user.",
              {
                "$ul": [
                  "**avatar_url**",
                  "**email**",
                  "**events_url**",
                  "**followers_url**",
                  "**following_url**",
                  "**gists_url**",
                  "**gravatar_id**",
                  "**html_url**",
                  "**id**",
                  "**login**",
                  "**name**",
                  "**node_id**",
                  "**organizations_url**",
                  "**received_events_url**",
                  "**repos_url**",
                  "**site_admin**",
                  "**starred_at**",
                  "**starred_url**",
                  "**subscriptions_url**",
                  "**type**",
                  "**url**"
                ]
              }
            ],
            "**resolution**: **Required when the `state` is `resolved`.** The reason for resolving the alert.",
            "**resolution_comment**: An optional comment to resolve an alert.",
            "**resolved_at**: The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            [
              "**resolved_by**: A GitHub user.",
              {
                "$ul": [
                  "**avatar_url**",
                  "**email**",
                  "**events_url**",
                  "**followers_url**",
                  "**following_url**",
                  "**gists_url**",
                  "**gravatar_id**",
                  "**html_url**",
                  "**id**",
                  "**login**",
                  "**name**",
                  "**node_id**",
                  "**organizations_url**",
                  "**received_events_url**",
                  "**repos_url**",
                  "**site_admin**",
                  "**starred_at**",
                  "**starred_url**",
                  "**subscriptions_url**",
                  "**type**",
                  "**url**"
                ]
              }
            ],
            "**secret**: The secret that was detected.",
            "**secret_type**: The type of secret that secret scanning detected.",
            "**secret_type_display_name**: User-friendly name for the detected secret, matching the `secret_type`.",
            "**state**: Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.",
            "**updated_at**: The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "**url**: The REST API URL of the alert resource."
          ]
        },
        {
          "$each": "$.body.*",
          "$as": "item",
          "$block": [
            {
              "$h2": "Item"
            },
            {
              "$lang": "json",
              "$code": {
                "$encode": "json",
                "$indent": true,
                "$content": {
                  "$": "$.item"
                }
              }
            }
          ]
        }
      ]
    },
    "503": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**",
            "**documentation_url**",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
