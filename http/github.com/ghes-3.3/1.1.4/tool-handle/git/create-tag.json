{
  "name": "git_create-tag",
  "description": "Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/enterprise-server@3.3/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/enterprise-server@3.3/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |",
  "parameters": {
    "type": "object",
    "properties": {
      "owner": {
        "type": "string",
        "description": "The account owner of the repository. The name is not case sensitive."
      },
      "repo": {
        "type": "string",
        "description": "The name of the repository. The name is not case sensitive."
      },
      "body": {
        "properties": {
          "message": {
            "description": "The tag message.",
            "type": "string"
          },
          "object": {
            "description": "The SHA of the git object this is tagging.",
            "type": "string"
          },
          "tag": {
            "description": "The tag's name. This is typically a version (e.g., \"v0.0.1\").",
            "type": "string"
          },
          "tagger": {
            "description": "An object with information about the individual creating the tag.",
            "properties": {
              "date": {
                "description": "When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                "format": "date-time",
                "type": "string"
              },
              "email": {
                "description": "The email of the author of the tag",
                "type": "string"
              },
              "name": {
                "description": "The name of the author of the tag",
                "type": "string"
              }
            },
            "required": [
              "name",
              "email"
            ],
            "type": "object"
          },
          "type": {
            "description": "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
            "enum": [
              "commit",
              "tree",
              "blob"
            ],
            "type": "string"
          }
        },
        "required": [
          "tag",
          "message",
          "object",
          "type"
        ],
        "type": "object"
      }
    },
    "required": [
      "owner",
      "repo",
      "body"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://github.com//repos/{owner}/{repo}/git/tags"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Git Tag"
        },
        "Metadata for a Git tag",
        "**Key properties:**",
        {
          "$ul": [
            "**message**: Message describing the purpose of the tag",
            "**node_id**",
            [
              "**object**",
              {
                "$ul": [
                  "**sha**",
                  "**type**",
                  "**url**"
                ]
              }
            ],
            "**sha**",
            "**tag**: Name of the tag",
            [
              "**tagger**",
              {
                "$ul": [
                  "**date**",
                  "**email**",
                  "**name**"
                ]
              }
            ],
            "**url**: URL for the tag",
            [
              "**verification**",
              {
                "$ul": [
                  "**payload**",
                  "**reason**",
                  "**signature**",
                  "**verified**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "422": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Validation Error"
        },
        "Validation Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**errors**",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
