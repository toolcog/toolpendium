{
  "name": "oauth-authorizations_get-or-create-authorization-for-app-and-fingerprint",
  "description": "**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.5/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.5/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.5/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\n**Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.5/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n\nThis method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.\n\nIf you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.5/rest/overview/other-authentication-methods#working-with-two-factor-authentication).\"",
  "parameters": {
    "type": "object",
    "properties": {
      "client_id": {
        "type": "string",
        "description": "The client ID of the OAuth app."
      },
      "fingerprint": {
        "type": "string"
      },
      "body": {
        "properties": {
          "client_secret": {
            "description": "The OAuth app client secret for which to create the token.",
            "maxLength": 40,
            "type": "string"
          },
          "note": {
            "description": "A note to remind you what the OAuth token is for.",
            "example": "Update all gems",
            "type": "string"
          },
          "note_url": {
            "description": "A URL to remind you what app the OAuth token is for.",
            "type": "string"
          },
          "scopes": {
            "description": "A list of scopes that this authorization is in.",
            "example": [
              "public_repo",
              "user"
            ],
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "client_secret"
        ],
        "type": "object"
      }
    },
    "required": [
      "client_id",
      "fingerprint",
      "body"
    ]
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://github.com//authorizations/clients/{client_id}/{fingerprint}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Authorization"
        },
        "The authorization for an OAuth app, GitHub App, or a Personal Access Token.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**app**",
              {
                "$ul": [
                  "**client_id**",
                  "**name**",
                  "**url**"
                ]
              }
            ],
            "**created_at**",
            "**expires_at**",
            "**fingerprint**",
            "**hashed_token**",
            "**id**",
            [
              "**installation**",
              {
                "$ul": [
                  [
                    "**account**: A GitHub user.",
                    {
                      "$ul": [
                        "**avatar_url**",
                        "**email**",
                        "**events_url**",
                        "**followers_url**",
                        "**following_url**",
                        "**gists_url**",
                        "**gravatar_id**",
                        "**html_url**",
                        "**id**",
                        "**login**",
                        "**name**",
                        "**node_id**",
                        "**organizations_url**",
                        "**received_events_url**",
                        "**repos_url**",
                        "**site_admin**",
                        "**starred_at**",
                        "**starred_url**",
                        "**subscriptions_url**",
                        "**type**",
                        "**url**"
                      ]
                    }
                  ],
                  "**has_multiple_single_files**",
                  [
                    "**permissions**: The permissions granted to the user-to-server access token.",
                    {
                      "$ul": [
                        "**actions**: The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
                        "**administration**: The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
                        "**checks**: The level of permission to grant the access token for checks on code.",
                        "**contents**: The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
                        "**deployments**: The level of permission to grant the access token for deployments and deployment statuses.",
                        "**environments**: The level of permission to grant the access token for managing repository environments.",
                        "**issues**: The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
                        "**members**: The level of permission to grant the access token for organization teams and members.",
                        "**metadata**: The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
                        "**organization_administration**: The level of permission to grant the access token to manage access to an organization.",
                        "**organization_hooks**: The level of permission to grant the access token to manage the post-receive hooks for an organization.",
                        "**organization_packages**: The level of permission to grant the access token for organization packages published to GitHub Packages.",
                        "**organization_plan**: The level of permission to grant the access token for viewing an organization's plan.",
                        "**organization_projects**: The level of permission to grant the access token to manage organization projects and projects beta (where available).",
                        "**organization_secrets**: The level of permission to grant the access token to manage organization secrets.",
                        "**organization_self_hosted_runners**: The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
                        "**organization_user_blocking**: The level of permission to grant the access token to view and manage users blocked by the organization.",
                        "**packages**: The level of permission to grant the access token for packages published to GitHub Packages.",
                        "**pages**: The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
                        "**pull_requests**: The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
                        "**repository_hooks**: The level of permission to grant the access token to manage the post-receive hooks for a repository.",
                        "**repository_projects**: The level of permission to grant the access token to manage repository projects, columns, and cards.",
                        "**secret_scanning_alerts**: The level of permission to grant the access token to view and manage secret scanning alerts.",
                        "**secrets**: The level of permission to grant the access token to manage repository secrets.",
                        "**security_events**: The level of permission to grant the access token to view and manage security events like code scanning alerts.",
                        "**single_file**: The level of permission to grant the access token to manage just a single file.",
                        "**statuses**: The level of permission to grant the access token for commit statuses.",
                        "**team_discussions**: The level of permission to grant the access token to manage team discussions and related comments.",
                        "**vulnerability_alerts**: The level of permission to grant the access token to manage Dependabot alerts.",
                        "**workflows**: The level of permission to grant the access token to update GitHub Actions workflow files."
                      ]
                    }
                  ],
                  "**repositories_url**",
                  "**repository_selection**: Describe whether all repositories have been selected or there's a selection involved",
                  "**single_file_name**",
                  "**single_file_paths**"
                ]
              }
            ],
            "**note**",
            "**note_url**",
            "**scopes**: A list of scopes that this authorization is in.",
            "**token**",
            "**token_last_eight**",
            "**updated_at**",
            "**url**",
            [
              "**user**: A GitHub user.",
              {
                "$ul": [
                  "**avatar_url**",
                  "**email**",
                  "**events_url**",
                  "**followers_url**",
                  "**following_url**",
                  "**gists_url**",
                  "**gravatar_id**",
                  "**html_url**",
                  "**id**",
                  "**login**",
                  "**name**",
                  "**node_id**",
                  "**organizations_url**",
                  "**received_events_url**",
                  "**repos_url**",
                  "**site_admin**",
                  "**starred_at**",
                  "**starred_url**",
                  "**subscriptions_url**",
                  "**type**",
                  "**url**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Authorization"
        },
        "The authorization for an OAuth app, GitHub App, or a Personal Access Token.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**app**",
              {
                "$ul": [
                  "**client_id**",
                  "**name**",
                  "**url**"
                ]
              }
            ],
            "**created_at**",
            "**expires_at**",
            "**fingerprint**",
            "**hashed_token**",
            "**id**",
            [
              "**installation**",
              {
                "$ul": [
                  [
                    "**account**: A GitHub user.",
                    {
                      "$ul": [
                        "**avatar_url**",
                        "**email**",
                        "**events_url**",
                        "**followers_url**",
                        "**following_url**",
                        "**gists_url**",
                        "**gravatar_id**",
                        "**html_url**",
                        "**id**",
                        "**login**",
                        "**name**",
                        "**node_id**",
                        "**organizations_url**",
                        "**received_events_url**",
                        "**repos_url**",
                        "**site_admin**",
                        "**starred_at**",
                        "**starred_url**",
                        "**subscriptions_url**",
                        "**type**",
                        "**url**"
                      ]
                    }
                  ],
                  "**has_multiple_single_files**",
                  [
                    "**permissions**: The permissions granted to the user-to-server access token.",
                    {
                      "$ul": [
                        "**actions**: The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
                        "**administration**: The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
                        "**checks**: The level of permission to grant the access token for checks on code.",
                        "**contents**: The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
                        "**deployments**: The level of permission to grant the access token for deployments and deployment statuses.",
                        "**environments**: The level of permission to grant the access token for managing repository environments.",
                        "**issues**: The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
                        "**members**: The level of permission to grant the access token for organization teams and members.",
                        "**metadata**: The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
                        "**organization_administration**: The level of permission to grant the access token to manage access to an organization.",
                        "**organization_hooks**: The level of permission to grant the access token to manage the post-receive hooks for an organization.",
                        "**organization_packages**: The level of permission to grant the access token for organization packages published to GitHub Packages.",
                        "**organization_plan**: The level of permission to grant the access token for viewing an organization's plan.",
                        "**organization_projects**: The level of permission to grant the access token to manage organization projects and projects beta (where available).",
                        "**organization_secrets**: The level of permission to grant the access token to manage organization secrets.",
                        "**organization_self_hosted_runners**: The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
                        "**organization_user_blocking**: The level of permission to grant the access token to view and manage users blocked by the organization.",
                        "**packages**: The level of permission to grant the access token for packages published to GitHub Packages.",
                        "**pages**: The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
                        "**pull_requests**: The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
                        "**repository_hooks**: The level of permission to grant the access token to manage the post-receive hooks for a repository.",
                        "**repository_projects**: The level of permission to grant the access token to manage repository projects, columns, and cards.",
                        "**secret_scanning_alerts**: The level of permission to grant the access token to view and manage secret scanning alerts.",
                        "**secrets**: The level of permission to grant the access token to manage repository secrets.",
                        "**security_events**: The level of permission to grant the access token to view and manage security events like code scanning alerts.",
                        "**single_file**: The level of permission to grant the access token to manage just a single file.",
                        "**statuses**: The level of permission to grant the access token for commit statuses.",
                        "**team_discussions**: The level of permission to grant the access token to manage team discussions and related comments.",
                        "**vulnerability_alerts**: The level of permission to grant the access token to manage Dependabot alerts.",
                        "**workflows**: The level of permission to grant the access token to update GitHub Actions workflow files."
                      ]
                    }
                  ],
                  "**repositories_url**",
                  "**repository_selection**: Describe whether all repositories have been selected or there's a selection involved",
                  "**single_file_name**",
                  "**single_file_paths**"
                ]
              }
            ],
            "**note**",
            "**note_url**",
            "**scopes**: A list of scopes that this authorization is in.",
            "**token**",
            "**token_last_eight**",
            "**updated_at**",
            "**url**",
            [
              "**user**: A GitHub user.",
              {
                "$ul": [
                  "**avatar_url**",
                  "**email**",
                  "**events_url**",
                  "**followers_url**",
                  "**following_url**",
                  "**gists_url**",
                  "**gravatar_id**",
                  "**html_url**",
                  "**id**",
                  "**login**",
                  "**name**",
                  "**node_id**",
                  "**organizations_url**",
                  "**received_events_url**",
                  "**repos_url**",
                  "**site_admin**",
                  "**starred_at**",
                  "**starred_url**",
                  "**subscriptions_url**",
                  "**type**",
                  "**url**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "422": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Validation Error"
        },
        "Validation Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**errors**",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
