{
  "name": "code-scanning_update-alert",
  "description": "Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.",
  "parameters": {
    "type": "object",
    "properties": {
      "owner": {
        "type": "string",
        "description": "The account owner of the repository. The name is not case sensitive."
      },
      "repo": {
        "type": "string",
        "description": "The name of the repository. The name is not case sensitive."
      },
      "alert_number": {
        "$ref": "#/components/schemas/alert-number",
        "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation."
      },
      "body": {
        "properties": {
          "dismissed_reason": {
            "$ref": "#/$defs/code-scanning-alert-dismissed-reason"
          },
          "state": {
            "$ref": "#/$defs/code-scanning-alert-set-state"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      }
    },
    "required": [
      "owner",
      "repo",
      "alert_number",
      "body"
    ],
    "$defs": {
      "code-scanning-alert-dismissed-reason": {
        "description": "**Required when the state is dismissed.** The reason for dismissing or closing the alert.",
        "enum": [
          null,
          "false positive",
          "won't fix",
          "used in tests"
        ],
        "nullable": true,
        "type": "string"
      },
      "code-scanning-alert-set-state": {
        "description": "Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.",
        "enum": [
          "open",
          "dismissed"
        ],
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://github.com//repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**created_at**: The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "**dismissed_at**: The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            [
              "**dismissed_by**: A GitHub user.",
              {
                "$ul": [
                  "**avatar_url**",
                  "**email**",
                  "**events_url**",
                  "**followers_url**",
                  "**following_url**",
                  "**gists_url**",
                  "**gravatar_id**",
                  "**html_url**",
                  "**id**",
                  "**login**",
                  "**name**",
                  "**node_id**",
                  "**organizations_url**",
                  "**received_events_url**",
                  "**repos_url**",
                  "**site_admin**",
                  "**starred_at**",
                  "**starred_url**",
                  "**subscriptions_url**",
                  "**type**",
                  "**url**"
                ]
              }
            ],
            "**dismissed_reason**: **Required when the state is dismissed.** The reason for dismissing or closing the alert.",
            "**fixed_at**: The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "**html_url**: The GitHub URL of the alert resource.",
            "**instances_url**: The REST API URL for fetching the list of instances for an alert.",
            [
              "**most_recent_instance**",
              {
                "$ul": [
                  "**analysis_key**: Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.",
                  "**category**: Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.",
                  "**classifications**: Classifications that have been applied to the file that triggered the alert.",
                  "**commit_sha**",
                  "**environment**: Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.",
                  "**html_url**",
                  [
                    "**location**: Describe a region within a file for the alert.",
                    {
                      "$ul": [
                        "**end_column**",
                        "**end_line**",
                        "**path**",
                        "**start_column**",
                        "**start_line**"
                      ]
                    }
                  ],
                  [
                    "**message**",
                    {
                      "$ul": [
                        "**text**"
                      ]
                    }
                  ],
                  "**ref**: The full Git reference, formatted as `refs/heads/<branch name>`,",
                  "**state**: State of a code scanning alert."
                ]
              }
            ],
            "**number**: The security alert number.",
            [
              "**rule**",
              {
                "$ul": [
                  "**description**: A short description of the rule used to detect the alert.",
                  "**full_description**: description of the rule used to detect the alert.",
                  "**help**: Detailed documentation for the rule as GitHub Flavored Markdown.",
                  "**help_uri**: A link to the documentation for the rule used to detect the alert.",
                  "**id**: A unique identifier for the rule used to detect the alert.",
                  "**name**: The name of the rule used to detect the alert.",
                  "**security_severity_level**: The security severity of the alert.",
                  "**severity**: The severity of the alert.",
                  "**tags**: A set of tags applicable for the rule."
                ]
              }
            ],
            "**state**: State of a code scanning alert.",
            [
              "**tool**",
              {
                "$ul": [
                  "**guid**: The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.",
                  "**name**: The name of the tool used to generate the code scanning analysis.",
                  "**version**: The version of the tool used to generate the code scanning analysis."
                ]
              }
            ],
            "**updated_at**: The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "**url**: The REST API URL of the alert resource."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error"
        },
        "Basic Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**message**",
            "**status**",
            "**url**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error"
        },
        "Basic Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**message**",
            "**status**",
            "**url**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "503": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**",
            "**documentation_url**",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
