{
  "name": "code-scanning_list-alerts-for-repo",
  "description": "Lists code scanning alerts.\n\nTo use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.\n\nGitHub Apps must have the `security_events` read\npermission to use this endpoint.\n\nThe response includes a `most_recent_instance` object.\nThis provides details of the most recent instance of this alert\nfor the default branch (or for the specified Git reference if you used `ref` in the request).",
  "parameters": {
    "type": "object",
    "properties": {
      "owner": {
        "type": "string",
        "description": "The account owner of the repository. The name is not case sensitive."
      },
      "repo": {
        "type": "string",
        "description": "The name of the repository. The name is not case sensitive."
      },
      "tool_name": {
        "$ref": "#/components/schemas/code-scanning-analysis-tool-name",
        "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both."
      },
      "tool_guid": {
        "$ref": "#/components/schemas/code-scanning-analysis-tool-guid",
        "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both."
      },
      "page": {
        "default": 1,
        "type": "integer",
        "description": "Page number of the results to fetch."
      },
      "per_page": {
        "default": 30,
        "type": "integer",
        "description": "The number of results per page (max 100)."
      },
      "ref": {
        "$ref": "#/components/schemas/code-scanning-ref",
        "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`."
      },
      "direction": {
        "default": "desc",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string",
        "description": "The direction to sort the results by."
      },
      "sort": {
        "default": "created",
        "enum": [
          "created",
          "updated"
        ],
        "type": "string",
        "description": "The property by which to sort the results."
      },
      "state": {
        "$ref": "#/components/schemas/code-scanning-alert-state",
        "description": "If specified, only code scanning alerts with this state will be returned."
      },
      "severity": {
        "$ref": "#/components/schemas/code-scanning-alert-severity",
        "description": "If specified, only code scanning alerts with this severity will be returned."
      }
    },
    "required": [
      "owner",
      "repo"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://github.com//repos/{owner}/{repo}/code-scanning/alerts{?tool_name,tool_guid,page,per_page,ref,direction,sort,state,severity}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "List"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**created_at**: The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "**dismissed_at**: The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            [
              "**dismissed_by**: A GitHub user.",
              {
                "$ul": [
                  "**avatar_url**",
                  "**email**",
                  "**events_url**",
                  "**followers_url**",
                  "**following_url**",
                  "**gists_url**",
                  "**gravatar_id**",
                  "**html_url**",
                  "**id**",
                  "**login**",
                  "**name**",
                  "**node_id**",
                  "**organizations_url**",
                  "**received_events_url**",
                  "**repos_url**",
                  "**site_admin**",
                  "**starred_at**",
                  "**starred_url**",
                  "**subscriptions_url**",
                  "**type**",
                  "**url**"
                ]
              }
            ],
            "**dismissed_comment**: The dismissal comment associated with the dismissal of the alert.",
            "**dismissed_reason**: **Required when the state is dismissed.** The reason for dismissing or closing the alert.",
            "**fixed_at**: The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "**html_url**: The GitHub URL of the alert resource.",
            "**instances_url**: The REST API URL for fetching the list of instances for an alert.",
            [
              "**most_recent_instance**",
              {
                "$ul": [
                  "**analysis_key**: Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.",
                  "**category**: Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.",
                  "**classifications**: Classifications that have been applied to the file that triggered the alert.",
                  "**commit_sha**",
                  "**environment**: Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.",
                  "**html_url**",
                  [
                    "**location**: Describe a region within a file for the alert.",
                    {
                      "$ul": [
                        "**end_column**",
                        "**end_line**",
                        "**path**",
                        "**start_column**",
                        "**start_line**"
                      ]
                    }
                  ],
                  [
                    "**message**",
                    {
                      "$ul": [
                        "**text**"
                      ]
                    }
                  ],
                  "**ref**: The full Git reference, formatted as `refs/heads/<branch name>`,",
                  "**state**: State of a code scanning alert."
                ]
              }
            ],
            "**number**: The security alert number.",
            [
              "**rule**",
              {
                "$ul": [
                  "**description**: A short description of the rule used to detect the alert.",
                  "**id**: A unique identifier for the rule used to detect the alert.",
                  "**name**: The name of the rule used to detect the alert.",
                  "**severity**: The severity of the alert.",
                  "**tags**: A set of tags applicable for the rule."
                ]
              }
            ],
            "**state**: State of a code scanning alert.",
            [
              "**tool**",
              {
                "$ul": [
                  "**guid**: The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.",
                  "**name**: The name of the tool used to generate the code scanning analysis.",
                  "**version**: The version of the tool used to generate the code scanning analysis."
                ]
              }
            ],
            "**updated_at**: The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "**url**: The REST API URL of the alert resource."
          ]
        },
        {
          "$each": "$.body.*",
          "$as": "item",
          "$block": [
            {
              "$h2": "Item"
            },
            {
              "$lang": "json",
              "$code": {
                "$encode": "json",
                "$indent": true,
                "$content": {
                  "$": "$.item"
                }
              }
            }
          ]
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error"
        },
        "Basic Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**message**",
            "**status**",
            "**url**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error"
        },
        "Basic Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**message**",
            "**status**",
            "**url**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "503": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**",
            "**documentation_url**",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
