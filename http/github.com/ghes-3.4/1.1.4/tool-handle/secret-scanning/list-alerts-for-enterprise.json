{
  "name": "secret-scanning_list-alerts-for-enterprise",
  "description": "Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.\nTo use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/enterprise-server@3.4/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).",
  "parameters": {
    "type": "object",
    "properties": {
      "enterprise": {
        "type": "string",
        "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id."
      },
      "state": {
        "enum": [
          "open",
          "resolved"
        ],
        "type": "string",
        "description": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state."
      },
      "secret_type": {
        "type": "string",
        "description": "A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/enterprise-server@3.4/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types."
      },
      "resolution": {
        "type": "string",
        "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`."
      },
      "per_page": {
        "default": 30,
        "type": "integer",
        "description": "The number of results per page (max 100)."
      },
      "before": {
        "type": "string",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor."
      },
      "after": {
        "type": "string",
        "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.4/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor."
      }
    },
    "required": [
      "enterprise"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://github.com//enterprises/{enterprise}/secret-scanning/alerts{?state,secret_type,resolution,per_page,before,after}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "List"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**created_at**: The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "**html_url**: The GitHub URL of the alert resource.",
            "**locations_url**: The REST API URL of the code locations for this alert.",
            "**number**: The security alert number.",
            [
              "**repository**: A GitHub repository.",
              {
                "$ul": [
                  "**archive_url**: A template for the API URL to download the repository as an archive.",
                  "**assignees_url**: A template for the API URL to list the available assignees for issues in the repository.",
                  "**blobs_url**: A template for the API URL to create or retrieve a raw Git blob in the repository.",
                  "**branches_url**: A template for the API URL to get information about branches in the repository.",
                  "**collaborators_url**: A template for the API URL to get information about collaborators of the repository.",
                  "**comments_url**: A template for the API URL to get information about comments on the repository.",
                  "**commits_url**: A template for the API URL to get information about commits on the repository.",
                  "**compare_url**: A template for the API URL to compare two commits or refs.",
                  "**contents_url**: A template for the API URL to get the contents of the repository.",
                  "**contributors_url**: A template for the API URL to list the contributors to the repository.",
                  "**deployments_url**: The API URL to list the deployments of the repository.",
                  "**description**: The repository description.",
                  "**downloads_url**: The API URL to list the downloads on the repository.",
                  "**events_url**: The API URL to list the events of the repository.",
                  "**fork**: Whether the repository is a fork.",
                  "**forks_url**: The API URL to list the forks of the repository.",
                  "**full_name**: The full, globally unique, name of the repository.",
                  "**git_commits_url**: A template for the API URL to get information about Git commits of the repository.",
                  "**git_refs_url**: A template for the API URL to get information about Git refs of the repository.",
                  "**git_tags_url**: A template for the API URL to get information about Git tags of the repository.",
                  "**hooks_url**: The API URL to list the hooks on the repository.",
                  "**html_url**: The URL to view the repository on GitHub.com.",
                  "**id**: A unique identifier of the repository.",
                  "**issue_comment_url**: A template for the API URL to get information about issue comments on the repository.",
                  "**issue_events_url**: A template for the API URL to get information about issue events on the repository.",
                  "**issues_url**: A template for the API URL to get information about issues on the repository.",
                  "**keys_url**: A template for the API URL to get information about deploy keys on the repository.",
                  "**labels_url**: A template for the API URL to get information about labels of the repository.",
                  "**languages_url**: The API URL to get information about the languages of the repository.",
                  "**merges_url**: The API URL to merge branches in the repository.",
                  "**milestones_url**: A template for the API URL to get information about milestones of the repository.",
                  "**name**: The name of the repository.",
                  "**node_id**: The GraphQL identifier of the repository.",
                  "**notifications_url**: A template for the API URL to get information about notifications on the repository.",
                  [
                    "**owner**: A GitHub user.",
                    {
                      "$ul": [
                        "**avatar_url**",
                        "**email**",
                        "**events_url**",
                        "**followers_url**",
                        "**following_url**",
                        "**gists_url**",
                        "**gravatar_id**",
                        "**html_url**",
                        "**id**",
                        "**login**",
                        "**name**",
                        "**node_id**",
                        "**organizations_url**",
                        "**received_events_url**",
                        "**repos_url**",
                        "**site_admin**",
                        "**starred_at**",
                        "**starred_url**",
                        "**subscriptions_url**",
                        "**type**",
                        "**url**"
                      ]
                    }
                  ],
                  "**private**: Whether the repository is private.",
                  "**pulls_url**: A template for the API URL to get information about pull requests on the repository.",
                  "**releases_url**: A template for the API URL to get information about releases on the repository.",
                  "**stargazers_url**: The API URL to list the stargazers on the repository.",
                  "**statuses_url**: A template for the API URL to get information about statuses of a commit.",
                  "**subscribers_url**: The API URL to list the subscribers on the repository.",
                  "**subscription_url**: The API URL to subscribe to notifications for this repository.",
                  "**tags_url**: The API URL to get information about tags on the repository.",
                  "**teams_url**: The API URL to list the teams on the repository.",
                  "**trees_url**: A template for the API URL to create or retrieve a raw Git tree of the repository.",
                  "**url**: The URL to get more information about the repository from the GitHub API."
                ]
              }
            ],
            "**resolution**: **Required when the `state` is `resolved`.** The reason for resolving the alert.",
            "**resolved_at**: The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            [
              "**resolved_by**: A GitHub user.",
              {
                "$ul": [
                  "**avatar_url**",
                  "**email**",
                  "**events_url**",
                  "**followers_url**",
                  "**following_url**",
                  "**gists_url**",
                  "**gravatar_id**",
                  "**html_url**",
                  "**id**",
                  "**login**",
                  "**name**",
                  "**node_id**",
                  "**organizations_url**",
                  "**received_events_url**",
                  "**repos_url**",
                  "**site_admin**",
                  "**starred_at**",
                  "**starred_url**",
                  "**subscriptions_url**",
                  "**type**",
                  "**url**"
                ]
              }
            ],
            "**secret**: The secret that was detected.",
            "**secret_type**: The type of secret that secret scanning detected.",
            "**state**: Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.",
            "**updated_at**: The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "**url**: The REST API URL of the alert resource."
          ]
        },
        {
          "$each": "$.body.*",
          "$as": "item",
          "$block": [
            {
              "$h2": "Item"
            },
            {
              "$lang": "json",
              "$code": {
                "$encode": "json",
                "$indent": true,
                "$content": {
                  "$": "$.item"
                }
              }
            }
          ]
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error"
        },
        "Basic Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**message**",
            "**status**",
            "**url**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "503": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**code**",
            "**documentation_url**",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
