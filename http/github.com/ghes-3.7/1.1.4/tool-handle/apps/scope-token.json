{
  "name": "apps_scope-token",
  "description": "Use a non-scoped user-to-server access token to create a repository scoped and/or permission scoped user-to-server access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.7/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the `client_id` and `client_secret` of the GitHub App as the username and password. Invalid tokens will return `404 NOT FOUND`.",
  "parameters": {
    "type": "object",
    "properties": {
      "client_id": {
        "type": "string",
        "description": "The client ID of the GitHub app."
      },
      "body": {
        "properties": {
          "access_token": {
            "description": "The access token used to authenticate to the GitHub API.",
            "example": "e72e16c7e42f292c6912e7710c838347ae178b4a",
            "type": "string"
          },
          "permissions": {
            "$ref": "#/$defs/app-permissions"
          },
          "repositories": {
            "description": "The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.",
            "items": {
              "example": "rails",
              "type": "string"
            },
            "type": "array"
          },
          "repository_ids": {
            "description": "The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.",
            "example": [
              1
            ],
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "target": {
            "description": "The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.",
            "example": "octocat",
            "type": "string"
          },
          "target_id": {
            "description": "The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.",
            "example": 1,
            "type": "integer"
          }
        },
        "required": [
          "access_token"
        ],
        "type": "object"
      }
    },
    "required": [
      "client_id",
      "body"
    ],
    "$defs": {
      "app-permissions": {
        "description": "The permissions granted to the user-to-server access token.",
        "example": {
          "contents": "read",
          "deployments": "write",
          "issues": "read",
          "single_file": "read"
        },
        "properties": {
          "actions": {
            "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "administration": {
            "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "checks": {
            "description": "The level of permission to grant the access token for checks on code.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "contents": {
            "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "deployments": {
            "description": "The level of permission to grant the access token for deployments and deployment statuses.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "environments": {
            "description": "The level of permission to grant the access token for managing repository environments.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "issues": {
            "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "members": {
            "description": "The level of permission to grant the access token for organization teams and members.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "metadata": {
            "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "organization_administration": {
            "description": "The level of permission to grant the access token to manage access to an organization.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "organization_hooks": {
            "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "organization_packages": {
            "description": "The level of permission to grant the access token for organization packages published to GitHub Packages.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "organization_plan": {
            "description": "The level of permission to grant the access token for viewing an organization's plan.",
            "enum": [
              "read"
            ],
            "type": "string"
          },
          "organization_projects": {
            "description": "The level of permission to grant the access token to manage organization projects and projects beta (where available).",
            "enum": [
              "read",
              "write",
              "admin"
            ],
            "type": "string"
          },
          "organization_secrets": {
            "description": "The level of permission to grant the access token to manage organization secrets.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "organization_self_hosted_runners": {
            "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "organization_user_blocking": {
            "description": "The level of permission to grant the access token to view and manage users blocked by the organization.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "packages": {
            "description": "The level of permission to grant the access token for packages published to GitHub Packages.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "pages": {
            "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "pull_requests": {
            "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "repository_hooks": {
            "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "repository_projects": {
            "description": "The level of permission to grant the access token to manage repository projects, columns, and cards.",
            "enum": [
              "read",
              "write",
              "admin"
            ],
            "type": "string"
          },
          "secret_scanning_alerts": {
            "description": "The level of permission to grant the access token to view and manage secret scanning alerts.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "secrets": {
            "description": "The level of permission to grant the access token to manage repository secrets.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "security_events": {
            "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "single_file": {
            "description": "The level of permission to grant the access token to manage just a single file.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "statuses": {
            "description": "The level of permission to grant the access token for commit statuses.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "team_discussions": {
            "description": "The level of permission to grant the access token to manage team discussions and related comments.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "vulnerability_alerts": {
            "description": "The level of permission to grant the access token to manage Dependabot alerts.",
            "enum": [
              "read",
              "write"
            ],
            "type": "string"
          },
          "workflows": {
            "description": "The level of permission to grant the access token to update GitHub Actions workflow files.",
            "enum": [
              "write"
            ],
            "type": "string"
          }
        },
        "title": "App Permissions",
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://github.com//applications/{client_id}/token/scoped"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Authorization"
        },
        "The authorization for an OAuth app, GitHub App, or a Personal Access Token.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**app**",
              {
                "$ul": [
                  "**client_id**",
                  "**name**",
                  "**url**"
                ]
              }
            ],
            "**created_at**",
            "**expires_at**",
            "**fingerprint**",
            "**hashed_token**",
            "**id**",
            [
              "**installation**",
              {
                "$ul": [
                  [
                    "**account**: A GitHub user.",
                    {
                      "$ul": [
                        "**avatar_url**",
                        "**email**",
                        "**events_url**",
                        "**followers_url**",
                        "**following_url**",
                        "**gists_url**",
                        "**gravatar_id**",
                        "**html_url**",
                        "**id**",
                        "**login**",
                        "**name**",
                        "**node_id**",
                        "**organizations_url**",
                        "**received_events_url**",
                        "**repos_url**",
                        "**site_admin**",
                        "**starred_at**",
                        "**starred_url**",
                        "**subscriptions_url**",
                        "**type**",
                        "**url**"
                      ]
                    }
                  ],
                  "**has_multiple_single_files**",
                  [
                    "**permissions**: The permissions granted to the user-to-server access token.",
                    {
                      "$ul": [
                        "**actions**: The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
                        "**administration**: The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
                        "**checks**: The level of permission to grant the access token for checks on code.",
                        "**contents**: The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
                        "**deployments**: The level of permission to grant the access token for deployments and deployment statuses.",
                        "**environments**: The level of permission to grant the access token for managing repository environments.",
                        "**issues**: The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
                        "**members**: The level of permission to grant the access token for organization teams and members.",
                        "**metadata**: The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
                        "**organization_administration**: The level of permission to grant the access token to manage access to an organization.",
                        "**organization_hooks**: The level of permission to grant the access token to manage the post-receive hooks for an organization.",
                        "**organization_packages**: The level of permission to grant the access token for organization packages published to GitHub Packages.",
                        "**organization_plan**: The level of permission to grant the access token for viewing an organization's plan.",
                        "**organization_projects**: The level of permission to grant the access token to manage organization projects and projects beta (where available).",
                        "**organization_secrets**: The level of permission to grant the access token to manage organization secrets.",
                        "**organization_self_hosted_runners**: The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
                        "**organization_user_blocking**: The level of permission to grant the access token to view and manage users blocked by the organization.",
                        "**packages**: The level of permission to grant the access token for packages published to GitHub Packages.",
                        "**pages**: The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
                        "**pull_requests**: The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
                        "**repository_hooks**: The level of permission to grant the access token to manage the post-receive hooks for a repository.",
                        "**repository_projects**: The level of permission to grant the access token to manage repository projects, columns, and cards.",
                        "**secret_scanning_alerts**: The level of permission to grant the access token to view and manage secret scanning alerts.",
                        "**secrets**: The level of permission to grant the access token to manage repository secrets.",
                        "**security_events**: The level of permission to grant the access token to view and manage security events like code scanning alerts.",
                        "**single_file**: The level of permission to grant the access token to manage just a single file.",
                        "**statuses**: The level of permission to grant the access token for commit statuses.",
                        "**team_discussions**: The level of permission to grant the access token to manage team discussions and related comments.",
                        "**vulnerability_alerts**: The level of permission to grant the access token to manage Dependabot alerts.",
                        "**workflows**: The level of permission to grant the access token to update GitHub Actions workflow files."
                      ]
                    }
                  ],
                  "**repositories_url**",
                  "**repository_selection**: Describe whether all repositories have been selected or there's a selection involved",
                  "**single_file_name**",
                  "**single_file_paths**"
                ]
              }
            ],
            "**note**",
            "**note_url**",
            "**scopes**: A list of scopes that this authorization is in.",
            "**token**",
            "**token_last_eight**",
            "**updated_at**",
            "**url**",
            [
              "**user**: A GitHub user.",
              {
                "$ul": [
                  "**avatar_url**",
                  "**email**",
                  "**events_url**",
                  "**followers_url**",
                  "**following_url**",
                  "**gists_url**",
                  "**gravatar_id**",
                  "**html_url**",
                  "**id**",
                  "**login**",
                  "**name**",
                  "**node_id**",
                  "**organizations_url**",
                  "**received_events_url**",
                  "**repos_url**",
                  "**site_admin**",
                  "**starred_at**",
                  "**starred_url**",
                  "**subscriptions_url**",
                  "**type**",
                  "**url**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error"
        },
        "Basic Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**message**",
            "**status**",
            "**url**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error"
        },
        "Basic Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**message**",
            "**status**",
            "**url**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Basic Error"
        },
        "Basic Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**message**",
            "**status**",
            "**url**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "422": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Validation Error"
        },
        "Validation Error",
        "**Key properties:**",
        {
          "$ul": [
            "**documentation_url**",
            "**errors**",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
