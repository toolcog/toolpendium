{
  "name": "getWebhook",
  "description": "Returns a single Webhook instance for a given webhook id",
  "parameters": {
    "type": "object",
    "properties": {
      "id": {
        "format": "int64",
        "type": "integer",
        "description": "An id of a webhook"
      },
      "fields": {
        "type": "string",
        "description": "Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page."
      }
    },
    "required": [
      "id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://api.callfire.com/v2/webhooks/{id}{?fields}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Webhook is a user-defined callback, which can be maintained via API. CallFire will send POST request to a client's endpoint defined in webhook once one of assigned events is triggered. See [webhooks guide](https://developers.callfire.com/webhooks-guide.html) for more information about CallFire Webhooks API.",
        "**Key properties:**",
        {
          "$ul": [
            "**callback**: URL that webhook will send POST to on resource event trigger",
            "**createdAt**: A time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000",
            "**enabled**: A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)",
            "**events**: Comma separated list of events on resource that will trigger callbacks (ex: STARTED, STOPPED, FINISHED, etc...). ",
            "**expiresAt**: ~",
            "**fields**: A limit callback response to a particular fields",
            "**id**: An id of a webhook",
            "**name**: A name of a webhook",
            "**nonStrictSsl**: A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)",
            "**resource**: A resource name that webhook is watching events on. Use GET /webhooks/resources to determine resources and events available (ex: InboundCall, OutboundCall, InboundText, OutboundText, CallBroadcast, TextBroadcast, etc...)",
            "**secret**: Webhook secret token which is used as a signing key to HmacSHA1 hash of json payload which is returned in 'X-CallFire-Signature' header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)",
            "**singleUse**: If true is set then webhook triggers only once. Afterwards the webhook will be deleted",
            "**updatedAt**: A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error response containing error info",
        "**Key properties:**",
        {
          "$ul": [
            "**developerMessage**: ~",
            "**helpLink**: ~",
            "**httpStatusCode**: ~",
            "**internalCode**: ~",
            "**message**: ~"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error response containing error info",
        "**Key properties:**",
        {
          "$ul": [
            "**developerMessage**: ~",
            "**helpLink**: ~",
            "**httpStatusCode**: ~",
            "**internalCode**: ~",
            "**message**: ~"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error response containing error info",
        "**Key properties:**",
        {
          "$ul": [
            "**developerMessage**: ~",
            "**helpLink**: ~",
            "**httpStatusCode**: ~",
            "**internalCode**: ~",
            "**message**: ~"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error response containing error info",
        "**Key properties:**",
        {
          "$ul": [
            "**developerMessage**: ~",
            "**helpLink**: ~",
            "**httpStatusCode**: ~",
            "**internalCode**: ~",
            "**message**: ~"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Error response containing error info",
        "**Key properties:**",
        {
          "$ul": [
            "**developerMessage**: ~",
            "**helpLink**: ~",
            "**httpStatusCode**: ~",
            "**internalCode**: ~",
            "**message**: ~"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
