{
  "name": "BrowserBot",
  "description": "Browser bot can extract content, interact with keyboard and mouse events, and execute JavaScript on a website",
  "parameters": {
    "type": "object",
    "properties": {
      "body": {
        "properties": {
          "delay": {
            "default": 3,
            "description": "Delay in seconds to wait before capturing any page data, executing selectors or JavaScript",
            "format": "int32",
            "type": "integer"
          },
          "exec": {
            "description": "Execute JavaScript on the website. This parameter accepts JavaScript as either a string containing JavaScript or for sending multiple separate statements a JSON array or POST array can also be used. If a statement returns any value it will be returned in the 'exec-results' response. You can also use the following specially defined user interaction functions: <br> <br> <div> sleep(seconds); Just wait/sleep for the specified number of seconds. <br>click('selector'); Click on the first element matching the given selector. <br>focus('selector'); Focus on the first element matching the given selector. <br>keys('characters'); Send the specified keyboard characters. Use click() or focus() first to send keys to a specific element. <br>enter(); Send the Enter key. <br>tab(); Send the Tab key. <br> </div>",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ignore-certificate-errors": {
            "default": false,
            "description": "Ignore any TLS/SSL certificate errors and load the page anyway",
            "type": "boolean"
          },
          "selector": {
            "description": "Extract content from the page DOM using this selector. Commonly known as a CSS selector, you can find a good reference <a href=\"https://www.w3schools.com/cssref/css_selectors.asp\">here</a>",
            "type": "string"
          },
          "timeout": {
            "default": 30,
            "description": "Timeout in seconds. Give up if still trying to load the page after this number of seconds",
            "format": "int32",
            "type": "integer"
          },
          "url": {
            "description": "The URL to load",
            "type": "string"
          },
          "user-agent": {
            "description": "Override the browsers default user-agent string with this one",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      }
    },
    "required": [
      "body"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://neutrinoapi.net/browser-bot"
    },
    "body": {
      "$": "body",
      "encode": "urlencoded"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "BrowserBotResponse"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**content**: The complete raw, decompressed and decoded page content. Usually will be either HTML, JSON or XML",
            "**elements**: Array containing all the elements matching the supplied selector. <br>Each element object will contain the text content, HTML content and all current element attributes",
            "**error-message**: Contains the error message if an error has occurred ('is-error' will be true)",
            "**exec-results**: If you executed any JavaScript this array holds the results as objects",
            "**http-redirect-url**: The redirected URL if the URL responded with an HTTP redirect",
            "**http-status-code**: The HTTP status code the URL returned",
            "**http-status-message**: The HTTP status message the URL returned",
            "**is-error**: True if an error has occurred loading the page. Check the 'error-message' field for details",
            "**is-http-ok**: True if the HTTP status is OK (200)",
            "**is-http-redirect**: True if the URL responded with an HTTP redirect",
            "**is-secure**: True if the page is secured using TLS/SSL",
            "**is-timeout**: True if a timeout occurred while loading the page. You can set the timeout with the request parameter 'timeout'",
            "**language-code**: The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers",
            "**load-time**: The number of seconds taken to load the page (from initial request until DOM ready)",
            "**mime-type**: The document MIME type",
            "**response-headers**: Map containing all the HTTP response headers the URL responded with",
            "**security-details**: Map containing details of the TLS/SSL setup",
            "**server-ip**: The HTTP servers IP address",
            "**title**: The document title",
            "**url**: The page URL"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "APIError"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**api-error**: API error code. If set and > 0 then an API error has occurred your request could not be completed",
            "**api-error-msg**: API error message"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "403": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "APIError"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**api-error**: API error code. If set and > 0 then an API error has occurred your request could not be completed",
            "**api-error-msg**: API error message"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "APIError"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**api-error**: API error code. If set and > 0 then an API error has occurred your request could not be completed",
            "**api-error-msg**: API error message"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "APIError"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**api-error**: API error code. If set and > 0 then an API error has occurred your request could not be completed",
            "**api-error-msg**: API error message"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
